/**
* @version: 1.3.15
* @author: Dan Grossman http://www.dangrossman.info/
* @date: 2014-10-20
* @copyright: Copyright (c) 2012-2014 Dan Grossman. All rights reserved.
* @license: Licensed under Apache License v2.0. See http://www.apache.org/licenses/LICENSE-2.0
* @website: http://www.improvely.com/
*/
(function (n, t) { if (typeof define == "function" && define.amd) define(["moment", "jquery", "exports"], function (i, r, u) { n.daterangepicker = t(n, u, i, r) }); else if (typeof exports != "undefined") { var r = require("moment"), i; try { i = require("jquery") } catch (u) { if (i = window.jQuery, !i) throw new Error("jQuery dependency not found"); } t(n, exports, r, i) } else n.daterangepicker = t(n, {}, n.moment, n.jQuery || n.Zepto || n.ender || n.$) })(this, function (n, t, i, r) { var u = function (n, t, i) { var u, f; this.parentEl = "body"; this.element = r(n); this.isShowing = !1; u = '<div class="daterangepicker dropdown-menu"><div class="calendar left"><\/div><div class="calendar right"><\/div><div class="ranges"><div class="range_inputs"><div class="daterangepicker_start_input"><label for="daterangepicker_start"><\/label><input class="input-mini" type="text" name="daterangepicker_start" value="" /><\/div><div class="daterangepicker_end_input"><label for="daterangepicker_end"><\/label><input class="input-mini" type="text" name="daterangepicker_end" value="" /><\/div><button class="applyBtn" disabled="disabled"><\/button>&nbsp;<button class="cancelBtn"><\/button><\/div><\/div><\/div>'; (typeof t != "object" || t === null) && (t = {}); this.parentEl = typeof t == "object" && t.parentEl && r(t.parentEl).length ? r(t.parentEl) : r(this.parentEl); this.container = r(u).appendTo(this.parentEl); this.setOptions(t, i); f = this.container; r.each(this.buttonClasses, function (n, t) { f.find("button").addClass(t) }); this.container.find(".daterangepicker_start_input label").html(this.locale.fromLabel); this.container.find(".daterangepicker_end_input label").html(this.locale.toLabel); this.applyClass.length && this.container.find(".applyBtn").addClass(this.applyClass); this.cancelClass.length && this.container.find(".cancelBtn").addClass(this.cancelClass); this.container.find(".applyBtn").html(this.locale.applyLabel); this.container.find(".cancelBtn").html(this.locale.cancelLabel); this.container.find(".calendar").on("click.daterangepicker", ".prev", r.proxy(this.clickPrev, this)).on("click.daterangepicker", ".next", r.proxy(this.clickNext, this)).on("click.daterangepicker", "td.available", r.proxy(this.clickDate, this)).on("mouseenter.daterangepicker", "td.available", r.proxy(this.hoverDate, this)).on("mouseleave.daterangepicker", "td.available", r.proxy(this.updateFormInputs, this)).on("change.daterangepicker", "select.yearselect", r.proxy(this.updateMonthYear, this)).on("change.daterangepicker", "select.monthselect", r.proxy(this.updateMonthYear, this)).on("change.daterangepicker", "select.hourselect,select.minuteselect,select.ampmselect", r.proxy(this.updateTime, this)); this.container.find(".ranges").on("click.daterangepicker", "button.applyBtn", r.proxy(this.clickApply, this)).on("click.daterangepicker", "button.cancelBtn", r.proxy(this.clickCancel, this)).on("click.daterangepicker", ".daterangepicker_start_input,.daterangepicker_end_input", r.proxy(this.showCalendars, this)).on("change.daterangepicker", ".daterangepicker_start_input,.daterangepicker_end_input", r.proxy(this.inputsChanged, this)).on("keydown.daterangepicker", ".daterangepicker_start_input,.daterangepicker_end_input", r.proxy(this.inputsKeydown, this)).on("click.daterangepicker", "li", r.proxy(this.clickRange, this)).on("mouseenter.daterangepicker", "li", r.proxy(this.enterRange, this)).on("mouseleave.daterangepicker", "li", r.proxy(this.updateFormInputs, this)); if (this.element.is("input")) this.element.on({ "click.daterangepicker": r.proxy(this.show, this), "focus.daterangepicker": r.proxy(this.show, this), "keyup.daterangepicker": r.proxy(this.updateFromControl, this) }); else this.element.on("click.daterangepicker", r.proxy(this.toggle, this)) }; u.prototype = { constructor: u, setOptions: function (n, t) { var a, u, f, e, h, c, o, l, s; if (this.startDate = i().startOf("day"), this.endDate = i().endOf("day"), this.minDate = !1, this.maxDate = !1, this.dateLimit = !1, this.showDropdowns = !1, this.showWeekNumbers = !1, this.timePicker = !1, this.timePickerIncrement = 30, this.timePicker12Hour = !0, this.singleDatePicker = !1, this.ranges = {}, this.opens = "right", this.element.hasClass("pull-right") && (this.opens = "left"), this.buttonClasses = ["btn", "btn-small btn-sm"], this.applyClass = "btn-success", this.cancelClass = "btn-default", this.format = "MM/DD/YYYY", this.separator = " - ", this.locale = { applyLabel: "Apply", cancelLabel: "Cancel", fromLabel: "From", toLabel: "To", weekLabel: "W", customRangeLabel: "Custom Range", daysOfWeek: i.weekdaysMin(), monthNames: i.monthsShort(), firstDay: i.localeData()._week.dow }, this.cb = function () { }, typeof n.format == "string" && (this.format = n.format), typeof n.separator == "string" && (this.separator = n.separator), typeof n.startDate == "string" && (this.startDate = i(n.startDate, this.format)), typeof n.endDate == "string" && (this.endDate = i(n.endDate, this.format)), typeof n.minDate == "string" && (this.minDate = i(n.minDate, this.format)), typeof n.maxDate == "string" && (this.maxDate = i(n.maxDate, this.format)), typeof n.startDate == "object" && (this.startDate = i(n.startDate)), typeof n.endDate == "object" && (this.endDate = i(n.endDate)), typeof n.minDate == "object" && (this.minDate = i(n.minDate)), typeof n.maxDate == "object" && (this.maxDate = i(n.maxDate)), typeof n.applyClass == "string" && (this.applyClass = n.applyClass), typeof n.cancelClass == "string" && (this.cancelClass = n.cancelClass), typeof n.dateLimit == "object" && (this.dateLimit = n.dateLimit), typeof n.locale == "object" && (typeof n.locale.daysOfWeek == "object" && (this.locale.daysOfWeek = n.locale.daysOfWeek.slice()), typeof n.locale.monthNames == "object" && (this.locale.monthNames = n.locale.monthNames.slice()), typeof n.locale.firstDay == "number" && (this.locale.firstDay = n.locale.firstDay), typeof n.locale.applyLabel == "string" && (this.locale.applyLabel = n.locale.applyLabel), typeof n.locale.cancelLabel == "string" && (this.locale.cancelLabel = n.locale.cancelLabel), typeof n.locale.fromLabel == "string" && (this.locale.fromLabel = n.locale.fromLabel), typeof n.locale.toLabel == "string" && (this.locale.toLabel = n.locale.toLabel), typeof n.locale.weekLabel == "string" && (this.locale.weekLabel = n.locale.weekLabel), typeof n.locale.customRangeLabel == "string" && (this.locale.customRangeLabel = n.locale.customRangeLabel)), typeof n.opens == "string" && (this.opens = n.opens), typeof n.showWeekNumbers == "boolean" && (this.showWeekNumbers = n.showWeekNumbers), typeof n.buttonClasses == "string" && (this.buttonClasses = [n.buttonClasses]), typeof n.buttonClasses == "object" && (this.buttonClasses = n.buttonClasses), typeof n.showDropdowns == "boolean" && (this.showDropdowns = n.showDropdowns), typeof n.singleDatePicker == "boolean" && (this.singleDatePicker = n.singleDatePicker, this.singleDatePicker && (this.endDate = this.startDate.clone())), typeof n.timePicker == "boolean" && (this.timePicker = n.timePicker), typeof n.timePickerIncrement == "number" && (this.timePickerIncrement = n.timePickerIncrement), typeof n.timePicker12Hour == "boolean" && (this.timePicker12Hour = n.timePicker12Hour), this.locale.firstDay != 0) for (a = this.locale.firstDay; a > 0;) this.locale.daysOfWeek.push(this.locale.daysOfWeek.shift()), a--; if (typeof n.startDate == "undefined" && typeof n.endDate == "undefined" && r(this.element).is("input[type=text]") && (h = r(this.element).val(), c = h.split(this.separator), u = f = null, c.length == 2 ? (u = i(c[0], this.format), f = i(c[1], this.format)) : this.singleDatePicker && (u = i(h, this.format), f = i(h, this.format)), u !== null && f !== null && (this.startDate = u, this.endDate = f)), typeof n.ranges == "object") { for (e in n.ranges) (u = i(n.ranges[e][0]), f = i(n.ranges[e][1]), this.minDate && u.isBefore(this.minDate) && (u = i(this.minDate)), this.maxDate && f.isAfter(this.maxDate) && (f = i(this.maxDate)), this.minDate && f.isBefore(this.minDate) || this.maxDate && u.isAfter(this.maxDate)) || (this.ranges[e] = [u, f]); o = "<ul>"; for (e in this.ranges) o += "<li>" + e + "<\/li>"; o += "<li>" + this.locale.customRangeLabel + "<\/li>"; o += "<\/ul>"; this.container.find(".ranges ul").remove(); this.container.find(".ranges").prepend(o) } typeof t == "function" && (this.cb = t); this.timePicker || (this.startDate = this.startDate.startOf("day"), this.endDate = this.endDate.endOf("day")); this.singleDatePicker ? (this.opens = "right", this.container.addClass("single"), this.container.find(".calendar.right").show(), this.container.find(".calendar.left").hide(), this.timePicker ? this.container.find(".ranges .daterangepicker_start_input, .ranges .daterangepicker_end_input").hide() : this.container.find(".ranges").hide(), this.container.find(".calendar.right").hasClass("single") || this.container.find(".calendar.right").addClass("single")) : (this.container.removeClass("single"), this.container.find(".calendar.right").removeClass("single"), this.container.find(".ranges").show()); this.oldStartDate = this.startDate.clone(); this.oldEndDate = this.endDate.clone(); this.oldChosenLabel = this.chosenLabel; this.leftCalendar = { month: i([this.startDate.year(), this.startDate.month(), 1, this.startDate.hour(), this.startDate.minute()]), calendar: [] }; this.rightCalendar = { month: i([this.endDate.year(), this.endDate.month(), 1, this.endDate.hour(), this.endDate.minute()]), calendar: [] }; (this.opens == "right" || this.opens == "center") && (l = this.container.find(".calendar.left"), s = this.container.find(".calendar.right"), s.hasClass("single") && (s.removeClass("single"), l.addClass("single")), l.removeClass("left").addClass("right"), s.removeClass("right").addClass("left"), this.singleDatePicker && (l.show(), s.hide())); typeof n.ranges != "undefined" || this.singleDatePicker || this.container.addClass("show-calendar"); this.container.addClass("opens" + this.opens); this.updateView(); this.updateCalendars() }, setStartDate: function (n) { typeof n == "string" && (this.startDate = i(n, this.format)); typeof n == "object" && (this.startDate = i(n)); this.timePicker || (this.startDate = this.startDate.startOf("day")); this.oldStartDate = this.startDate.clone(); this.updateView(); this.updateCalendars(); this.updateInputText() }, setEndDate: function (n) { typeof n == "string" && (this.endDate = i(n, this.format)); typeof n == "object" && (this.endDate = i(n)); this.timePicker || (this.endDate = this.endDate.endOf("day")); this.oldEndDate = this.endDate.clone(); this.updateView(); this.updateCalendars(); this.updateInputText() }, updateView: function () { this.leftCalendar.month.month(this.startDate.month()).year(this.startDate.year()).hour(this.startDate.hour()).minute(this.startDate.minute()); this.rightCalendar.month.month(this.endDate.month()).year(this.endDate.year()).hour(this.endDate.hour()).minute(this.endDate.minute()); this.updateFormInputs() }, updateFormInputs: function () { this.container.find("input[name=daterangepicker_start]").val(this.startDate.format(this.format)); this.container.find("input[name=daterangepicker_end]").val(this.endDate.format(this.format)); this.startDate.isSame(this.endDate) || this.startDate.isBefore(this.endDate) ? this.container.find("button.applyBtn").removeAttr("disabled") : this.container.find("button.applyBtn").attr("disabled", "disabled") }, updateFromControl: function () { if (this.element.is("input") && this.element.val().length) { var r = this.element.val().split(this.separator), n = null, t = null; (r.length === 2 && (n = i(r[0], this.format), t = i(r[1], this.format)), (this.singleDatePicker || n === null || t === null) && (n = i(this.element.val(), this.format), t = n), t.isBefore(n)) || (this.oldStartDate = this.startDate.clone(), this.oldEndDate = this.endDate.clone(), this.startDate = n, this.endDate = t, this.startDate.isSame(this.oldStartDate) && this.endDate.isSame(this.oldEndDate) || this.notify(), this.updateCalendars()) } }, notify: function () { this.updateView(); this.cb(this.startDate, this.endDate, this.chosenLabel) }, move: function () { var n = { top: 0, left: 0 }, t = r(window).width(); this.parentEl.is("body") || (n = { top: this.parentEl.offset().top - this.parentEl.scrollTop(), left: this.parentEl.offset().left - this.parentEl.scrollLeft() }, t = this.parentEl[0].clientWidth + this.parentEl.offset().left); this.opens == "left" ? (this.container.css({ top: this.element.offset().top + this.element.outerHeight() - n.top, right: t - this.element.offset().left - this.element.outerWidth(), left: "auto" }), this.container.offset().left < 0 && this.container.css({ right: "auto", left: 9 })) : this.opens == "center" ? (this.container.css({ top: this.element.offset().top + this.element.outerHeight() - n.top, left: this.element.offset().left - n.left + this.element.outerWidth() / 2 - this.container.outerWidth() / 2, right: "auto" }), this.container.offset().left < 0 && this.container.css({ right: "auto", left: 9 })) : (this.container.css({ top: this.element.offset().top + this.element.outerHeight() - n.top, left: this.element.offset().left - n.left, right: "auto" }), this.container.offset().left + this.container.outerWidth() > r(window).width() && this.container.css({ left: "auto", right: 0 })) }, toggle: function () { this.element.hasClass("active") ? this.hide() : this.show() }, show: function () { if (!this.isShowing) { this.element.addClass("active"); this.container.show(); this.move(); this._outsideClickProxy = r.proxy(function (n) { this.outsideClick(n) }, this); r(document).on("mousedown.daterangepicker", this._outsideClickProxy).on("click.daterangepicker", "[data-toggle=dropdown]", this._outsideClickProxy).on("focusin.daterangepicker", this._outsideClickProxy); this.isShowing = !0; this.element.trigger("show.daterangepicker", this) } }, outsideClick: function (n) { var t = r(n.target); t.closest(this.element).length || t.closest(this.container).length || t.closest(".calendar-date").length || this.hide() }, hide: function () { this.isShowing && (r(document).off("mousedown.daterangepicker").off("click.daterangepicker", "[data-toggle=dropdown]").off("focusin.daterangepicker"), this.element.removeClass("active"), this.container.hide(), this.startDate.isSame(this.oldStartDate) && this.endDate.isSame(this.oldEndDate) || this.notify(), this.oldStartDate = this.startDate.clone(), this.oldEndDate = this.endDate.clone(), this.isShowing = !1, this.element.trigger("hide.daterangepicker", this)) }, enterRange: function (n) { var i = n.target.innerHTML, t; i == this.locale.customRangeLabel ? this.updateView() : (t = this.ranges[i], this.container.find("input[name=daterangepicker_start]").val(t[0].format(this.format)), this.container.find("input[name=daterangepicker_end]").val(t[1].format(this.format))) }, showCalendars: function () { this.container.addClass("show-calendar"); this.move(); this.element.trigger("showCalendar.daterangepicker", this) }, hideCalendars: function () { this.container.removeClass("show-calendar"); this.element.trigger("hideCalendar.daterangepicker", this) }, inputsChanged: function (n) { var e = r(n.target), t = i(e.val(), this.format), u, f; t.isValid() && (e.attr("name") === "daterangepicker_start" ? (u = t, f = this.endDate) : (u = this.startDate, f = t), this.setCustomDates(u, f)) }, inputsKeydown: function (n) { n.keyCode === 13 && (this.inputsChanged(n), this.notify()) }, updateInputText: function () { this.element.is("input") && !this.singleDatePicker ? this.element.val(this.startDate.format(this.format) + this.separator + this.endDate.format(this.format)) : this.element.is("input") && this.element.val(this.endDate.format(this.format)) }, clickRange: function (n) { var t = n.target.innerHTML, i; this.chosenLabel = t; t == this.locale.customRangeLabel ? (this.showCalendars(), r(".daterangepicker .calendar").is(":visible") ? r(".daterangepicker .calendar").hide() : r(".daterangepicker .calendar").show()) : (i = this.ranges[t], this.startDate = i[0], this.endDate = i[1], this.timePicker || (this.startDate.startOf("day"), this.endDate.endOf("day")), this.leftCalendar.month.month(this.startDate.month()).year(this.startDate.year()).hour(this.startDate.hour()).minute(this.startDate.minute()), this.rightCalendar.month.month(this.endDate.month()).year(this.endDate.year()).hour(this.endDate.hour()).minute(this.endDate.minute()), this.updateCalendars(), this.updateInputText(), this.hideCalendars(), this.hide(), this.element.trigger("apply.daterangepicker", this)) }, clickPrev: function (n) { var t = r(n.target).parents(".calendar"); t.hasClass("left") ? this.leftCalendar.month.subtract(1, "month") : this.rightCalendar.month.subtract(1, "month"); this.updateCalendars() }, clickNext: function (n) { var t = r(n.target).parents(".calendar"); t.hasClass("left") ? this.leftCalendar.month.add(1, "month") : this.rightCalendar.month.add(1, "month"); this.updateCalendars() }, hoverDate: function (n) { var t = r(n.target).attr("data-title"), i = t.substr(1, 1), u = t.substr(3, 1), f = r(n.target).parents(".calendar"); f.hasClass("left") ? this.container.find("input[name=daterangepicker_start]").val(this.leftCalendar.calendar[i][u].format(this.format)) : this.container.find("input[name=daterangepicker_end]").val(this.rightCalendar.calendar[i][u].format(this.format)) }, setCustomDates: function (n, t) { if (this.chosenLabel = this.locale.customRangeLabel, n.isAfter(t)) { var r = this.endDate.diff(this.startDate); t = i(n).add(r, "ms") } this.startDate = n; this.endDate = t; this.updateView(); this.updateCalendars() }, clickDate: function (n) { var s = r(n.target).attr("data-title"), h = s.substr(1, 1), c = s.substr(3, 1), f = r(n.target).parents(".calendar"), u, t, e, o; f.hasClass("left") ? (u = this.leftCalendar.calendar[h][c], t = this.endDate, typeof this.dateLimit == "object" && (e = i(u).add(this.dateLimit).startOf("day"), t.isAfter(e) && (t = e))) : (u = this.startDate, t = this.rightCalendar.calendar[h][c], typeof this.dateLimit == "object" && (o = i(t).subtract(this.dateLimit).startOf("day"), u.isBefore(o) && (u = o))); this.singleDatePicker && f.hasClass("left") ? t = u.clone() : this.singleDatePicker && f.hasClass("right") && (u = t.clone()); f.find("td").removeClass("active"); r(n.target).addClass("active"); this.setCustomDates(u, t); this.timePicker || t.endOf("day"); this.singleDatePicker && !this.timePicker && this.clickApply() }, clickApply: function () { this.updateInputText(); this.hide(); this.element.trigger("apply.daterangepicker", this) }, clickCancel: function () { this.startDate = this.oldStartDate; this.endDate = this.oldEndDate; this.chosenLabel = this.oldChosenLabel; this.updateView(); this.updateCalendars(); this.hide(); this.element.trigger("cancel.daterangepicker", this) }, updateMonthYear: function (n) { var u = r(n.target).closest(".calendar").hasClass("left"), t = u ? "left" : "right", i = this.container.find(".calendar." + t), f = parseInt(i.find(".monthselect").val(), 10), e = i.find(".yearselect").val(); this[t + "Calendar"].month.month(f).year(e); this.updateCalendars() }, updateTime: function (n) { var f = r(n.target).closest(".calendar"), s = f.hasClass("left"), t = parseInt(f.find(".hourselect").val(), 10), e = parseInt(f.find(".minuteselect").val(), 10), o, i, u; this.timePicker12Hour && (o = f.find(".ampmselect").val(), o === "PM" && t < 12 && (t += 12), o === "AM" && t === 12 && (t = 0)); s ? (i = this.startDate.clone(), i.hour(t), i.minute(e), this.startDate = i, this.leftCalendar.month.hour(t).minute(e), this.singleDatePicker && (this.endDate = i.clone())) : (u = this.endDate.clone(), u.hour(t), u.minute(e), this.endDate = u, this.singleDatePicker && (this.startDate = u.clone()), this.rightCalendar.month.hour(t).minute(e)); this.updateView(); this.updateCalendars() }, updateCalendars: function () { var t, i, n; this.leftCalendar.calendar = this.buildCalendar(this.leftCalendar.month.month(), this.leftCalendar.month.year(), this.leftCalendar.month.hour(), this.leftCalendar.month.minute(), "left"); this.rightCalendar.calendar = this.buildCalendar(this.rightCalendar.month.month(), this.rightCalendar.month.year(), this.rightCalendar.month.hour(), this.rightCalendar.month.minute(), "right"); this.container.find(".calendar.left").empty().html(this.renderCalendar(this.leftCalendar.calendar, this.startDate, this.minDate, this.maxDate, "left")); this.container.find(".calendar.right").empty().html(this.renderCalendar(this.rightCalendar.calendar, this.endDate, this.singleDatePicker ? this.minDate : this.startDate, this.maxDate, "right")); this.container.find(".ranges li").removeClass("active"); t = !0; i = 0; for (n in this.ranges) this.timePicker ? this.startDate.isSame(this.ranges[n][0]) && this.endDate.isSame(this.ranges[n][1]) && (t = !1, this.chosenLabel = this.container.find(".ranges li:eq(" + i + ")").addClass("active").html()) : this.startDate.format("YYYY-MM-DD") == this.ranges[n][0].format("YYYY-MM-DD") && this.endDate.format("YYYY-MM-DD") == this.ranges[n][1].format("YYYY-MM-DD") && (t = !1, this.chosenLabel = this.container.find(".ranges li:eq(" + i + ")").addClass("active").html()), i++; t && (this.chosenLabel = this.container.find(".ranges li:last").addClass("active").html(), this.showCalendars()) }, buildCalendar: function (n, t, r, u, f) { var b = i([t, n]).daysInMonth(), a = i([t, n, 1]), k = i([t, n, b]), y = i(a).subtract(1, "month").month(), p = i(a).subtract(1, "month").year(), v = i([p, y]).daysInMonth(), w = a.day(), h, e = [], c, l, o, s; for (e.firstDay = a, e.lastDay = k, h = 0; h < 6; h++) e[h] = []; for (c = v - w + this.locale.firstDay + 1, c > v && (c -= 7), w == this.locale.firstDay && (c = v - 6), l = i([p, y, c, 12, u]), h = 0, o = 0, s = 0; h < 42; h++, o++, l = i(l).add(24, "hour")) h > 0 && o % 7 == 0 && (o = 0, s++), e[s][o] = l.clone().hour(r), l.hour(12), this.minDate && e[s][o].format("YYYY-MM-DD") == this.minDate.format("YYYY-MM-DD") && e[s][o].isBefore(this.minDate) && f == "left" && (e[s][o] = this.minDate.clone()), this.maxDate && e[s][o].format("YYYY-MM-DD") == this.maxDate.format("YYYY-MM-DD") && e[s][o].isAfter(this.maxDate) && f == "right" && (e[s][o] = this.maxDate.clone()); return e }, renderDropdowns: function (n, t, i) { for (var e, u, c = n.month(), f = n.year(), s = i && i.year() || f + 5, h = t && t.year() || f - 50, o = '<select class="monthselect">', l = f == h, a = f == s, r = 0; r < 12; r++) (!l || r >= t.month()) && (!a || r <= i.month()) && (o += "<option value='" + r + "'" + (r === c ? " selected='selected'" : "") + ">" + this.locale.monthNames[r] + "<\/option>"); for (o += "<\/select>", e = '<select class="yearselect">', u = h; u <= s; u++) e += '<option value="' + u + '"' + (u === f ? ' selected="selected"' : "") + ">" + u + "<\/option>"; return e += "<\/select>", o + e }, renderCalendar: function (n, t, i, u, f) { var e = '<div class="calendar-date">', d, s, h, c, g, o, l, a, p, w, v, b, k; for (e += '<table class="table-condensed">', e += "<thead>", e += "<tr>", this.showWeekNumbers && (e += "<th><\/th>"), e += !i || i.isBefore(n.firstDay) ? '<th class="prev available"><i class="fa fa-arrow-left icon-arrow-left glyphicon glyphicon-arrow-left"><\/i><\/th>' : "<th><\/th>", d = this.locale.monthNames[n[1][1].month()] + n[1][1].format(" YYYY"), this.showDropdowns && (d = this.renderDropdowns(n[1][1], i, u)), e += '<th colspan="5" class="month">' + d + "<\/th>", e += !u || u.isAfter(n.lastDay) ? '<th class="next available"><i class="fa fa-arrow-right icon-arrow-right glyphicon glyphicon-arrow-right"><\/i><\/th>' : "<th><\/th>", e += "<\/tr>", e += "<tr>", this.showWeekNumbers && (e += '<th class="week">' + this.locale.weekLabel + "<\/th>"), r.each(this.locale.daysOfWeek, function (n, t) { e += "<th>" + t + "<\/th>" }), e += "<\/tr>", e += "<\/thead>", e += "<tbody>", s = 0; s < 6; s++) { for (e += "<tr>", this.showWeekNumbers && (e += '<td class="week">' + n[s][0].week() + "<\/td>"), h = 0; h < 7; h++) c = "available ", c += n[s][h].month() == n[1][1].month() ? "" : "off", i && n[s][h].isBefore(i, "day") || u && n[s][h].isAfter(u, "day") ? c = " off disabled " : n[s][h].format("YYYY-MM-DD") == t.format("YYYY-MM-DD") ? (c += " active ", n[s][h].format("YYYY-MM-DD") == this.startDate.format("YYYY-MM-DD") && (c += " start-date "), n[s][h].format("YYYY-MM-DD") == this.endDate.format("YYYY-MM-DD") && (c += " end-date ")) : n[s][h] >= this.startDate && n[s][h] <= this.endDate && (c += " in-range ", n[s][h].isSame(this.startDate) && (c += " start-date "), n[s][h].isSame(this.endDate) && (c += " end-date ")), g = "r" + s + "c" + h, e += '<td class="' + c.replace(/\s+/g, " ").replace(/^\s?(.*?)\s?$/, "$1") + '" data-title="' + g + '">' + n[s][h].date() + "<\/td>"; e += "<\/tr>" } if (e += "<\/tbody>", e += "<\/table>", e += "<\/div>", this.timePicker) { e += '<div class="calendar-time">'; e += '<select class="hourselect">'; l = 0; a = 23; i && (f == "left" || this.singleDatePicker) && t.format("YYYY-MM-DD") == i.format("YYYY-MM-DD") && (l = i.hour(), t.hour() < l && t.hour(l), this.timePicker12Hour && l >= 12 && t.hour() >= 12 && (l -= 12), this.timePicker12Hour && l == 12 && (l = 1)); u && (f == "right" || this.singleDatePicker) && t.format("YYYY-MM-DD") == u.format("YYYY-MM-DD") && (a = u.hour(), t.hour() > a && t.hour(a), this.timePicker12Hour && a >= 12 && t.hour() >= 12 && (a -= 12)); var nt = 0, tt = 23, y = t.hour(); for (this.timePicker12Hour && (nt = 1, tt = 12, y >= 12 && (y -= 12), y === 0 && (y = 12)), o = nt; o <= tt; o++) e += o == y ? '<option value="' + o + '" selected="selected">' + o + "<\/option>" : o < l || o > a ? '<option value="' + o + '" disabled="disabled" class="disabled">' + o + "<\/option>" : '<option value="' + o + '">' + o + "<\/option>"; for (e += "<\/select> : ", e += '<select class="minuteselect">', p = 0, w = 59, i && (f == "left" || this.singleDatePicker) && t.format("YYYY-MM-DD h A") == i.format("YYYY-MM-DD h A") && (p = i.minute(), t.minute() < p && t.minute(p)), u && (f == "right" || this.singleDatePicker) && t.format("YYYY-MM-DD h A") == u.format("YYYY-MM-DD h A") && (w = u.minute(), t.minute() > w && t.minute(w)), o = 0; o < 60; o += this.timePickerIncrement) v = o, v < 10 && (v = "0" + v), e += o == t.minute() ? '<option value="' + o + '" selected="selected">' + v + "<\/option>" : o < p || o > w ? '<option value="' + o + '" disabled="disabled" class="disabled">' + v + "<\/option>" : '<option value="' + o + '">' + v + "<\/option>"; e += "<\/select> "; this.timePicker12Hour && (e += '<select class="ampmselect">', b = "", k = "", i && (f == "left" || this.singleDatePicker) && t.format("YYYY-MM-DD") == i.format("YYYY-MM-DD") && i.hour() >= 12 && (b = ' disabled="disabled" class="disabled"'), u && (f == "right" || this.singleDatePicker) && t.format("YYYY-MM-DD") == u.format("YYYY-MM-DD") && u.hour() < 12 && (k = ' disabled="disabled" class="disabled"'), e += t.hour() >= 12 ? '<option value="AM"' + b + '>AM<\/option><option value="PM" selected="selected"' + k + ">PM<\/option>" : '<option value="AM" selected="selected"' + b + '>AM<\/option><option value="PM"' + k + ">PM<\/option>", e += "<\/select>"); e += "<\/div>" } return e }, remove: function () { this.container.remove(); this.element.off(".daterangepicker"); this.element.removeData("daterangepicker") } }; r.fn.daterangepicker = function (n, t) { return this.each(function () { var i = r(this); i.data("daterangepicker") && i.data("daterangepicker").remove(); i.data("daterangepicker", new u(i, n, t)) }), this } });
//# sourceMappingURL=daterangepicker.min.js.map