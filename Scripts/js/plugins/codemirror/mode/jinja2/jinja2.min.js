(function (n) { typeof exports == "object" && typeof module == "object" ? n(require("../../lib/codemirror")) : typeof define == "function" && define.amd ? define(["../../lib/codemirror"], n) : n(CodeMirror) })(function (n) { "use strict"; n.defineMode("jinja2", function () { function f(f, e) { var o = f.peek(); if (e.incomment) return f.skipTo("#}") ? (f.eatWhile(/\#|}/), e.incomment = !1) : f.skipToEnd(), "comment"; if (e.intag) { if (e.operator) { if (e.operator = !1, f.match(n)) return "atom"; if (f.match(i)) return "number" } if (e.sign) { if (e.sign = !1, f.match(n)) return "atom"; if (f.match(i)) return "number" } if (e.instring) return o == e.instring && (e.instring = !1), f.next(), "string"; if (o == "'" || o == '"') return e.instring = o, f.next(), "string"; if (f.match(e.intag + "}") || f.eat("-") && f.match(e.intag + "}")) return e.intag = !1, "tag"; if (f.match(r)) return e.operator = !0, "operator"; if (f.match(u)) e.sign = !0; else if (f.eat(" ") || f.sol()) { if (f.match(t)) return "keyword"; if (f.match(n)) return "atom"; if (f.match(i)) return "number"; f.sol() && f.next() } else f.next(); return "variable" } if (f.eat("{")) { if (o = f.eat("#")) return e.incomment = !0, f.skipTo("#}") ? (f.eatWhile(/\#|}/), e.incomment = !1) : f.skipToEnd(), "comment"; if (o = f.eat(/\{|%/)) return e.intag = o, o == "{" && (e.intag = "}"), f.eat("-"), "tag" } f.next() } var t = ["and", "as", "block", "endblock", "by", "cycle", "debug", "else", "elif", "extends", "filter", "endfilter", "firstof", "for", "endfor", "if", "endif", "ifchanged", "endifchanged", "ifequal", "endifequal", "ifnotequal", "endifnotequal", "in", "include", "load", "not", "now", "or", "parsed", "regroup", "reversed", "spaceless", "endspaceless", "ssi", "templatetag", "openblock", "closeblock", "openvariable", "closevariable", "openbrace", "closebrace", "opencomment", "closecomment", "widthratio", "url", "with", "endwith", "get_current_language", "trans", "endtrans", "noop", "blocktrans", "endblocktrans", "get_available_languages", "get_current_language_bidi", "plural"], r = /^[+\-*&%=<>!?|~^]/, u = /^[:\[\(\{]/, n = ["true", "false"], i = /^(\d[+\-\*\/])?\d+(\.\d+)?/; return t = new RegExp("((" + t.join(")|(") + "))\\b"), n = new RegExp("((" + n.join(")|(") + "))\\b"), { startState: function () { return { tokenize: f } }, token: function (n, t) { return t.tokenize(n, t) } } }) });
//# sourceMappingURL=jinja2.min.js.map