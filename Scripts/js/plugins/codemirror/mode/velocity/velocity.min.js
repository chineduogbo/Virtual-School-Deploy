(function (n) { typeof exports == "object" && typeof module == "object" ? n(require("../../lib/codemirror")) : typeof define == "function" && define.amd ? define(["../../lib/codemirror"], n) : n(CodeMirror) })(function (n) { "use strict"; n.defineMode("velocity", function () { function r(n) { for (var i = {}, r = n.split(" "), t = 0; t < r.length; ++t) i[r[t]] = !0; return i } function t(n, t, i) { return t.tokenize = i, i(n, t) } function i(i, r) { var a = r.beforeParams, c, l; if (r.beforeParams = !1, c = i.next(), c == "'" && r.inParams) return r.lastTokenWasBuiltin = !1, t(i, r, o(c)); if (c == '"') { if (r.lastTokenWasBuiltin = !1, r.inString) return r.inString = !1, "string"; if (r.inParams) return t(i, r, o(c)) } else return /[\[\]{}\(\),;\.]/.test(c) ? (c == "(" && a ? r.inParams = !0 : c == ")" && (r.inParams = !1, r.lastTokenWasBuiltin = !0), null) : /\d/.test(c) ? (r.lastTokenWasBuiltin = !1, i.eatWhile(/[\w\.]/), "number") : c == "#" && i.eat("*") ? (r.lastTokenWasBuiltin = !1, t(i, r, s)) : c == "#" && i.match(/ *\[ *\[/) ? (r.lastTokenWasBuiltin = !1, t(i, r, h)) : c == "#" && i.eat("#") ? (r.lastTokenWasBuiltin = !1, i.skipToEnd(), "comment") : c == "$" ? (i.eatWhile(/[\w\d\$_\.{}]/), f && f.propertyIsEnumerable(i.current()) ? "keyword" : (r.lastTokenWasBuiltin = !0, r.beforeParams = !0, "builtin")) : e.test(c) ? (r.lastTokenWasBuiltin = !1, i.eatWhile(e), "operator") : (i.eatWhile(/[\w\$_{}@]/), l = i.current(), u && u.propertyIsEnumerable(l)) ? "keyword" : n && n.propertyIsEnumerable(l) || i.current().match(/^#@?[a-z0-9_]+ *$/i) && i.peek() == "(" && !(n && n.propertyIsEnumerable(l.toLowerCase())) ? (r.beforeParams = !0, r.lastTokenWasBuiltin = !1, "keyword") : r.inString ? (r.lastTokenWasBuiltin = !1, "string") : i.pos > l.length && i.string.charAt(i.pos - l.length - 1) == "." && r.lastTokenWasBuiltin ? "builtin" : (r.lastTokenWasBuiltin = !1, null) } function o(n) { return function (t, r) { for (var u = !1, f, e = !1; (f = t.next()) != null;) { if (f == n && !u) { e = !0; break } if (n == '"' && t.peek() == "$" && !u) { r.inString = !0; e = !0; break } u = !u && f == "\\" } return e && (r.tokenize = i), "string" } } function s(n, t) { for (var u = !1, r; r = n.next() ;) { if (r == "#" && u) { t.tokenize = i; break } u = r == "*" } return "comment" } function h(n, t) { for (var u = 0, r; r = n.next() ;) { if (r == "#" && u == 2) { t.tokenize = i; break } r == "]" ? u++ : r != " " && (u = 0) } return "meta" } var u = r("#end #else #break #stop #[[ #]] #{end} #{else} #{break} #{stop}"), n = r("#if #elseif #foreach #set #include #parse #macro #define #evaluate #{if} #{elseif} #{foreach} #{set} #{include} #{parse} #{macro} #{define} #{evaluate}"), f = r("$foreach.count $foreach.hasNext $foreach.first $foreach.last $foreach.topmost $foreach.parent.count $foreach.parent.hasNext $foreach.parent.first $foreach.parent.last $foreach.parent $velocityCount $!bodyContent $bodyContent"), e = /[+\-*&%=<>!?:\/|]/; return { startState: function () { return { tokenize: i, beforeParams: !1, inParams: !1, inString: !1, lastTokenWasBuiltin: !1 } }, token: function (n, t) { return n.eatSpace() ? null : t.tokenize(n, t) }, blockCommentStart: "#*", blockCommentEnd: "*#", lineComment: "##", fold: "velocity" } }); n.defineMIME("text/velocity", "velocity") });
//# sourceMappingURL=velocity.min.js.map