(function () { function n(n) { test.mode(n, i, Array.prototype.slice.call(arguments, 1)) } function t(n) { test.mode(n, r, Array.prototype.slice.call(arguments, 1)) } var i = CodeMirror.getMode({ tabSize: 4 }, "markdown"), r = CodeMirror.getMode({ tabSize: 4 }, { name: "markdown", highlightFormatting: !0 }); t("formatting_emAsterisk", "[em&formatting&formatting-em *][em foo][em&formatting&formatting-em *]"); t("formatting_emUnderscore", "[em&formatting&formatting-em _][em foo][em&formatting&formatting-em _]"); t("formatting_strongAsterisk", "[strong&formatting&formatting-strong **][strong foo][strong&formatting&formatting-strong **]"); t("formatting_strongUnderscore", "[strong&formatting&formatting-strong __][strong foo][strong&formatting&formatting-strong __]"); t("formatting_codeBackticks", "[comment&formatting&formatting-code `][comment foo][comment&formatting&formatting-code `]"); t("formatting_doubleBackticks", "[comment&formatting&formatting-code ``][comment foo ` bar][comment&formatting&formatting-code ``]"); t("formatting_atxHeader", "[header&header-1&formatting&formatting-header&formatting-header-1 #][header&header-1  foo # bar ][header&header-1&formatting&formatting-header&formatting-header-1 #]"); t("formatting_setextHeader", "foo", "[header&header-1&formatting&formatting-header&formatting-header-1 =]"); t("formatting_blockquote", "[quote&quote-1&formatting&formatting-quote&formatting-quote-1 > ][quote&quote-1 foo]"); t("formatting_list", "[variable-2&formatting&formatting-list&formatting-list-ul - ][variable-2 foo]"); t("formatting_list", "[variable-2&formatting&formatting-list&formatting-list-ol 1. ][variable-2 foo]"); t("formatting_link", "[link&formatting&formatting-link [][link foo][link&formatting&formatting-link ]]][string&formatting&formatting-link-string (][string http://example.com/][string&formatting&formatting-link-string )]"); t("formatting_linkReference", "[link&formatting&formatting-link [][link foo][link&formatting&formatting-link ]]][string&formatting&formatting-link-string [][string bar][string&formatting&formatting-link-string ]]]", "[link&formatting&formatting-link [][link bar][link&formatting&formatting-link ]]:] [string http://example.com/]"); t("formatting_linkWeb", "[link&formatting&formatting-link <][link http://example.com/][link&formatting&formatting-link >]"); t("formatting_linkEmail", "[link&formatting&formatting-link <][link user@example.com][link&formatting&formatting-link >]"); t("formatting_escape", "[formatting&formatting-escape \\]*"); n("plainText", "foo"); n("trailingSpace1", "foo "); n("trailingSpace2", "foo[trailing-space-a  ][trailing-space-new-line  ]"); n("trailingSpace3", "foo[trailing-space-a  ][trailing-space-b  ][trailing-space-new-line  ]"); n("trailingSpace4", "foo[trailing-space-a  ][trailing-space-b  ][trailing-space-a  ][trailing-space-new-line  ]"); n("codeBlocksUsing4Spaces", "    [comment foo]"); n("codeBlocksUsing4SpacesIndentation", "    [comment bar]", "        [comment hello]", "            [comment world]", "    [comment foo]", "bar"); n("codeBlocksUsing4SpacesIndentation", " foo", "    [comment bar]", "        [comment hello]", "    [comment world]"); n("codeBlocksWithTrailingIndentedLine", "    [comment foo]", "        [comment bar]", "    [comment baz]", "    ", "hello"); n("codeBlocksUsing1Tab", "\t[comment foo]"); n("inlineCodeUsingBackticks", "foo [comment `bar`]"); n("blockCodeSingleBacktick", "[comment `]", "foo", "[comment `]"); n("unclosedBackticks", "foo [comment `bar]"); n("doubleBackticks", "[comment ``foo ` bar``]"); n("consecutiveBackticks", "[comment `foo```bar`]"); n("consecutiveBackticks", "[comment `foo```bar`] hello [comment `world`]"); n("unclosedBackticks", "[comment ``foo ``` bar` hello]"); n("closedBackticks", "[comment ``foo ``` bar` hello``] world"); n("atxH1", "[header&header-1 # foo]"); n("atxH2", "[header&header-2 ## foo]"); n("atxH3", "[header&header-3 ### foo]"); n("atxH4", "[header&header-4 #### foo]"); n("atxH5", "[header&header-5 ##### foo]"); n("atxH6", "[header&header-6 ###### foo]"); n("atxH6NotH7", "[header&header-6 ####### foo]"); n("atxH1inline", "[header&header-1 # foo ][header&header-1&em *bar*]"); n("setextH1", "foo", "[header&header-1 =]"); n("setextH1", "foo", "[header&header-1 ===]"); n("setextH2", "foo", "[header&header-2 -]"); n("setextH2", "foo", "[header&header-2 ---]"); n("blockquoteSpace", "[quote&quote-1 > foo]"); n("blockquoteNoSpace", "[quote&quote-1 >foo]"); n("blockquoteNoBlankLine", "foo", "[quote&quote-1 > bar]"); n("blockquoteSpace", "[quote&quote-1 > foo]", "[quote&quote-1 >][quote&quote-2 > foo]", "[quote&quote-1 >][quote&quote-2 >][quote&quote-3 > foo]"); n("blockquoteThenParagraph", "[quote&quote-1 >foo]", "", "bar"); n("multiBlockquoteLazy", "[quote&quote-1 >foo]", "[quote&quote-1 bar]"); n("multiBlockquoteLazyThenParagraph", "[quote&quote-1 >foo]", "[quote&quote-1 bar]", "", "hello"); n("multiBlockquote", "[quote&quote-1 >foo]", "[quote&quote-1 >bar]"); n("multiBlockquoteThenParagraph", "[quote&quote-1 >foo]", "[quote&quote-1 >bar]", "", "hello"); n("listAsterisk", "foo", "bar", "", "[variable-2 * foo]", "[variable-2 * bar]"); n("listPlus", "foo", "bar", "", "[variable-2 + foo]", "[variable-2 + bar]"); n("listDash", "foo", "bar", "", "[variable-2 - foo]", "[variable-2 - bar]"); n("listNumber", "foo", "bar", "", "[variable-2 1. foo]", "[variable-2 2. bar]"); n("listBogus", "foo", "1. bar", "2. hello"); n("listAfterHeader", "[header&header-1 # foo]", "[variable-2 - bar]"); n("listAsteriskFormatting", "[variable-2 * ][variable-2&em *foo*][variable-2  bar]", "[variable-2 * ][variable-2&strong **foo**][variable-2  bar]", "[variable-2 * ][variable-2&strong **][variable-2&em&strong *foo**][variable-2&em *][variable-2  bar]", "[variable-2 * ][variable-2&comment `foo`][variable-2  bar]"); n("listPlusFormatting", "[variable-2 + ][variable-2&em *foo*][variable-2  bar]", "[variable-2 + ][variable-2&strong **foo**][variable-2  bar]", "[variable-2 + ][variable-2&strong **][variable-2&em&strong *foo**][variable-2&em *][variable-2  bar]", "[variable-2 + ][variable-2&comment `foo`][variable-2  bar]"); n("listDashFormatting", "[variable-2 - ][variable-2&em *foo*][variable-2  bar]", "[variable-2 - ][variable-2&strong **foo**][variable-2  bar]", "[variable-2 - ][variable-2&strong **][variable-2&em&strong *foo**][variable-2&em *][variable-2  bar]", "[variable-2 - ][variable-2&comment `foo`][variable-2  bar]"); n("listNumberFormatting", "[variable-2 1. ][variable-2&em *foo*][variable-2  bar]", "[variable-2 2. ][variable-2&strong **foo**][variable-2  bar]", "[variable-2 3. ][variable-2&strong **][variable-2&em&strong *foo**][variable-2&em *][variable-2  bar]", "[variable-2 4. ][variable-2&comment `foo`][variable-2  bar]"); n("listParagraph", "[variable-2 * foo]", "", "[variable-2 * bar]"); n("listMultiParagraph", "[variable-2 * foo]", "", "[variable-2 * bar]", "", "    [variable-2 hello]"); n("listMultiParagraphExtra", "[variable-2 * foo]", "", "[variable-2 * bar]", "", "", "    [variable-2 hello]"); n("listMultiParagraphExtraSpace", "[variable-2 * foo]", "", "[variable-2 * bar]", "", "     [variable-2 hello]", "", "    [variable-2 world]"); n("listTab", "[variable-2 * foo]", "", "[variable-2 * bar]", "", "\t[variable-2 hello]"); n("listNoIndent", "[variable-2 * foo]", "", "[variable-2 * bar]", "", "hello"); n("blockquote", "[variable-2 * foo]", "", "[variable-2 * bar]", "", "    [variable-2&quote&quote-1 > hello]"); n("blockquoteCode", "[variable-2 * foo]", "", "[variable-2 * bar]", "", "        [comment > hello]", "", "    [variable-2 world]"); n("blockquoteCodeText", "[variable-2 * foo]", "", "    [variable-2 bar]", "", "        [comment hello]", "", "    [variable-2 world]"); n("listAsteriskNested", "[variable-2 * foo]", "", "    [variable-3 * bar]"); n("listPlusNested", "[variable-2 + foo]", "", "    [variable-3 + bar]"); n("listDashNested", "[variable-2 - foo]", "", "    [variable-3 - bar]"); n("listNumberNested", "[variable-2 1. foo]", "", "    [variable-3 2. bar]"); n("listMixed", "[variable-2 * foo]", "", "    [variable-3 + bar]", "", "        [keyword - hello]", "", "            [variable-2 1. world]"); n("listBlockquote", "[variable-2 * foo]", "", "    [variable-3 + bar]", "", "        [quote&quote-1&variable-3 > hello]"); n("listCode", "[variable-2 * foo]", "", "    [variable-3 + bar]", "", "            [comment hello]"); n("listCodeIndentation", "[variable-2 * foo]", "", "        [comment bar]", "            [comment hello]", "                [comment world]", "        [comment foo]", "    [variable-2 bar]"); n("listNested", "[variable-2 * foo]", "", "    [variable-3 * bar]", "", "       [variable-2 hello]"); n("listNested", "[variable-2 * foo]", "", "    [variable-3 * bar]", "", "      [variable-3 * foo]"); n("listCodeText", "[variable-2 * foo]", "", "        [comment bar]", "", "hello"); n("hrSpace", "[hr * * *]"); n("hr", "[hr ***]"); n("hrLong", "[hr *****]"); n("hrSpaceDash", "[hr - - -]"); n("hrDashLong", "[hr ---------------------------------------]"); n("linkTitle", '[link [[foo]]][string (http://example.com/ "bar")] hello'); n("linkNoTitle", "[link [[foo]]][string (http://example.com/)] bar"); n("linkImage", "[link [[][tag ![[foo]]][string (http://example.com/)][link ]]][string (http://example.com/)] bar"); n("linkEm", "[link [[][link&em *foo*][link ]]][string (http://example.com/)] bar"); n("linkStrong", "[link [[][link&strong **foo**][link ]]][string (http://example.com/)] bar"); n("linkEmStrong", "[link [[][link&strong **][link&em&strong *foo**][link&em *][link ]]][string (http://example.com/)] bar"); n("imageTitle", '[tag ![[foo]]][string (http://example.com/ "bar")] hello'); n("imageNoTitle", "[tag ![[foo]]][string (http://example.com/)] bar"); n("imageAsterisks", "[tag ![[*foo*]]][string (http://example.com/)] bar"); n("notALink", "[[foo]] (bar)"); n("linkReference", "[link [[foo]]][string [[bar]]] hello"); n("linkReferenceEm", "[link [[][link&em *foo*][link ]]][string [[bar]]] hello"); n("linkReferenceStrong", "[link [[][link&strong **foo**][link ]]][string [[bar]]] hello"); n("linkReferenceEmStrong", "[link [[][link&strong **][link&em&strong *foo**][link&em *][link ]]][string [[bar]]] hello"); n("linkReferenceSpace", "[link [[foo]]] [string [[bar]]] hello"); n("linkReferenceDoubleSpace", "[[foo]]  [[bar]] hello"); n("linkImplicit", "[link [[foo]]][string [[]]] hello"); n("labelNoTitle", "[link [[foo]]:] [string http://example.com/]"); n("labelIndented", "   [link [[foo]]:] [string http://example.com/]"); n("labelSpaceTitle", '[link [[foo bar]]:] [string http://example.com/ "hello"]'); n("labelDoubleTitle", '[link [[foo bar]]:] [string http://example.com/ "hello"] "world"'); n("labelTitleDoubleQuotes", '[link [[foo]]:] [string http://example.com/  "bar"]'); n("labelTitleSingleQuotes", "[link [[foo]]:] [string http://example.com/  'bar']"); n("labelTitleParenthese", "[link [[foo]]:] [string http://example.com/  (bar)]"); n("labelTitleInvalid", "[link [[foo]]:] [string http://example.com/] bar"); n("labelLinkAngleBrackets", '[link [[foo]]:] [string <http://example.com/>  "bar"]'); n("labelTitleNextDoubleQuotes", "[link [[foo]]:] [string http://example.com/]", '[string "bar"] hello'); n("labelTitleNextSingleQuotes", "[link [[foo]]:] [string http://example.com/]", "[string 'bar'] hello"); n("labelTitleNextParenthese", "[link [[foo]]:] [string http://example.com/]", "[string (bar)] hello"); n("labelTitleNextMixed", "[link [[foo]]:] [string http://example.com/]", '(bar" hello'); n("linkWeb", "[link <http://example.com/>] foo"); n("linkWebDouble", "[link <http://example.com/>] foo [link <http://example.com/>]"); n("linkEmail", "[link <user@example.com>] foo"); n("linkEmailDouble", "[link <user@example.com>] foo [link <user@example.com>]"); n("emAsterisk", "[em *foo*] bar"); n("emUnderscore", "[em _foo_] bar"); n("emInWordAsterisk", "foo[em *bar*]hello"); n("emInWordUnderscore", "foo[em _bar_]hello"); n("emEscapedBySpaceIn", "foo [em _bar _ hello_] world"); n("emEscapedBySpaceOut", "foo _ bar[em _hello_]world"); n("emEscapedByNewline", "foo", "_ bar[em _hello_]world"); n("emIncompleteAsterisk", "foo [em *bar]"); n("emIncompleteUnderscore", "foo [em _bar]"); n("strongAsterisk", "[strong **foo**] bar"); n("strongUnderscore", "[strong __foo__] bar"); n("emStrongAsterisk", "[em *foo][em&strong **bar*][strong hello**] world"); n("emStrongUnderscore", "[em _foo][em&strong __bar_][strong hello__] world"); n("emStrongMixed", "[em _foo][em&strong **bar*hello__ world]"); n("emStrongMixed", "[em *foo][em&strong __bar_hello** world]"); n("escapeBacktick", "foo \\`bar\\`"); n("doubleEscapeBacktick", "foo \\\\[comment `bar\\\\`]"); n("escapeAsterisk", "foo \\*bar\\*"); n("doubleEscapeAsterisk", "foo \\\\[em *bar\\\\*]"); n("escapeUnderscore", "foo \\_bar\\_"); n("doubleEscapeUnderscore", "foo \\\\[em _bar\\\\_]"); n("escapeHash", "\\# foo"); n("doubleEscapeHash", "\\\\# foo"); n("escapeNewline", "\\", "[em *foo*]"); n("taskList", "[variable-2 * [ ]] bar]"); n("fencedCodeBlocks", "[comment ```]", "foo", "[comment ```]"); n("xmlMode", "[tag&bracket <][tag div][tag&bracket >]", "*foo*", "[tag&bracket <][tag http://github.com][tag&bracket />]", "[tag&bracket <\/][tag div][tag&bracket >]", "[link <http://github.com/>]"); n("xmlModeWithMarkdownInside", "[tag&bracket <][tag div] [attribute markdown]=[string 1][tag&bracket >]", "[em *foo*]", "[link <http://github.com/>]", "[tag <\/div>]", "[link <http://github.com/>]", "[tag&bracket <][tag div][tag&bracket >]", "[tag&bracket <\/][tag div][tag&bracket >]") })();
//# sourceMappingURL=test.min.js.map