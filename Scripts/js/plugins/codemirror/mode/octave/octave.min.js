(function (n) { typeof exports == "object" && typeof module == "object" ? n(require("../../lib/codemirror")) : typeof define == "function" && define.amd ? define(["../../lib/codemirror"], n) : n(CodeMirror) })(function (n) { "use strict"; n.defineMode("octave", function () { function t(n) { return new RegExp("^((" + n.join(")|(") + "))\\b") } function i(t, i) { return !t.sol() && t.peek() === "'" ? (t.next(), i.tokenize = n, "operator") : (i.tokenize = n, n(t, i)) } function a(t, i) { return t.match(/^.*%}/) ? (i.tokenize = n, "comment") : (t.skipToEnd(), "comment") } function n(v, y) { if (v.eatSpace()) return null; if (v.match("%{")) return y.tokenize = a, v.skipToEnd(), "comment"; if (v.match(/^[%#]/)) return v.skipToEnd(), "comment"; if (v.match(/^[0-9\.+-]/, !1)) { if (v.match(/^[+-]?0x[0-9a-fA-F]+[ij]?/)) return v.tokenize = n, "number"; if (v.match(/^[+-]?\d*\.\d+([EeDd][+-]?\d+)?[ij]?/) || v.match(/^[+-]?\d+([EeDd][+-]?\d+)?[ij]?/)) return "number" } return v.match(t(["nan", "NaN", "inf", "Inf"])) ? "number" : v.match(/^"([^"]|(""))*"/) ? "string" : v.match(/^'([^']|(''))*'/) ? "string" : v.match(l) ? "keyword" : v.match(c) ? "builtin" : v.match(h) ? "variable" : v.match(r) || v.match(f) ? "operator" : v.match(u) || v.match(e) || v.match(o) ? null : v.match(s) ? (y.tokenize = i, null) : (v.next(), "error") } var r = new RegExp("^[\\+\\-\\*/&|\\^~<>!@'\\\\]"), u = new RegExp("^[\\(\\[\\{\\},:=;]"), f = new RegExp("^((==)|(~=)|(<=)|(>=)|(<<)|(>>)|(\\.[\\+\\-\\*/\\^\\\\]))"), e = new RegExp("^((!=)|(\\+=)|(\\-=)|(\\*=)|(/=)|(&=)|(\\|=)|(\\^=))"), o = new RegExp("^((>>=)|(<<=))"), s = new RegExp("^[\\]\\)]"), h = new RegExp("^[_A-Za-z][_A-Za-z0-9]*"), c = t(["error", "eval", "function", "abs", "acos", "atan", "asin", "cos", "cosh", "exp", "log", "prod", "sum", "log10", "max", "min", "sign", "sin", "sinh", "sqrt", "tan", "reshape", "break", "zeros", "default", "margin", "round", "ones", "rand", "syn", "ceil", "floor", "size", "clear", "zeros", "eye", "mean", "std", "cov", "det", "eig", "inv", "norm", "rank", "trace", "expm", "logm", "sqrtm", "linspace", "plot", "title", "xlabel", "ylabel", "legend", "text", "grid", "meshgrid", "mesh", "num2str", "fft", "ifft", "arrayfun", "cellfun", "input", "fliplr", "flipud", "ismember"]), l = t(["return", "case", "switch", "else", "elseif", "end", "endif", "endfunction", "if", "otherwise", "do", "for", "while", "try", "catch", "classdef", "properties", "events", "methods", "global", "persistent", "endfor", "endwhile", "printf", "sprintf", "disp", "until", "continue", "pkg"]); return { startState: function () { return { tokenize: n } }, token: function (n, t) { var r = t.tokenize(n, t); return (r === "number" || r === "variable") && (t.tokenize = i), r } } }); n.defineMIME("text/x-octave", "octave") });
//# sourceMappingURL=octave.min.js.map