(function (n) { typeof exports == "object" && typeof module == "object" ? n(require("../../lib/codemirror")) : typeof define == "function" && define.amd ? define(["../../lib/codemirror"], n) : n(CodeMirror) })(function (n) { "use strict"; n.defineMode("lua", function (n, t) { function o(n) { return new RegExp("^(?:" + n.join("|") + ")", "i") } function i(n) { return new RegExp("^(?:" + n.join("|") + ")$", "i") } function u(n) { for (var t = 0; n.eat("=") ;)++t; return n.eat("["), t } function r(n, t) { var i = n.next(); return i == "-" && n.eat("-") ? n.eat("[") && n.eat("[") ? (t.cur = f(u(n), "comment"))(n, t) : (n.skipToEnd(), "comment") : i == '"' || i == "'" ? (t.cur = y(i))(n, t) : i == "[" && /[\[=]/.test(n.peek()) ? (t.cur = f(u(n), "string"))(n, t) : /\d/.test(i) ? (n.eatWhile(/[\w.%]/), "number") : /[\w_]/.test(i) ? (n.eatWhile(/[\w\\\-_.]/), "variable") : null } function f(n, t) { return function (i, u) { for (var f = null, e; (e = i.next()) != null;) if (f == null) e == "]" && (f = 0); else if (e == "=")++f; else if (e == "]" && f == n) { u.cur = r; break } else f = null; return t } } function y(n) { return function (t, i) { for (var u = !1, f; (f = t.next()) != null;) { if (f == n && !u) break; u = !u && f == "\\" } return u || (i.cur = r), "string" } } var e = n.indentUnit, s = i(t.specials || []), h = i(["_G", "_VERSION", "assert", "collectgarbage", "dofile", "error", "getfenv", "getmetatable", "ipairs", "load", "loadfile", "loadstring", "module", "next", "pairs", "pcall", "print", "rawequal", "rawget", "rawset", "require", "select", "setfenv", "setmetatable", "tonumber", "tostring", "type", "unpack", "xpcall", "coroutine.create", "coroutine.resume", "coroutine.running", "coroutine.status", "coroutine.wrap", "coroutine.yield", "debug.debug", "debug.getfenv", "debug.gethook", "debug.getinfo", "debug.getlocal", "debug.getmetatable", "debug.getregistry", "debug.getupvalue", "debug.setfenv", "debug.sethook", "debug.setlocal", "debug.setmetatable", "debug.setupvalue", "debug.traceback", "close", "flush", "lines", "read", "seek", "setvbuf", "write", "io.close", "io.flush", "io.input", "io.lines", "io.open", "io.output", "io.popen", "io.read", "io.stderr", "io.stdin", "io.stdout", "io.tmpfile", "io.type", "io.write", "math.abs", "math.acos", "math.asin", "math.atan", "math.atan2", "math.ceil", "math.cos", "math.cosh", "math.deg", "math.exp", "math.floor", "math.fmod", "math.frexp", "math.huge", "math.ldexp", "math.log", "math.log10", "math.max", "math.min", "math.modf", "math.pi", "math.pow", "math.rad", "math.random", "math.randomseed", "math.sin", "math.sinh", "math.sqrt", "math.tan", "math.tanh", "os.clock", "os.date", "os.difftime", "os.execute", "os.exit", "os.getenv", "os.remove", "os.rename", "os.setlocale", "os.time", "os.tmpname", "package.cpath", "package.loaded", "package.loaders", "package.loadlib", "package.path", "package.preload", "package.seeall", "string.byte", "string.char", "string.dump", "string.find", "string.format", "string.gmatch", "string.gsub", "string.len", "string.lower", "string.match", "string.rep", "string.reverse", "string.sub", "string.upper", "table.concat", "table.insert", "table.maxn", "table.remove", "table.sort"]), c = i(["and", "break", "elseif", "false", "nil", "not", "or", "return", "true", "function", "end", "if", "then", "else", "do", "while", "repeat", "until", "for", "in", "local"]), l = i(["function", "if", "repeat", "do", "\\(", "{"]), a = i(["end", "until", "\\)", "}"]), v = o(["end", "until", "\\)", "}", "else", "elseif"]); return { startState: function (n) { return { basecol: n || 0, indentDepth: 0, cur: r } }, token: function (n, t) { if (n.eatSpace()) return null; var i = t.cur(n, t), r = n.current(); return i == "variable" && (c.test(r) ? i = "keyword" : h.test(r) ? i = "builtin" : s.test(r) && (i = "variable-2")), i != "comment" && i != "string" && (l.test(r) ? ++t.indentDepth : a.test(r) && --t.indentDepth), i }, indent: function (n, t) { var i = v.test(t); return n.basecol + e * (n.indentDepth - (i ? 1 : 0)) }, lineComment: "--", blockCommentStart: "--[[", blockCommentEnd: "]]" } }); n.defineMIME("text/x-lua", "lua") });
//# sourceMappingURL=lua.min.js.map