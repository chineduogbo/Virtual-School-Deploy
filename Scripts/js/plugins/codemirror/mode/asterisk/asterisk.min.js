(function (n) { typeof exports == "object" && typeof module == "object" ? n(require("../../lib/codemirror")) : typeof define == "function" && define.amd ? define(["../../lib/codemirror"], n) : n(CodeMirror) })(function (n) { "use strict"; n.defineMode("asterisk", function () { function r(i, r) { var f = "", u = "", e; if (u = i.next(), u == ";") return i.skipToEnd(), "comment"; if (u == "[") return i.skipTo("]"), i.eat("]"), "header"; if (u == '"') return i.skipTo('"'), "string"; if (u == "'") return i.skipTo("'"), "string-2"; if (u == "#" && (i.eatWhile(/\w/), f = i.current(), t.indexOf(f) !== -1)) return i.skipToEnd(), "strong"; if (u == "$" && (e = i.peek(), e == "{")) return i.skipTo("}"), i.eat("}"), "variable-3"; if (i.eatWhile(/\w/), f = i.current(), n.indexOf(f) !== -1) { r.extenStart = !0; switch (f) { case "same": r.extenSame = !0; break; case "include": case "switch": case "ignorepat": r.extenInclude = !0 } return "atom" } } var n = ["exten", "same", "include", "ignorepat", "switch"], t = ["#include", "#exec"], i = ["addqueuemember", "adsiprog", "aelsub", "agentlogin", "agentmonitoroutgoing", "agi", "alarmreceiver", "amd", "answer", "authenticate", "background", "backgrounddetect", "bridge", "busy", "callcompletioncancel", "callcompletionrequest", "celgenuserevent", "changemonitor", "chanisavail", "channelredirect", "chanspy", "clearhash", "confbridge", "congestion", "continuewhile", "controlplayback", "dahdiacceptr2call", "dahdibarge", "dahdiras", "dahdiscan", "dahdisendcallreroutingfacility", "dahdisendkeypadfacility", "datetime", "dbdel", "dbdeltree", "deadagi", "dial", "dictate", "directory", "disa", "dumpchan", "eagi", "echo", "endwhile", "exec", "execif", "execiftime", "exitwhile", "extenspy", "externalivr", "festival", "flash", "followme", "forkcdr", "getcpeid", "gosub", "gosubif", "goto", "gotoif", "gotoiftime", "hangup", "iax2provision", "ices", "importvar", "incomplete", "ivrdemo", "jabberjoin", "jabberleave", "jabbersend", "jabbersendgroup", "jabberstatus", "jack", "log", "macro", "macroexclusive", "macroexit", "macroif", "mailboxexists", "meetme", "meetmeadmin", "meetmechanneladmin", "meetmecount", "milliwatt", "minivmaccmess", "minivmdelete", "minivmgreet", "minivmmwi", "minivmnotify", "minivmrecord", "mixmonitor", "monitor", "morsecode", "mp3player", "mset", "musiconhold", "nbscat", "nocdr", "noop", "odbc", "odbc", "odbcfinish", "originate", "ospauth", "ospfinish", "osplookup", "ospnext", "page", "park", "parkandannounce", "parkedcall", "pausemonitor", "pausequeuemember", "pickup", "pickupchan", "playback", "playtones", "privacymanager", "proceeding", "progress", "queue", "queuelog", "raiseexception", "read", "readexten", "readfile", "receivefax", "receivefax", "receivefax", "record", "removequeuemember", "resetcdr", "retrydial", "return", "ringing", "sayalpha", "saycountedadj", "saycountednoun", "saycountpl", "saydigits", "saynumber", "sayphonetic", "sayunixtime", "senddtmf", "sendfax", "sendfax", "sendfax", "sendimage", "sendtext", "sendurl", "set", "setamaflags", "setcallerpres", "setmusiconhold", "sipaddheader", "sipdtmfmode", "sipremoveheader", "skel", "slastation", "slatrunk", "sms", "softhangup", "speechactivategrammar", "speechbackground", "speechcreate", "speechdeactivategrammar", "speechdestroy", "speechloadgrammar", "speechprocessingsound", "speechstart", "speechunloadgrammar", "stackpop", "startmusiconhold", "stopmixmonitor", "stopmonitor", "stopmusiconhold", "stopplaytones", "system", "testclient", "testserver", "transfer", "tryexec", "trysystem", "unpausemonitor", "unpausequeuemember", "userevent", "verbose", "vmauthenticate", "vmsayname", "voicemail", "voicemailmain", "wait", "waitexten", "waitfornoise", "waitforring", "waitforsilence", "waitmusiconhold", "waituntil", "while", "zapateller"]; return { startState: function () { return { extenStart: !1, extenSame: !1, extenInclude: !1, extenExten: !1, extenPriority: !1, extenApplication: !1 } }, token: function (n, t) { var u = "", f = ""; if (n.eatSpace()) return null; if (t.extenStart) return n.eatWhile(/[^\s]/), u = n.current(), /^=>?$/.test(u) ? (t.extenExten = !0, t.extenStart = !1, "strong") : (t.extenStart = !1, n.skipToEnd(), "error"); if (t.extenExten) return t.extenExten = !1, t.extenPriority = !0, n.eatWhile(/[^,]/), t.extenInclude && (n.skipToEnd(), t.extenPriority = !1, t.extenInclude = !1), t.extenSame && (t.extenPriority = !1, t.extenSame = !1, t.extenApplication = !0), "tag"; if (t.extenPriority) return (t.extenPriority = !1, t.extenApplication = !0, f = n.next(), t.extenSame) ? null : (n.eatWhile(/[^,]/), "number"); if (t.extenApplication) { if (n.eatWhile(/,/), u = n.current(), u === ",") return null; if (n.eatWhile(/\w/), u = n.current().toLowerCase(), t.extenApplication = !1, i.indexOf(u) !== -1) return "def strong" } else return r(n, t); return null } } }); n.defineMIME("text/x-asterisk", "asterisk") });
//# sourceMappingURL=asterisk.min.js.map