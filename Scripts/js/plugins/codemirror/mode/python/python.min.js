(function (n) { typeof exports == "object" && typeof module == "object" ? n(require("../../lib/codemirror")) : typeof define == "function" && define.amd ? define(["../../lib/codemirror"], n) : n(CodeMirror) })(function (n) { "use strict"; function i(n) { return new RegExp("^((" + n.join(")|(") + "))\\b") } function t(n) { return n.scopes[n.scopes.length - 1] } var s = i(["and", "or", "not", "is", "in"]), r = ["as", "assert", "break", "class", "continue", "def", "del", "elif", "else", "except", "finally", "for", "from", "global", "if", "import", "lambda", "pass", "raise", "return", "try", "while", "with", "yield"], u = ["abs", "all", "any", "bin", "bool", "bytearray", "callable", "chr", "classmethod", "compile", "complex", "delattr", "dict", "dir", "divmod", "enumerate", "eval", "filter", "float", "format", "frozenset", "getattr", "globals", "hasattr", "hash", "help", "hex", "id", "input", "int", "isinstance", "issubclass", "iter", "len", "list", "locals", "map", "max", "memoryview", "min", "next", "object", "oct", "open", "ord", "pow", "property", "range", "repr", "reversed", "round", "set", "setattr", "slice", "sorted", "staticmethod", "str", "sum", "super", "tuple", "type", "vars", "zip", "__import__", "NotImplemented", "Ellipsis", "__debug__"], f = { builtins: ["apply", "basestring", "buffer", "cmp", "coerce", "execfile", "file", "intern", "long", "raw_input", "reduce", "reload", "unichr", "unicode", "xrange", "False", "True", "None"], keywords: ["exec", "print"] }, e = { builtins: ["ascii", "bytes", "exec", "print"], keywords: ["nonlocal", "False", "True", "None"] }, o; n.registerHelper("hintWords", "python", r.concat(u)); n.defineMode("python", function (o, h) { function v(n, i) { var r, u, f; return n.sol() && t(i).type == "py" ? (r = t(i).offset, n.eatSpace() ? (u = n.indentation(), u > r ? w(n, i, "py") : u < r && g(n, i) && (i.errorToken = !0), null) : (f = d(n, i), r > 0 && g(n, i) && (f += " " + c), f)) : d(n, i) } function d(n, t) { var u, r, i; if (n.eatSpace()) return null; if (u = n.peek(), u == "#") return n.skipToEnd(), "comment"; if (n.match(/^[0-9\.]/, !1)) { if (r = !1, n.match(/^\d*\.\d+(e[\+\-]?\d+)?/i) && (r = !0), n.match(/^\d+\.\d*/) && (r = !0), n.match(/^\.\d+/) && (r = !0), r) return n.eat(/J/i), "number"; if (i = !1, n.match(/^0x[0-9a-f]+/i) && (i = !0), n.match(/^0b[01]+/i) && (i = !0), n.match(/^0o[0-7]+/i) && (i = !0), n.match(/^[1-9]\d*(e[\+\-]?\d+)?/) && (n.eat(/J/i), i = !0), n.match(/^0(?![\dx])/i) && (i = !0), i) return n.eat(/L/i), "number" } return n.match(p) ? (t.tokenize = et(n.current()), t.tokenize(n, t)) : n.match(ut) || n.match(rt) ? null : n.match(it) || n.match(nt) || n.match(s) ? "operator" : n.match(tt) ? null : n.match(b) ? "keyword" : n.match(k) ? "builtin" : n.match(/^(self|cls)\b/) ? "variable-2" : n.match(y) ? t.lastToken == "def" || t.lastToken == "class" ? "def" : "variable" : (n.next(), c) } function et(n) { function r(r, u) { while (!r.eol()) if (r.eatWhile(/[^'"\\]/), r.eat("\\")) { if (r.next(), i && r.eol()) return t } else { if (r.match(n)) return u.tokenize = v, t; r.eat(/['"]/) } if (i) { if (h.singleLineStringErrors) return c; u.tokenize = v } return t } while ("rub".indexOf(n.charAt(0).toLowerCase()) >= 0) n = n.substr(1); var i = n.length == 1, t = "string"; return r.isString = !0, r } function w(n, i, r) { var u = 0, f = null; if (r == "py") while (t(i).type != "py") i.scopes.pop(); u = t(i).offset + (r == "py" ? o.indentUnit : ft); r == "py" || n.match(/^(\s|#.*)*$/, !1) || (f = n.column() + 1); i.scopes.push({ offset: u, type: r, align: f }) } function g(n, i) { for (var r = n.indentation() ; t(i).offset > r;) { if (t(i).type != "py") return !0; i.scopes.pop() } return t(i).offset != r } function ot(n, i) { var u = i.tokenize(n, i), r = n.current(), f; if (r == ".") return u = n.match(y, !1) ? null : c, u == null && i.lastStyle == "meta" && (u = "meta"), u; if (r == "@") return n.match(y, !1) ? "meta" : c; if ((u == "variable" || u == "builtin") && i.lastStyle == "meta" && (u = "meta"), (r == "pass" || r == "return") && (i.dedent += 1), r == "lambda" && (i.lambda = !0), r != ":" || i.lambda || t(i).type != "py" || w(n, i, "py"), f = r.length == 1 ? "[({".indexOf(r) : -1, f != -1 && w(n, i, "])}".slice(f, f + 1)), f = "])}".indexOf(r), f != -1) if (t(i).type == r) i.scopes.pop(); else return c; return i.dedent > 0 && n.eol() && t(i).type == "py" && (i.scopes.length > 1 && i.scopes.pop(), i.dedent -= 1), u } var c = "error", nt = h.singleOperators || new RegExp("^[\\+\\-\\*/%&|\\^~<>!]"), tt = h.singleDelimiters || new RegExp("^[\\(\\)\\[\\]\\{\\}@,:`=;\\.]"), it = h.doubleOperators || new RegExp("^((==)|(!=)|(<=)|(>=)|(<>)|(<<)|(>>)|(//)|(\\*\\*))"), rt = h.doubleDelimiters || new RegExp("^((\\+=)|(\\-=)|(\\*=)|(%=)|(/=)|(&=)|(\\|=)|(\\^=))"), ut = h.tripleDelimiters || new RegExp("^((//=)|(>>=)|(<<=)|(\\*\\*=))"), y = h.identifiers || new RegExp("^[_A-Za-z][_A-Za-z0-9]*"), ft = h.hangingIndent || o.indentUnit, l = r, a = u, p, b, k; return h.extra_keywords != undefined && (l = l.concat(h.extra_keywords)), h.extra_builtins != undefined && (a = a.concat(h.extra_builtins)), h.version && parseInt(h.version, 10) == 3 ? (l = l.concat(e.keywords), a = a.concat(e.builtins), p = new RegExp("^(([rb]|(br))?('{3}|\"{3}|['\"]))", "i")) : (l = l.concat(f.keywords), a = a.concat(f.builtins), p = new RegExp("^(([rub]|(ur)|(br))?('{3}|\"{3}|['\"]))", "i")), b = i(l), k = i(a), { startState: function (n) { return { tokenize: v, scopes: [{ offset: n || 0, type: "py", align: null }], lastStyle: null, lastToken: null, lambda: !1, dedent: 0 } }, token: function (n, t) { var u = t.errorToken, i, r; return u && (t.errorToken = !1), i = ot(n, t), t.lastStyle = i, r = n.current(), r && i && (t.lastToken = r), n.eol() && t.lambda && (t.lambda = !1), u ? i + " " + c : i }, indent: function (i, r) { if (i.tokenize != v) return i.tokenize.isString ? n.Pass : 0; var u = t(i), f = r && r.charAt(0) == u.type; return u.align != null ? u.align - (f ? 1 : 0) : f && i.scopes.length > 1 ? i.scopes[i.scopes.length - 2].offset : u.offset }, lineComment: "#", fold: "indent" } }); n.defineMIME("text/x-python", "python"); o = function (n) { return n.split(" ") }; n.defineMIME("text/x-cython", { name: "python", extra_keywords: o("by cdef cimport cpdef ctypedef enum exceptextern gil include nogil property publicreadonly struct union DEF IF ELIF ELSE") }) });
//# sourceMappingURL=python.min.js.map