(function (n) { typeof exports == "object" && typeof module == "object" ? n(require("../../lib/codemirror")) : typeof define == "function" && define.amd ? define(["../../lib/codemirror"], n) : n(CodeMirror) })(function (n) { "use strict"; n.defineMode("rpm-changes", function () { var n = /^-+$/, t = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)  ?\d{1,2} \d{2}:\d{2}(:\d{2})? [A-Z]{3,4} \d{4} - /, i = /^[\w+.-]+@[\w.-]+/; return { token: function (r) { return r.sol() && (r.match(n) || r.match(t)) ? "tag" : r.match(i) ? "string" : (r.next(), null) } } }); n.defineMIME("text/x-rpm-changes", "rpm-changes"); n.defineMode("rpm-spec", function () { var n = /^(i386|i586|i686|x86_64|ppc64|ppc|ia64|s390x|s390|sparc64|sparcv9|sparc|noarch|alphaev6|alpha|hppa|mipsel)/, t = /^(Name|Version|Release|License|Summary|Url|Group|Source|BuildArch|BuildRequires|BuildRoot|AutoReqProv|Provides|Requires(\(\w+\))?|Obsoletes|Conflicts|Recommends|Source\d*|Patch\d*|ExclusiveArch|NoSource|Supplements):/, i = /^%(debug_package|package|description|prep|build|install|files|clean|changelog|preinstall|preun|postinstall|postun|pre|post|triggerin|triggerun|pretrans|posttrans|verifyscript|check|triggerpostun|triggerprein|trigger)/, r = /^%(ifnarch|ifarch|if)/, u = /^%(else|endif)/, f = /^(\!|\?|\<\=|\<|\>\=|\>|\=\=|\&\&|\|\|)/; return { startState: function () { return { controlFlow: !1, macroParameters: !1, section: !1 } }, token: function (e, o) { var s = e.peek(); if (s == "#") return e.skipToEnd(), "comment"; if (e.sol()) { if (e.match(t)) return "preamble"; if (e.match(i)) return "section" } if (e.match(/^\$\w+/) || e.match(/^\$\{\w+\}/)) return "def"; if (e.match(u)) return "keyword"; if (e.match(r)) return o.controlFlow = !0, "keyword"; if (o.controlFlow) { if (e.match(f)) return "operator"; if (e.match(/^(\d+)/)) return "number"; e.eol() && (o.controlFlow = !1) } if (e.match(n)) return "number"; if (e.match(/^%[\w]+/)) return e.match(/^\(/) && (o.macroParameters = !0), "macro"; if (o.macroParameters) { if (e.match(/^\d+/)) return "number"; if (e.match(/^\)/)) return o.macroParameters = !1, "macro" } return e.match(/^%\{\??[\w \-]+\}/) ? "macro" : (e.next(), null) } } }); n.defineMIME("text/x-rpm-spec", "rpm-spec") });
//# sourceMappingURL=rpm.min.js.map