(function (n) { typeof exports == "object" && typeof module == "object" ? n(require("../../lib/codemirror")) : typeof define == "function" && define.amd ? define(["../../lib/codemirror"], n) : n(CodeMirror) })(function (n) { "use strict"; n.defineMode("gas", function (n, t) { function s() { r = "#"; i.ax = "variable"; i.eax = "variable-2"; i.rax = "variable-3"; i.bx = "variable"; i.ebx = "variable-2"; i.rbx = "variable-3"; i.cx = "variable"; i.ecx = "variable-2"; i.rcx = "variable-3"; i.dx = "variable"; i.edx = "variable-2"; i.rdx = "variable-3"; i.si = "variable"; i.esi = "variable-2"; i.rsi = "variable-3"; i.di = "variable"; i.edi = "variable-2"; i.rdi = "variable-3"; i.sp = "variable"; i.esp = "variable-2"; i.rsp = "variable-3"; i.bp = "variable"; i.ebp = "variable-2"; i.rbp = "variable-3"; i.ip = "variable"; i.eip = "variable-2"; i.rip = "variable-3"; i.cs = "keyword"; i.ds = "keyword"; i.ss = "keyword"; i.es = "keyword"; i.fs = "keyword"; i.gs = "keyword" } function h() { r = "@"; e.syntax = "builtin"; i.r0 = "variable"; i.r1 = "variable"; i.r2 = "variable"; i.r3 = "variable"; i.r4 = "variable"; i.r5 = "variable"; i.r6 = "variable"; i.r7 = "variable"; i.r8 = "variable"; i.r9 = "variable"; i.r10 = "variable"; i.r11 = "variable"; i.r12 = "variable"; i.sp = "variable-2"; i.lr = "variable-2"; i.pc = "variable-2"; i.r13 = i.sp; i.r14 = i.lr; i.r15 = i.pc; u.push(function (n, t) { if (n === "#") return t.eatWhile(/\w/), "number" }) } function c(n, t) { for (var i = !1, r; (r = n.next()) != null;) { if (r === t && !i) return !1; i = !i && r === "\\" } return i } function o(n, t) { for (var r = !1, i; (i = n.next()) != null;) { if (i === "/" && r) { t.tokenize = null; break } r = i === "*" } return "comment" } var u = [], r = "", e = { ".abort": "builtin", ".align": "builtin", ".altmacro": "builtin", ".ascii": "builtin", ".asciz": "builtin", ".balign": "builtin", ".balignw": "builtin", ".balignl": "builtin", ".bundle_align_mode": "builtin", ".bundle_lock": "builtin", ".bundle_unlock": "builtin", ".byte": "builtin", ".cfi_startproc": "builtin", ".comm": "builtin", ".data": "builtin", ".def": "builtin", ".desc": "builtin", ".dim": "builtin", ".double": "builtin", ".eject": "builtin", ".else": "builtin", ".elseif": "builtin", ".end": "builtin", ".endef": "builtin", ".endfunc": "builtin", ".endif": "builtin", ".equ": "builtin", ".equiv": "builtin", ".eqv": "builtin", ".err": "builtin", ".error": "builtin", ".exitm": "builtin", ".extern": "builtin", ".fail": "builtin", ".file": "builtin", ".fill": "builtin", ".float": "builtin", ".func": "builtin", ".global": "builtin", ".gnu_attribute": "builtin", ".hidden": "builtin", ".hword": "builtin", ".ident": "builtin", ".if": "builtin", ".incbin": "builtin", ".include": "builtin", ".int": "builtin", ".internal": "builtin", ".irp": "builtin", ".irpc": "builtin", ".lcomm": "builtin", ".lflags": "builtin", ".line": "builtin", ".linkonce": "builtin", ".list": "builtin", ".ln": "builtin", ".loc": "builtin", ".loc_mark_labels": "builtin", ".local": "builtin", ".long": "builtin", ".macro": "builtin", ".mri": "builtin", ".noaltmacro": "builtin", ".nolist": "builtin", ".octa": "builtin", ".offset": "builtin", ".org": "builtin", ".p2align": "builtin", ".popsection": "builtin", ".previous": "builtin", ".print": "builtin", ".protected": "builtin", ".psize": "builtin", ".purgem": "builtin", ".pushsection": "builtin", ".quad": "builtin", ".reloc": "builtin", ".rept": "builtin", ".sbttl": "builtin", ".scl": "builtin", ".section": "builtin", ".set": "builtin", ".short": "builtin", ".single": "builtin", ".size": "builtin", ".skip": "builtin", ".sleb128": "builtin", ".space": "builtin", ".stab": "builtin", ".string": "builtin", ".struct": "builtin", ".subsection": "builtin", ".symver": "builtin", ".tag": "builtin", ".text": "builtin", ".title": "builtin", ".type": "builtin", ".uleb128": "builtin", ".val": "builtin", ".version": "builtin", ".vtable_entry": "builtin", ".vtable_inherit": "builtin", ".warning": "builtin", ".weak": "builtin", ".weakref": "builtin", ".word": "builtin" }, i = {}, f = (t.architecture || "x86").toLowerCase(); return f === "x86" ? s(t) : (f === "arm" || f === "armv6") && h(t), { startState: function () { return { tokenize: null } }, token: function (n, t) { var s, h, f, l; if (t.tokenize) return t.tokenize(n, t); if (n.eatSpace()) return null; if (f = n.next(), f === "/" && n.eat("*")) return t.tokenize = o, o(n, t); if (f === r) return n.skipToEnd(), "comment"; if (f === '"') return c(n, '"'), "string"; if (f === ".") return n.eatWhile(/\w/), h = n.current().toLowerCase(), s = e[h], s || null; if (f === "=") return n.eatWhile(/\w/), "tag"; if (f === "{" || f === "}") return "braket"; if (/\d/.test(f)) return f === "0" && n.eat("x") ? (n.eatWhile(/[0-9a-fA-F]/), "number") : (n.eatWhile(/\d/), "number"); if (/\w/.test(f)) return (n.eatWhile(/\w/), n.eat(":")) ? "tag" : (h = n.current().toLowerCase(), s = i[h], s || null); for (l = 0; l < u.length; l++) if (s = u[l](f, n, t), s) return s }, lineComment: r, blockCommentStart: "/*", blockCommentEnd: "*/" } }) });
//# sourceMappingURL=gas.min.js.map