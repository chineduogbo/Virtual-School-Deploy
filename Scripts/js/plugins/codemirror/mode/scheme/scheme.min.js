(function (n) { typeof exports == "object" && typeof module == "object" ? n(require("../../lib/codemirror")) : typeof define == "function" && define.amd ? define(["../../lib/codemirror"], n) : n(CodeMirror) })(function (n) { "use strict"; n.defineMode("scheme", function () { function o(n) { for (var i = {}, r = n.split(" "), t = 0; t < r.length; ++t) i[r[t]] = !0; return i } function a(n, t, i) { this.indent = n; this.type = t; this.prev = i } function t(n, t, i) { n.indentStack = new a(t, i, n.indentStack) } function v(n) { n.indentStack = n.indentStack.prev } function k(n) { return n.match(y) } function d(n) { return n.match(p) } function i(n, t) { return t === !0 && n.backUp(1), n.match(b) } function g(n) { return n.match(w) } var h = "builtin", n = "comment", r = "string", u = "atom", f = "number", e = "bracket", c = 2, s = o("λ case-lambda call/cc class define-class exit-handler field import inherit init-field interface let*-values let-values let/ec mixin opt-lambda override protect provide public rename require require-for-syntax syntax syntax-case syntax-error unit/sig unless when with-syntax and begin call-with-current-continuation call-with-input-file call-with-output-file case cond define define-syntax delay do dynamic-wind else for-each if lambda let let* let-syntax letrec letrec-syntax map or syntax-rules abs acos angle append apply asin assoc assq assv atan boolean? caar cadr call-with-input-file call-with-output-file call-with-values car cdddar cddddr cdr ceiling char->integer char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? char-downcase char-lower-case? char-numeric? char-ready? char-upcase char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? char? close-input-port close-output-port complex? cons cos current-input-port current-output-port denominator display eof-object? eq? equal? eqv? eval even? exact->inexact exact? exp expt #f floor force gcd imag-part inexact->exact inexact? input-port? integer->char integer? interaction-environment lcm length list list->string list->vector list-ref list-tail list? load log magnitude make-polar make-rectangular make-string make-vector max member memq memv min modulo negative? newline not null-environment null? number->string number? numerator odd? open-input-file open-output-file output-port? pair? peek-char port? positive? procedure? quasiquote quote quotient rational? rationalize read read-char real-part real? remainder reverse round scheme-report-environment set! set-car! set-cdr! sin sqrt string string->list string->number string->symbol string-append string-ci<=? string-ci<? string-ci=? string-ci>=? string-ci>? string-copy string-fill! string-length string-ref string-set! string<=? string<? string=? string>=? string>? string? substring symbol->string symbol? #t tan transcript-off transcript-on truncate values vector vector->list vector-fill! vector-length vector-ref vector-set! with-input-from-file with-output-to-file write write-char zero?"), l = o("define let letrec let* lambda"), y = new RegExp(/^(?:[-+]i|[-+][01]+#*(?:\/[01]+#*)?i|[-+]?[01]+#*(?:\/[01]+#*)?@[-+]?[01]+#*(?:\/[01]+#*)?|[-+]?[01]+#*(?:\/[01]+#*)?[-+](?:[01]+#*(?:\/[01]+#*)?)?i|[-+]?[01]+#*(?:\/[01]+#*)?)(?=[()\s;"]|$)/i), p = new RegExp(/^(?:[-+]i|[-+][0-7]+#*(?:\/[0-7]+#*)?i|[-+]?[0-7]+#*(?:\/[0-7]+#*)?@[-+]?[0-7]+#*(?:\/[0-7]+#*)?|[-+]?[0-7]+#*(?:\/[0-7]+#*)?[-+](?:[0-7]+#*(?:\/[0-7]+#*)?)?i|[-+]?[0-7]+#*(?:\/[0-7]+#*)?)(?=[()\s;"]|$)/i), w = new RegExp(/^(?:[-+]i|[-+][\da-f]+#*(?:\/[\da-f]+#*)?i|[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?@[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?|[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?[-+](?:[\da-f]+#*(?:\/[\da-f]+#*)?)?i|[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?)(?=[()\s;"]|$)/i), b = new RegExp(/^(?:[-+]i|[-+](?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)i|[-+]?(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)@[-+]?(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)|[-+]?(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)[-+](?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)?i|(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*))(?=[()\s;"]|$)/i); return { startState: function () { return { indentStack: null, indentation: 0, mode: !1, sExprComment: !1 } }, token: function (o, a) { var y, nt, b, rt, p, tt, it, et; if (a.indentStack == null && o.sol() && (a.indentation = o.indentation()), o.eatSpace()) return null; y = null; switch (a.mode) { case "string": for (nt = !1; (b = o.next()) != null;) { if (b == '"' && !nt) { a.mode = !1; break } nt = !nt && b == "\\" } y = r; break; case "comment": for (rt = !1; (b = o.next()) != null;) { if (b == "#" && rt) { a.mode = !1; break } rt = b == "|" } y = n; break; case "s-expr-comment": if (a.mode = !1, o.peek() == "(" || o.peek() == "[") a.sExprComment = 0; else { o.eatWhile(/[^/s]/); y = n; break } default: if (p = o.next(), p == '"') a.mode = "string", y = r; else if (p == "'") y = u; else if (p == "#") if (o.eat("|")) a.mode = "comment", y = n; else if (o.eat(/[tf]/i)) y = u; else if (o.eat(";")) a.mode = "s-expr-comment", y = n; else { var w = null, ut = !1, ft = !0; o.eat(/[ei]/i) ? ut = !0 : o.backUp(1); o.match(/^#b/i) ? w = k : o.match(/^#o/i) ? w = d : o.match(/^#x/i) ? w = g : o.match(/^#d/i) ? w = i : o.match(/^[-+0-9.]/, !1) ? (ft = !1, w = i) : ut || o.eat("#"); w != null && (ft && !ut && o.match(/^#[ei]/i), w(o) && (y = f)) } else if (/^[-+0-9.]/.test(p) && i(o, !0)) y = f; else if (p == ";") o.skipToEnd(), y = n; else if (p == "(" || p == "[") { for (tt = "", it = o.column() ; (et = o.eat(/[^\s\(\[\;\)\]]/)) != null;) tt += et; tt.length > 0 && l.propertyIsEnumerable(tt) ? t(a, it + c, p) : (o.eatSpace(), o.eol() || o.peek() == ";" ? t(a, it + 1, p) : t(a, it + o.current().length, p)); o.backUp(o.current().length - 1); typeof a.sExprComment == "number" && a.sExprComment++; y = e } else p == ")" || p == "]" ? (y = e, a.indentStack != null && a.indentStack.type == (p == ")" ? "(" : "[") && (v(a), typeof a.sExprComment == "number" && --a.sExprComment == 0 && (y = n, a.sExprComment = !1))) : (o.eatWhile(/[\w\$_\-!$%&*+\.\/:<=>?@\^~]/), y = s && s.propertyIsEnumerable(o.current()) ? h : "variable") } return typeof a.sExprComment == "number" ? n : y }, indent: function (n) { return n.indentStack == null ? n.indentation : n.indentStack.indent }, lineComment: ";;" } }); n.defineMIME("text/x-scheme", "scheme") });
//# sourceMappingURL=scheme.min.js.map