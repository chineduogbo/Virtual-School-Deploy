(function () { function n(t, i, r) { function u(n) { var f = t(n), e = f < r, o = d3.extent(t.range()), s = o[0], h = o[1], u = e ? r - s : h - r; return u == 0 && (u = h - s), (e ? -1 : 1) * u * (i + 1) / (i + u / Math.abs(f - r)) + r } return u.distortion = function (n) { return arguments.length ? (i = +n, u) : i }, u.focus = function (n) { return arguments.length ? (r = +n, u) : r }, u.copy = function () { return n(t.copy(), i, r) }, u.nice = t.nice, u.ticks = t.ticks, u.tickFormat = t.tickFormat, d3.rebind(u, t, "domain", "range") } d3.fisheye = { scale: function (t) { return n(t(), 3, 0) }, circular: function () { function r(r) { var o = r.x - n[0], s = r.y - n[1], u = Math.sqrt(o * o + s * s), f; return !u || u >= t ? { x: r.x, y: r.y, z: 1 } : (f = i * (1 - Math.exp(-u * e)) / u * .75 + .25, { x: n[0] + o * f, y: n[1] + s * f, z: Math.min(f, 10) }) } function f() { return i = Math.exp(u), i = i / (i - 1) * t, e = u / t, r } var t = 200, u = 2, i, e, n = [0, 0]; return r.radius = function (n) { return arguments.length ? (t = +n, f()) : t }, r.distortion = function (n) { return arguments.length ? (u = +n, f()) : u }, r.focus = function (t) { return arguments.length ? (n = t, r) : n }, f() } } })();
//# sourceMappingURL=fisheye.min.js.map