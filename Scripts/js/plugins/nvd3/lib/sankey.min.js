d3.sankey = function () { function h() { t.forEach(function (n) { n.sourceLinks = []; n.targetLinks = [] }); e.forEach(function (n) { var i = n.source, r = n.target; typeof i == "number" && (i = n.source = t[n.source]); typeof r == "number" && (r = n.target = t[n.target]); i.sourceLinks.push(n); r.targetLinks.push(n) }) } function c() { t.forEach(function (n) { n.value = Math.max(d3.sum(n.sourceLinks, u), d3.sum(n.targetLinks, u)) }) } function l() { for (var i = t, u, n = 0; i.length;) u = [], i.forEach(function (t) { t.x = n; t.dx = f; t.sourceLinks.forEach(function (n) { u.push(n.target) }) }), i = u, ++n; a(n); v((r[0] - f) / (n - 1)) } function a(n) { t.forEach(function (t) { t.sourceLinks.length || (t.x = n - 1) }) } function v(n) { t.forEach(function (t) { t.x *= n }) } function y(n) { function c() { var n = d3.min(f, function (n) { return (r[1] - (n.length - 1) * i) / d3.sum(n, u) }); f.forEach(function (t) { t.forEach(function (t, i) { t.y = i; t.dy = t.value * n }) }); e.forEach(function (t) { t.dy = t.value * n }) } function l(n) { function t(n) { return o(n.source) * n.value } f.forEach(function (i) { i.forEach(function (i) { if (i.targetLinks.length) { var r = d3.sum(i.targetLinks, t) / d3.sum(i.targetLinks, u); i.y += (r - o(i)) * n } }) }) } function a(n) { function t(n) { return o(n.target) * n.value } f.slice().reverse().forEach(function (i) { i.forEach(function (i) { if (i.sourceLinks.length) { var r = d3.sum(i.sourceLinks, t) / d3.sum(i.sourceLinks, u); i.y += (r - o(i)) * n } }) }) } function h() { f.forEach(function (n) { var t, u, e = 0, o = n.length, f; for (n.sort(v), f = 0; f < o; ++f) t = n[f], u = e - t.y, u > 0 && (t.y += u), e = t.y + t.dy + i; if (u = e - i - r[1], u > 0) for (e = t.y -= u, f = o - 2; f >= 0; --f) t = n[f], u = t.y + t.dy + i - e, u > 0 && (t.y -= u), e = t.y }) } function v(n, t) { return n.y - t.y } var f = d3.nest().key(function (n) { return n.x }).sortKeys(d3.ascending).entries(t).map(function (n) { return n.values }), s; for (c(), h(), s = 1; n > 0; --n) a(s *= .99), h(), l(s), h() } function s() { function n(n, t) { return n.source.y - t.source.y } function i(n, t) { return n.target.y - t.target.y } t.forEach(function (t) { t.sourceLinks.sort(i); t.targetLinks.sort(n) }); t.forEach(function (n) { var t = 0, i = 0; n.sourceLinks.forEach(function (n) { n.sy = t; t += n.dy }); n.targetLinks.forEach(function (n) { n.ty = i; i += n.dy }) }) } function o(n) { return n.y + n.dy / 2 } function u(n) { return n.value } var n = {}, f = 24, i = 8, r = [1, 1], t = [], e = []; return n.nodeWidth = function (t) { return arguments.length ? (f = +t, n) : f }, n.nodePadding = function (t) { return arguments.length ? (i = +t, n) : i }, n.nodes = function (i) { return arguments.length ? (t = i, n) : t }, n.links = function (t) { return arguments.length ? (e = t, n) : e }, n.size = function (t) { return arguments.length ? (r = t, n) : r }, n.layout = function (t) { return h(), c(), l(), y(t), s(), n }, n.relayout = function () { return s(), n }, n.link = function () { function t(t) { var i = t.source.x + t.source.dx, r = t.target.x, u = d3.interpolateNumber(i, r), o = u(n), s = u(1 - n), f = t.source.y + t.sy + t.dy / 2, e = t.target.y + t.ty + t.dy / 2; return "M" + i + "," + f + "C" + o + "," + f + " " + s + "," + e + " " + r + "," + e } var n = .5; return t.curvature = function (i) { return arguments.length ? (n = +i, t) : n }, t }, n };
//# sourceMappingURL=sankey.min.js.map