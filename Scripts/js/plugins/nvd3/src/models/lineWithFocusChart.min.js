nv.models.lineWithFocusChart = function () { "use strict"; function n(it) { return it.each(function (it) { function ti(n) { var r = +(n == "e"), i = r ? 1 : -1, t = ct / 3; return "M" + .5 * i + "," + t + "A6,6 0 0 " + r + " " + 6.5 * i + "," + (t + 6) + "V" + (2 * t - 6) + "A6,6 0 0 " + r + " " + .5 * i + "," + 2 * t + "ZM" + 2.5 * i + "," + (t + 8) + "V" + (2 * t - 8) + "M" + 4.5 * i + "," + (t + 8) + "V" + (2 * t - 8) } function ii() { r.empty() || r.extent(e); wt.data([r.empty() ? f.domain() : e]).each(function (n) { var t = f(n[0]) - k.range()[0], i = k.range()[1] - f(n[1]); d3.select(this).select(".left").attr("width", t < 0 ? 0 : t); d3.select(this).select(".right").attr("x", f(n[1])).attr("width", i < 0 ? 0 : i) }) } function gt() { var n, t; (e = r.empty() ? null : r.extent(), n = r.empty() ? f.domain() : r.extent(), Math.abs(n[0] - n[1]) <= 1) || (c.brush({ extent: n, brush: r }), ii(), t = et.select(".nv-focus .nv-linesWrap").datum(it.filter(function (n) { return !n.disabled }).map(function (t) { return { key: t.key, area: t.area, values: t.values.filter(function (t, r) { return i.x()(t, r) >= n[0] && i.x()(t, r) <= n[1] }) } })), t.transition().duration(l).call(i), et.select(".nv-focus .nv-x.nv-axis").transition().duration(l).call(o), et.select(".nv-focus .nv-y.nv-axis").transition().duration(l).call(s)) } var st = d3.select(this), ni = this, ot = (nt || parseInt(st.style("width")) || 960) - t.left - t.right, ht = (b || parseInt(st.style("height")) || 400) - t.top - t.bottom - w, ct = w - y.top - y.bottom, vt, at, lt, dt, wt, bt, kt; if (n.update = function () { st.transition().duration(l).call(n) }, n.container = this, it && it.length && it.filter(function (n) { return n.values.length }).length) st.selectAll(".nv-noData").remove(); else return vt = st.selectAll(".nv-noData").data([rt]), vt.enter().append("text").attr("class", "nvd3 nv-noData").attr("dy", "-.7em").style("text-anchor", "middle"), vt.attr("x", t.left + ot / 2).attr("y", t.top + ht / 2).text(function (n) { return n }), n; k = i.xScale(); ut = i.yScale(); f = u.xScale(); d = u.yScale(); var yt = st.selectAll("g.nv-wrap.nv-lineWithFocusChart").data([it]), pt = yt.enter().append("g").attr("class", "nvd3 nv-wrap nv-lineWithFocusChart").append("g"), et = yt.select("g"); pt.append("g").attr("class", "nv-legendWrap"); at = pt.append("g").attr("class", "nv-focus"); at.append("g").attr("class", "nv-x nv-axis"); at.append("g").attr("class", "nv-y nv-axis"); at.append("g").attr("class", "nv-linesWrap"); lt = pt.append("g").attr("class", "nv-context"); lt.append("g").attr("class", "nv-x nv-axis"); lt.append("g").attr("class", "nv-y nv-axis"); lt.append("g").attr("class", "nv-linesWrap"); lt.append("g").attr("class", "nv-brushBackground"); lt.append("g").attr("class", "nv-x nv-brush"); tt && (h.width(ot), et.select(".nv-legendWrap").datum(it).call(h), t.top != h.height() && (t.top = h.height(), ht = (b || parseInt(st.style("height")) || 400) - t.top - t.bottom - w), et.select(".nv-legendWrap").attr("transform", "translate(0," + -t.top + ")")); yt.attr("transform", "translate(" + t.left + "," + t.top + ")"); i.width(ot).height(ht).color(it.map(function (n, t) { return n.color || p(n, t) }).filter(function (n, t) { return !it[t].disabled })); u.defined(i.defined()).width(ot).height(ct).color(it.map(function (n, t) { return n.color || p(n, t) }).filter(function (n, t) { return !it[t].disabled })); et.select(".nv-context").attr("transform", "translate(0," + (ht + t.bottom + y.top) + ")"); dt = et.select(".nv-context .nv-linesWrap").datum(it.filter(function (n) { return !n.disabled })); d3.transition(dt).call(u); o.scale(k).ticks(ot / 100).tickSize(-ht, 0); s.scale(ut).ticks(ht / 36).tickSize(-ot, 0); et.select(".nv-focus .nv-x.nv-axis").attr("transform", "translate(0," + ht + ")"); r.x(f).on("brush", function () { var t = n.transitionDuration(); n.transitionDuration(0); gt(); n.transitionDuration(t) }); e && r.extent(e); wt = et.select(".nv-brushBackground").selectAll("g").data([e || r.extent()]); bt = wt.enter().append("g"); bt.append("rect").attr("class", "left").attr("x", 0).attr("y", 0).attr("height", ct); bt.append("rect").attr("class", "right").attr("x", 0).attr("y", 0).attr("height", ct); kt = et.select(".nv-x.nv-brush").call(r); kt.selectAll("rect").attr("height", ct); kt.selectAll(".resize").append("path").attr("d", ti); gt(); a.scale(f).ticks(ot / 100).tickSize(-ct, 0); et.select(".nv-context .nv-x.nv-axis").attr("transform", "translate(0," + d.range()[0] + ")"); d3.transition(et.select(".nv-context .nv-x.nv-axis")).call(a); v.scale(d).ticks(ct / 36).tickSize(-ot, 0); d3.transition(et.select(".nv-context .nv-y.nv-axis")).call(v); et.select(".nv-context .nv-x.nv-axis").attr("transform", "translate(0," + d.range()[0] + ")"); h.dispatch.on("stateChange", function () { n.update() }); c.on("tooltipShow", function (n) { g && ft(n, ni.parentNode) }) }), n } var i = nv.models.line(), u = nv.models.line(), o = nv.models.axis(), s = nv.models.axis(), a = nv.models.axis(), v = nv.models.axis(), h = nv.models.legend(), r = d3.svg.brush(), t = { top: 30, right: 30, bottom: 30, left: 60 }, y = { top: 0, right: 30, bottom: 20, left: 60 }, p = nv.utils.defaultColor(), nt = null, b = null, w = 100, k, ut, f, d, tt = !0, e = null, g = !0, it = function (n, t, i) { return "<h3>" + n + "<\/h3><p>" + i + " at " + t + "<\/p>" }, rt = "No Data Available.", c = d3.dispatch("tooltipShow", "tooltipHide", "brush"), l = 250, ft; i.clipEdge(!0); u.interactive(!1); o.orient("bottom").tickPadding(5); s.orient("left"); a.orient("bottom").tickPadding(5); v.orient("left"); ft = function (t, r) { var u = t.pos[0] + (r.offsetLeft || 0), f = t.pos[1] + (r.offsetTop || 0), e = o.tickFormat()(i.x()(t.point, t.pointIndex)), h = s.tickFormat()(i.y()(t.point, t.pointIndex)), c = it(t.series.key, e, h, t, n); nv.tooltip.show([u, f], c, null, null, r) }; i.dispatch.on("elementMouseover.tooltip", function (n) { n.pos = [n.pos[0] + t.left, n.pos[1] + t.top]; c.tooltipShow(n) }); i.dispatch.on("elementMouseout.tooltip", function (n) { c.tooltipHide(n) }); c.on("tooltipHide", function () { g && nv.tooltip.cleanup() }); return n.dispatch = c, n.legend = h, n.lines = i, n.lines2 = u, n.xAxis = o, n.yAxis = s, n.x2Axis = a, n.y2Axis = v, d3.rebind(n, i, "defined", "isArea", "size", "xDomain", "yDomain", "xRange", "yRange", "forceX", "forceY", "interactive", "clipEdge", "clipVoronoi", "id"), n.options = nv.utils.optionsFunc.bind(n), n.x = function (t) { return arguments.length ? (i.x(t), u.x(t), n) : i.x }, n.y = function (t) { return arguments.length ? (i.y(t), u.y(t), n) : i.y }, n.margin = function (i) { return arguments.length ? (t.top = typeof i.top != "undefined" ? i.top : t.top, t.right = typeof i.right != "undefined" ? i.right : t.right, t.bottom = typeof i.bottom != "undefined" ? i.bottom : t.bottom, t.left = typeof i.left != "undefined" ? i.left : t.left, n) : t }, n.margin2 = function (t) { return arguments.length ? (y = t, n) : y }, n.width = function (t) { return arguments.length ? (nt = t, n) : nt }, n.height = function (t) { return arguments.length ? (b = t, n) : b }, n.height2 = function (t) { return arguments.length ? (w = t, n) : w }, n.color = function (t) { return arguments.length ? (p = nv.utils.getColor(t), h.color(p), n) : p }, n.showLegend = function (t) { return arguments.length ? (tt = t, n) : tt }, n.tooltips = function (t) { return arguments.length ? (g = t, n) : g }, n.tooltipContent = function (t) { return arguments.length ? (it = t, n) : it }, n.interpolate = function (t) { return arguments.length ? (i.interpolate(t), u.interpolate(t), n) : i.interpolate() }, n.noData = function (t) { return arguments.length ? (rt = t, n) : rt }, n.xTickFormat = function (t) { return arguments.length ? (o.tickFormat(t), a.tickFormat(t), n) : o.tickFormat() }, n.yTickFormat = function (t) { return arguments.length ? (s.tickFormat(t), v.tickFormat(t), n) : s.tickFormat() }, n.brushExtent = function (t) { return arguments.length ? (e = t, n) : e }, n.transitionDuration = function (t) { return arguments.length ? (l = t, n) : l }, n };
//# sourceMappingURL=lineWithFocusChart.min.js.map