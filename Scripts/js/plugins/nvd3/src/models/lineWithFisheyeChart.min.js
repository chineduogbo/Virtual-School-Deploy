nv.models.lineChart = function () { "use strict"; function n(p) { return p.each(function (p) { function ht() { if (s) return tt.select(".nv-point-paths").style("pointer-events", "all"), !1; tt.select(".nv-background").style("pointer-events", "all"); tt.select(".nv-point-paths").style("pointer-events", "none"); var n = d3.mouse(this); et.call(i); tt.select(".nv-x.nv-axis").call(u); c.distortion(y).focus(n[0]) } var rt = d3.select(this), st = this, ut = (a || parseInt(rt.style("width")) || 960) - t.left - t.right, ft = (o || parseInt(rt.style("height")) || 400) - t.top - t.bottom, ot, it, tt, et; if (n.update = function () { rt.transition().call(n) }, n.container = this, p && p.length && p.filter(function (n) { return n.values.length }).length) rt.select(".nv-noData").remove(); else return rt.append("text").attr("class", "nvd3 nv-noData").attr("x", ut / 2).attr("y", ft / 2).attr("dy", "-.7em").style("text-anchor", "middle").text(w), n; ot = rt.selectAll("g.nv-wrap.nv-lineChart").data([p]); it = ot.enter().append("g").attr("class", "nvd3 nv-wrap nv-lineChart").append("g"); it.append("rect").attr("class", "nvd3 nv-background").attr("width", ut).attr("height", ft); it.append("g").attr("class", "nv-x nv-axis"); it.append("g").attr("class", "nv-y nv-axis"); it.append("g").attr("class", "nv-linesWrap"); it.append("g").attr("class", "nv-legendWrap"); it.append("g").attr("class", "nv-controlsWrap"); it.append("g").attr("class", "nv-controlsWrap"); tt = ot.select("g"); v && (r.width(ut), tt.select(".nv-legendWrap").datum(p).call(r), t.top != r.height() && (t.top = r.height(), ft = (o || parseInt(rt.style("height")) || 400) - t.top - t.bottom), tt.select(".nv-legendWrap").attr("transform", "translate(0," + -t.top + ")")); d && (b.width(180).color(["#444"]), tt.select(".nv-controlsWrap").datum(nt).attr("transform", "translate(0," + -t.top + ")").call(b)); i.width(ut).height(ft).color(p.map(function (n, t) { return n.color || e(n, t) }).filter(function (n, t) { return !p[t].disabled })); tt.attr("transform", "translate(" + t.left + "," + t.top + ")"); et = tt.select(".nv-linesWrap").datum(p.filter(function (n) { return !n.disabled })); d3.transition(et).call(i); u.ticks(ut / 100).tickSize(-ft, 0); tt.select(".nv-x.nv-axis").attr("transform", "translate(0," + k.range()[0] + ")"); d3.transition(tt.select(".nv-x.nv-axis")).call(u); l.ticks(ft / 36).tickSize(-ut, 0); d3.transition(tt.select(".nv-y.nv-axis")).call(l); tt.select(".nv-background").on("mousemove", ht); tt.select(".nv-background").on("click", function () { s = !s }); b.dispatch.on("legendClick", function (t) { t.disabled = !t.disabled; y = t.disabled ? 0 : 5; tt.select(".nv-background").style("pointer-events", t.disabled ? "none" : "all"); tt.select(".nv-point-paths").style("pointer-events", t.disabled ? "all" : "none"); t.disabled ? (c.distortion(y).focus(0), et.call(i), tt.select(".nv-x.nv-axis").call(u)) : s = !1; n.update() }); r.dispatch.on("stateChange", function () { n.update() }); i.dispatch.on("elementMouseover.tooltip", function (n) { n.pos = [n.pos[0] + t.left, n.pos[1] + t.top]; f.tooltipShow(n) }); if (h) f.on("tooltipShow", function (n) { g(n, st.parentNode) }); i.dispatch.on("elementMouseout.tooltip", function (n) { f.tooltipHide(n) }); if (h) f.on("tooltipHide", nv.tooltip.cleanup) }), n } var t = { top: 30, right: 20, bottom: 50, left: 60 }, e = nv.utils.defaultColor(), a = null, o = null, v = !0, d = !0, y = 0, s = !1, h = !0, p = function (n, t, i) { return "<h3>" + n + "<\/h3><p>" + i + " at " + t + "<\/p>" }, w = "No Data Available.", c = d3.fisheye.scale(d3.scale.linear).distortion(0), i = nv.models.line().xScale(c), k = i.yScale(), u = nv.models.axis().scale(c).orient("bottom").tickPadding(5), l = nv.models.axis().scale(k).orient("left"), r = nv.models.legend().height(30), b = nv.models.legend().height(30).updateState(!1), f = d3.dispatch("tooltipShow", "tooltipHide"), g = function (t, r) { var f = t.pos[0] + (r.offsetLeft || 0), e = t.pos[1] + (r.offsetTop || 0), o = u.tickFormat()(i.x()(t.point, t.pointIndex)), s = l.tickFormat()(i.y()(t.point, t.pointIndex)), h = p(t.series.key, o, s, t, n); nv.tooltip.show([f, e], h, null, null, r) }, nt = [{ key: "Magnify", disabled: !0 }]; return n.dispatch = f, n.legend = r, n.xAxis = u, n.yAxis = l, d3.rebind(n, i, "defined", "x", "y", "size", "xDomain", "yDomain", "xRange", "yRange", "forceX", "forceY", "interactive", "clipEdge", "clipVoronoi", "id", "interpolate"), n.options = nv.utils.optionsFunc.bind(n), n.margin = function (i) { return arguments.length ? (t = i, n) : t }, n.width = function (t) { return arguments.length ? (a = t, n) : a }, n.height = function (t) { return arguments.length ? (o = t, n) : o }, n.color = function (t) { return arguments.length ? (e = nv.utils.getColor(t), r.color(e), n) : e }, n.showLegend = function (t) { return arguments.length ? (v = t, n) : v }, n.tooltips = function (t) { return arguments.length ? (h = t, n) : h }, n.tooltipContent = function (t) { return arguments.length ? (p = t, n) : p }, n.noData = function (t) { return arguments.length ? (w = t, n) : w }, n };
//# sourceMappingURL=lineWithFisheyeChart.min.js.map