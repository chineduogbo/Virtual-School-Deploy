nv.models.linePlusBarWithFocusChart = function () { "use strict"; function n(st) { return st.each(function (st) { function pi(n) { var r = +(n == "e"), i = r ? 1 : -1, t = kt / 3; return "M" + .5 * i + "," + t + "A6,6 0 0 " + r + " " + 6.5 * i + "," + (t + 6) + "V" + (2 * t - 6) + "A6,6 0 0 " + r + " " + .5 * i + "," + 2 * t + "ZM" + 2.5 * i + "," + (t + 8) + "V" + (2 * t - 8) + "M" + 4.5 * i + "," + (t + 8) + "V" + (2 * t - 8) } function wi() { u.empty() || u.extent(o); ei.data([u.empty() ? f.domain() : o]).each(function (n) { var t = f(n[0]) - f.range()[0], i = f.range()[1] - f(n[1]); d3.select(this).select(".left").attr("width", t < 0 ? 0 : t); d3.select(this).select(".right").attr("x", f(n[1])).attr("width", i < 0 ? 0 : i) }) } function vi() { o = u.empty() ? null : u.extent(); e = u.empty() ? f.domain() : u.extent(); s.brush({ extent: e, brush: u }); wi(); r.width(wt).height(dt).color(st.map(function (n, t) { return n.color || c(n, t) }).filter(function (n, t) { return !st[t].disabled && st[t].bar })); i.width(wt).height(dt).color(st.map(function (n, t) { return n.color || c(n, t) }).filter(function (n, t) { return !st[t].disabled && !st[t].bar })); var n = pt.select(".nv-focus .nv-barsWrap").datum(bt.length ? bt.map(function (n) { return { key: n.key, values: n.values.filter(function (n, t) { return r.x()(n, t) >= e[0] && r.x()(n, t) <= e[1] }) } }) : [{ values: [] }]), t = pt.select(".nv-focus .nv-linesWrap").datum(ti[0].disabled ? [{ values: [] }] : ti.map(function (n) { return { key: n.key, values: n.values.filter(function (n, t) { return i.x()(n, t) >= e[0] && i.x()(n, t) <= e[1] }) } })); a = bt.length ? r.xScale() : i.xScale(); l.scale(a).ticks(wt / 100).tickSize(-dt, 0); l.domain([Math.ceil(e[0]), Math.floor(e[1])]); pt.select(".nv-x.nv-axis").transition().duration(v).call(l); n.transition().duration(v).call(r); t.transition().duration(v).call(i); pt.select(".nv-focus .nv-x.nv-axis").attr("transform", "translate(0," + ht.range()[0] + ")"); w.scale(ht).ticks(dt / 36).tickSize(-wt, 0); pt.select(".nv-focus .nv-y1.nv-axis").style("opacity", bt.length ? 1 : 0); b.scale(at).ticks(dt / 36).tickSize(bt.length ? 0 : -wt, 0); pt.select(".nv-focus .nv-y2.nv-axis").style("opacity", ti.length ? 1 : 0).attr("transform", "translate(" + a.range()[1] + ",0)"); pt.select(".nv-focus .nv-y1.nv-axis").transition().duration(v).call(w); pt.select(".nv-focus .nv-y2.nv-axis").transition().duration(v).call(b) } var ni = d3.select(this), yi = this, wt = (ft || parseInt(ni.style("width")) || 960) - t.left - t.right, dt = (nt || parseInt(ni.style("height")) || 400) - t.top - t.bottom - et, kt = et - ut.top - ut.bottom, ri, bt, ti, hi, ci, ii, gt, li, ai, ei, oi, si; if (n.update = function () { ni.transition().duration(v).call(n) }, n.container = this, st && st.length && st.filter(function (n) { return n.values.length }).length) ni.selectAll(".nv-noData").remove(); else return ri = ni.selectAll(".nv-noData").data([lt]), ri.enter().append("text").attr("class", "nvd3 nv-noData").attr("dy", "-.7em").style("text-anchor", "middle"), ri.attr("x", t.left + wt / 2).attr("y", t.top + dt / 2).text(function (n) { return n }), n; bt = st.filter(function (n) { return !n.disabled && n.bar }); ti = st.filter(function (n) { return !n.bar }); a = r.xScale(); f = p.scale(); ht = r.yScale(); at = i.yScale(); ct = k.yScale(); vt = y.yScale(); hi = st.filter(function (n) { return !n.disabled && n.bar }).map(function (n) { return n.values.map(function (n, t) { return { x: tt(n, t), y: it(n, t) } }) }); ci = st.filter(function (n) { return !n.disabled && !n.bar }).map(function (n) { return n.values.map(function (n, t) { return { x: tt(n, t), y: it(n, t) } }) }); a.range([0, wt]); f.domain(d3.extent(d3.merge(hi.concat(ci)), function (n) { return n.x })).range([0, wt]); var ui = ni.selectAll("g.nv-wrap.nv-linePlusBar").data([st]), fi = ui.enter().append("g").attr("class", "nvd3 nv-wrap nv-linePlusBar").append("g"), pt = ui.select("g"); fi.append("g").attr("class", "nv-legendWrap"); ii = fi.append("g").attr("class", "nv-focus"); ii.append("g").attr("class", "nv-x nv-axis"); ii.append("g").attr("class", "nv-y1 nv-axis"); ii.append("g").attr("class", "nv-y2 nv-axis"); ii.append("g").attr("class", "nv-barsWrap"); ii.append("g").attr("class", "nv-linesWrap"); gt = fi.append("g").attr("class", "nv-context"); gt.append("g").attr("class", "nv-x nv-axis"); gt.append("g").attr("class", "nv-y1 nv-axis"); gt.append("g").attr("class", "nv-y2 nv-axis"); gt.append("g").attr("class", "nv-barsWrap"); gt.append("g").attr("class", "nv-linesWrap"); gt.append("g").attr("class", "nv-brushBackground"); gt.append("g").attr("class", "nv-x nv-brush"); ot && (h.width(wt / 2), pt.select(".nv-legendWrap").datum(st.map(function (n) { return n.originalKey = n.originalKey === undefined ? n.key : n.originalKey, n.key = n.originalKey + (n.bar ? " (left axis)" : " (right axis)"), n })).call(h), t.top != h.height() && (t.top = h.height(), dt = (nt || parseInt(ni.style("height")) || 400) - t.top - t.bottom - et), pt.select(".nv-legendWrap").attr("transform", "translate(" + wt / 2 + "," + -t.top + ")")); ui.attr("transform", "translate(" + t.left + "," + t.top + ")"); k.width(wt).height(kt).color(st.map(function (n, t) { return n.color || c(n, t) }).filter(function (n, t) { return !st[t].disabled && st[t].bar })); y.width(wt).height(kt).color(st.map(function (n, t) { return n.color || c(n, t) }).filter(function (n, t) { return !st[t].disabled && !st[t].bar })); li = pt.select(".nv-context .nv-barsWrap").datum(bt.length ? bt : [{ values: [] }]); ai = pt.select(".nv-context .nv-linesWrap").datum(ti[0].disabled ? [{ values: [] }] : ti); pt.select(".nv-context").attr("transform", "translate(0," + (dt + t.bottom + ut.top) + ")"); li.transition().call(k); ai.transition().call(y); u.x(f).on("brush", vi); o && u.extent(o); ei = pt.select(".nv-brushBackground").selectAll("g").data([o || u.extent()]); oi = ei.enter().append("g"); oi.append("rect").attr("class", "left").attr("x", 0).attr("y", 0).attr("height", kt); oi.append("rect").attr("class", "right").attr("x", 0).attr("y", 0).attr("height", kt); si = pt.select(".nv-x.nv-brush").call(u); si.selectAll("rect").attr("height", kt); si.selectAll(".resize").append("path").attr("d", pi); p.ticks(wt / 100).tickSize(-kt, 0); pt.select(".nv-context .nv-x.nv-axis").attr("transform", "translate(0," + ct.range()[0] + ")"); pt.select(".nv-context .nv-x.nv-axis").transition().call(p); d.scale(ct).ticks(kt / 36).tickSize(-wt, 0); pt.select(".nv-context .nv-y1.nv-axis").style("opacity", bt.length ? 1 : 0).attr("transform", "translate(0," + f.range()[0] + ")"); pt.select(".nv-context .nv-y1.nv-axis").transition().call(d); g.scale(vt).ticks(kt / 36).tickSize(bt.length ? 0 : -wt, 0); pt.select(".nv-context .nv-y2.nv-axis").style("opacity", ti.length ? 1 : 0).attr("transform", "translate(" + f.range()[1] + ",0)"); pt.select(".nv-context .nv-y2.nv-axis").transition().call(g); h.dispatch.on("stateChange", function () { n.update() }); s.on("tooltipShow", function (n) { rt && yt(n, yi.parentNode) }); vi() }), n } var i = nv.models.line(), y = nv.models.line(), r = nv.models.historicalBar(), k = nv.models.historicalBar(), l = nv.models.axis(), p = nv.models.axis(), w = nv.models.axis(), b = nv.models.axis(), d = nv.models.axis(), g = nv.models.axis(), h = nv.models.legend(), u = d3.svg.brush(), t = { top: 30, right: 30, bottom: 30, left: 60 }, ut = { top: 0, right: 30, bottom: 20, left: 60 }, ft = null, nt = null, et = 100, tt = function (n) { return n.x }, it = function (n) { return n.y }, c = nv.utils.defaultColor(), ot = !0, e, o = null, rt = !0, st = function (n, t, i) { return "<h3>" + n + "<\/h3><p>" + i + " at " + t + "<\/p>" }, a, f, ht, at, ct, vt, lt = "No Data Available.", s = d3.dispatch("tooltipShow", "tooltipHide", "brush"), v = 0, yt; i.clipEdge(!0); y.interactive(!1); l.orient("bottom").tickPadding(5); w.orient("left"); b.orient("right"); p.orient("bottom").tickPadding(5); d.orient("left"); g.orient("right"); yt = function (t, r) { e && (t.pointIndex += Math.ceil(e[0])); var u = t.pos[0] + (r.offsetLeft || 0), f = t.pos[1] + (r.offsetTop || 0), o = l.tickFormat()(i.x()(t.point, t.pointIndex)), s = (t.series.bar ? w : b).tickFormat()(i.y()(t.point, t.pointIndex)), h = st(t.series.key, o, s, t, n); nv.tooltip.show([u, f], h, t.value < 0 ? "n" : "s", null, r) }; i.dispatch.on("elementMouseover.tooltip", function (n) { n.pos = [n.pos[0] + t.left, n.pos[1] + t.top]; s.tooltipShow(n) }); i.dispatch.on("elementMouseout.tooltip", function (n) { s.tooltipHide(n) }); r.dispatch.on("elementMouseover.tooltip", function (n) { n.pos = [n.pos[0] + t.left, n.pos[1] + t.top]; s.tooltipShow(n) }); r.dispatch.on("elementMouseout.tooltip", function (n) { s.tooltipHide(n) }); s.on("tooltipHide", function () { rt && nv.tooltip.cleanup() }); return n.dispatch = s, n.legend = h, n.lines = i, n.lines2 = y, n.bars = r, n.bars2 = k, n.xAxis = l, n.x2Axis = p, n.y1Axis = w, n.y2Axis = b, n.y3Axis = d, n.y4Axis = g, d3.rebind(n, i, "defined", "size", "clipVoronoi", "interpolate"), n.options = nv.utils.optionsFunc.bind(n), n.x = function (t) { return arguments.length ? (tt = t, i.x(t), r.x(t), n) : tt }, n.y = function (t) { return arguments.length ? (it = t, i.y(t), r.y(t), n) : it }, n.margin = function (i) { return arguments.length ? (t.top = typeof i.top != "undefined" ? i.top : t.top, t.right = typeof i.right != "undefined" ? i.right : t.right, t.bottom = typeof i.bottom != "undefined" ? i.bottom : t.bottom, t.left = typeof i.left != "undefined" ? i.left : t.left, n) : t }, n.width = function (t) { return arguments.length ? (ft = t, n) : ft }, n.height = function (t) { return arguments.length ? (nt = t, n) : nt }, n.color = function (t) { return arguments.length ? (c = nv.utils.getColor(t), h.color(c), n) : c }, n.showLegend = function (t) { return arguments.length ? (ot = t, n) : ot }, n.tooltips = function (t) { return arguments.length ? (rt = t, n) : rt }, n.tooltipContent = function (t) { return arguments.length ? (st = t, n) : st }, n.noData = function (t) { return arguments.length ? (lt = t, n) : lt }, n.brushExtent = function (t) { return arguments.length ? (o = t, n) : o }, n };
//# sourceMappingURL=linePlusBarWithFocusChart.min.js.map