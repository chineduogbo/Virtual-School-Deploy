nv.models.multiBarTimeSeries = function () { "use strict"; function n(nt) { return nt.each(function (n) { var st = y - f.left - f.right, ht = p - f.top - f.bottom, lt = d3.select(this), rt, it, tt, et, ot; i && (n = d3.layout.stack().offset("zero").values(function (n) { return n.values }).y(u)(n)); n.forEach(function (n, t) { n.values.forEach(function (n) { n.series = t }) }); rt = a && v ? [] : n.map(function (n) { return n.values.map(function (n, t) { return { x: e(n, t), y: u(n, t), y0: n.y0 } }) }); r.domain(a || d3.extent(d3.merge(rt).map(function (n) { return n.x }))).range(k || [0, st]); t.domain(v || d3.extent(d3.merge(rt).map(function (n) { return n.y + (i ? n.y0 : 0) }).concat(w))).range(d || [ht, 0]); r.domain()[0] === r.domain()[1] && (r.domain()[0] ? r.domain([r.domain()[0] - r.domain()[0] * .01, r.domain()[1] + r.domain()[1] * .01]) : r.domain([-1, 1])); t.domain()[0] === t.domain()[1] && (t.domain()[0] ? t.domain([t.domain()[0] + t.domain()[0] * .01, t.domain()[1] - t.domain()[1] * .01]) : t.domain([-1, 1])); g = g || r; o = o || t; var ut = lt.selectAll("g.nv-wrap.nv-multibar").data([n]), ct = ut.enter().append("g").attr("class", "nvd3 nv-wrap nv-multibar"), at = ct.append("defs"), vt = ct.append("g"), yt = ut.select("g"); for (vt.append("g").attr("class", "nv-groups"), ut.attr("transform", "translate(" + f.left + "," + f.top + ")"), at.append("clipPath").attr("id", "nv-edge-clip-" + s).append("rect"), ut.select("#nv-edge-clip-" + s + " rect").attr("width", st).attr("height", ht), yt.attr("clip-path", b ? "url(#nv-edge-clip-" + s + ")" : ""), it = ut.select(".nv-groups").selectAll(".nv-group").data(function (n) { return n }, function (n) { return n.key }), it.enter().append("g").style("stroke-opacity", 1e-6).style("fill-opacity", 1e-6), d3.transition(it.exit()).selectAll("rect.nv-bar").delay(function (t, i) { return i * h / n[0].values.length }).attr("y", function (n) { return i ? o(n.y0) : o(0) }).attr("height", 0).remove(), it.attr("class", function (n, t) { return "nv-group nv-series-" + t }).classed("hover", function (n) { return n.hover }).style("fill", function (n, t) { return l(n, t) }).style("stroke", function (n, t) { return l(n, t) }), d3.transition(it).style("stroke-opacity", 1).style("fill-opacity", .75), tt = it.selectAll("rect.nv-bar").data(function (n) { return n.values }), tt.exit().remove(), et = 0, ot = 0; ot < rt.length; ot += 1) et = Math.max(rt[ot].length, et); var ft = st / et - .1, nt = ft / n.length, pt = tt.enter().append("rect").attr("class", function (n, t) { return u(n, t) < 0 ? "nv-bar negative" : "nv-bar positive" }).attr("x", function (n, t, r) { return i ? 0 : t * ft + r * nt }).attr("y", function (n) { return o(i ? n.y0 : 0) }).attr("height", 0).attr("width", i ? ft : nt); tt.on("mouseover", function (f, o) { d3.select(this).classed("hover", !0); c.elementMouseover({ value: u(f, o), point: f, series: n[f.series], pos: [r(e(f, o)) + nt * (i ? n.length / 2 : f.series + .5) / n.length, t(u(f, o) + (i ? f.y0 : 0))], pointIndex: o, seriesIndex: f.series, e: d3.event }) }).on("mouseout", function (t, i) { d3.select(this).classed("hover", !1); c.elementMouseout({ value: u(t, i), point: t, series: n[t.series], pointIndex: i, seriesIndex: t.series, e: d3.event }) }).on("click", function (f, o) { c.elementClick({ value: u(f, o), point: f, series: n[f.series], pos: [r(e(f, o)) + nt * (i ? n.length / 2 : f.series + .5) / n.length, t(u(f, o) + (i ? f.y0 : 0))], pointIndex: o, seriesIndex: f.series, e: d3.event }); d3.event.stopPropagation() }).on("dblclick", function (f, o) { c.elementDblClick({ value: u(f, o), point: f, series: n[f.series], pos: [r(e(f, o)) + nt * (i ? n.length / 2 : f.series + .5) / n.length, t(u(f, o) + (i ? f.y0 : 0))], pointIndex: o, seriesIndex: f.series, e: d3.event }); d3.event.stopPropagation() }); tt.attr("class", function (n, t) { return u(n, t) < 0 ? "nv-bar negative" : "nv-bar positive" }).attr("transform", function (n, t) { return "translate(" + r(e(n, t)) + ",0)" }); i ? d3.transition(tt).delay(function (t, i) { return i * h / n[0].values.length }).attr("y", function (n, r) { return t(u(n, r) + (i ? n.y0 : 0)) }).attr("height", function (n) { return Math.abs(t(n.y + (i ? n.y0 : 0)) - t(i ? n.y0 : 0)) }).each("end", function () { d3.transition(d3.select(this)).attr("x", function (n, t) { return i ? 0 : t * ft + j * nt }).attr("width", i ? ft : nt) }) : d3.transition(tt).delay(function (t, i) { return i * h / n[0].values.length }).attr("x", function (n) { return n.series * nt }).attr("width", nt).each("end", function () { d3.transition(d3.select(this)).attr("y", function (n, i) { return u(n, i) < 0 ? t(0) : t(u(n, i)) }).attr("height", function (n, i) { return Math.abs(t(u(n, i)) - t(0)) }) }); g = r.copy(); o = t.copy() }), n } var f = { top: 0, right: 0, bottom: 0, left: 0 }, y = 960, p = 500, r = d3.time.scale(), t = d3.scale.linear(), s = Math.floor(Math.random() * 1e4), e = function (n) { return n.x }, u = function (n) { return n.y }, w = [0], b = !0, i = !1, l = nv.utils.defaultColor(), h = 1200, a, v, k, d, c = d3.dispatch("chartClick", "elementClick", "elementDblClick", "elementMouseover", "elementMouseout"), g, o; return n.dispatch = c, n.options = nv.utils.optionsFunc.bind(n), n.x = function (t) { return arguments.length ? (e = t, n) : e }, n.y = function (t) { return arguments.length ? (u = t, n) : u }, n.margin = function (t) { return arguments.length ? (f.top = typeof t.top != "undefined" ? t.top : f.top, f.right = typeof t.right != "undefined" ? t.right : f.right, f.bottom = typeof t.bottom != "undefined" ? t.bottom : f.bottom, f.left = typeof t.left != "undefined" ? t.left : f.left, n) : f }, n.width = function (t) { return arguments.length ? (y = t, n) : y }, n.height = function (t) { return arguments.length ? (p = t, n) : p }, n.xScale = function (t) { return arguments.length ? (r = t, n) : r }, n.yScale = function (i) { return arguments.length ? (t = i, n) : t }, n.xDomain = function (t) { return arguments.length ? (a = t, n) : a }, n.yDomain = function (t) { return arguments.length ? (v = t, n) : v }, n.xRange = function (t) { return arguments.length ? (k = t, n) : k }, n.yRange = function (t) { return arguments.length ? (d = t, n) : d }, n.forceY = function (t) { return arguments.length ? (w = t, n) : w }, n.stacked = function (t) { return arguments.length ? (i = t, n) : i }, n.clipEdge = function (t) { return arguments.length ? (b = t, n) : b }, n.color = function (t) { return arguments.length ? (l = nv.utils.getColor(t), n) : l }, n.id = function (t) { return arguments.length ? (s = t, n) : s }, n.delay = function (t) { return arguments.length ? (h = t, n) : h }, n };
//# sourceMappingURL=multiBarTimeSeries.min.js.map