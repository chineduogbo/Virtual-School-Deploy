nv.models.parallelCoordinates = function () { "use strict"; function n(h) { return h.each(function (h) { function b(n) { return y(r.map(function (t) { return [u(t), i[t](n[t])] })) } function rt() { var n = r.filter(function (n) { return !i[n].brush.empty() }), t = n.map(function (n) { return i[n].brush.extent() }); e = []; n.forEach(function (n, i) { e[i] = { dimension: n, extent: t[i] } }); f = []; w.style("display", function (i) { var r = n.every(function (n, r) { return t[r][0] <= i[n] && i[n] <= t[r][1] }); return r && f.push(i), r ? null : "none" }); c.brush({ filters: e, active: f }) } var k = o - t.left - t.right, d = s - t.top - t.bottom, g = d3.select(this), y, p, it, w, v; f = h; n.update = function () { }; u.rangePoints([0, k], 1).domain(r); r.forEach(function (n) { return i[n] = d3.scale.linear().domain(d3.extent(h, function (t) { return +t[n] })).range([d, 0]), i[n].brush = d3.svg.brush().y(i[n]).on("brush", rt), n != "name" }); var l = g.selectAll("g.nv-wrap.nv-parallelCoordinates").data([h]), nt = l.enter().append("g").attr("class", "nvd3 nv-wrap nv-parallelCoordinates"), a = nt.append("g"), tt = l.select("g"); a.append("g").attr("class", "nv-parallelCoordinatesWrap"); l.attr("transform", "translate(" + t.left + "," + t.top + ")"); y = d3.svg.line(); p = d3.svg.axis().orient("left"); it = a.append("g").attr("class", "background").selectAll("path").data(h).enter().append("path").attr("d", b); w = a.append("g").attr("class", "foreground").selectAll("path").data(h).enter().append("path").attr("d", b); v = tt.selectAll(".dimension").data(r).enter().append("g").attr("class", "dimension").attr("transform", function (n) { return "translate(" + u(n) + ",0)" }); v.append("g").attr("class", "axis").each(function (n) { d3.select(this).call(p.scale(i[n])) }).append("text").attr("text-anchor", "middle").attr("y", -9).text(String); v.append("g").attr("class", "brush").each(function (n) { d3.select(this).call(i[n].brush) }).selectAll("rect").attr("x", -8).attr("width", 16) }), n } var t = { top: 30, right: 10, bottom: 10, left: 10 }, o = 960, s = 500, u = d3.scale.ordinal(), i = {}, r = [], h = nv.utils.getColor(d3.scale.category20c().range()), l = function (n) { return n }, e = [], f = [], c = d3.dispatch("brush"); return n.dispatch = c, n.options = nv.utils.optionsFunc.bind(n), n.margin = function (i) { return arguments.length ? (t.top = typeof i.top != "undefined" ? i.top : t.top, t.right = typeof i.right != "undefined" ? i.right : t.right, t.bottom = typeof i.bottom != "undefined" ? i.bottom : t.bottom, t.left = typeof i.left != "undefined" ? i.left : t.left, n) : t }, n.width = function (t) { return arguments.length ? (o = t, n) : o }, n.height = function (t) { return arguments.length ? (s = t, n) : s }, n.color = function (t) { return arguments.length ? (h = nv.utils.getColor(t), n) : h }, n.xScale = function (t) { return arguments.length ? (u = t, n) : u }, n.yScale = function (t) { return arguments.length ? (i = t, n) : i }, n.dimensions = function (t) { return arguments.length ? (r = t, n) : r }, n.filters = function () { return e }, n.active = function () { return f }, n };
//# sourceMappingURL=parallelCoordinates.min.js.map