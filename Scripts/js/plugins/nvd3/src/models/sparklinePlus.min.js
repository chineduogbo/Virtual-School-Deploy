nv.models.sparklinePlus = function () { "use strict"; function n(y) { return y.each(function (p) { function et() { if (!f) { var n = w.selectAll(".nv-hoverValue").data(r), u = n.enter().append("g").attr("class", "nv-hoverValue").style("stroke-opacity", 0).style("fill-opacity", 0); (n.exit().transition().duration(250).style("stroke-opacity", 0).style("fill-opacity", 0).remove(), n.attr("transform", function (n) { return "translate(" + h(i.x()(p[n], n)) + ",0)" }).transition().duration(250).style("stroke-opacity", 1).style("fill-opacity", 1), r.length) && (u.append("line").attr("x1", 0).attr("y1", -t.top).attr("x2", 0).attr("y2", d), u.append("text").attr("class", "nv-xValue").attr("x", -6).attr("y", -t.top).attr("text-anchor", "end").attr("dy", ".9em"), w.select(".nv-hoverValue .nv-xValue").text(c(i.x()(p[r[0]], r[0]))), u.append("text").attr("class", "nv-yValue").attr("x", 6).attr("y", -t.top).attr("text-anchor", "start").attr("dy", ".9em"), w.select(".nv-hoverValue .nv-yValue").text(e(i.y()(p[r[0]], r[0])))) } } function st() { function u(n, t) { for (var u = Math.abs(i.x()(n[0], 0) - t), f = 0, r = 0; r < n.length; r++) Math.abs(i.x()(n[r], r) - t) < u && (u = Math.abs(i.x()(n[r], r) - t), f = r); return f } if (!f) { var n = d3.mouse(this)[0] - t.left; r = [u(p, Math.round(h.invert(n)))]; et() } } var b = d3.select(this), k = (o || parseInt(b.style("width")) || 960) - t.left - t.right, d = (s || parseInt(b.style("height")) || 400) - t.top - t.bottom, nt, tt, ut, ft, rt; if (n.update = function () { n(y) }, n.container = this, p && p.length) b.selectAll(".nv-noData").remove(); else return nt = b.selectAll(".nv-noData").data([a]), nt.enter().append("text").attr("class", "nvd3 nv-noData").attr("dy", "-.7em").style("text-anchor", "middle"), nt.attr("x", t.left + k / 2).attr("y", t.top + d / 2).text(function (n) { return n }), n; tt = i.y()(p[p.length - 1], p.length - 1); h = i.xScale(); v = i.yScale(); var it = b.selectAll("g.nv-wrap.nv-sparklineplus").data([p]), ot = it.enter().append("g").attr("class", "nvd3 nv-wrap nv-sparklineplus"), g = ot.append("g"), w = it.select("g"); g.append("g").attr("class", "nv-sparklineWrap"); g.append("g").attr("class", "nv-valueWrap"); g.append("g").attr("class", "nv-hoverArea"); it.attr("transform", "translate(" + t.left + "," + t.top + ")"); ut = w.select(".nv-sparklineWrap"); i.width(k).height(d); ut.call(i); ft = w.select(".nv-valueWrap"); rt = ft.selectAll(".nv-currentValue").data([tt]); rt.enter().append("text").attr("class", "nv-currentValue").attr("dx", u ? -8 : 8).attr("dy", ".9em").style("text-anchor", u ? "end" : "start"); rt.attr("x", k + (u ? t.right : 0)).attr("y", l ? function (n) { return v(n) } : 0).style("fill", i.color()(p[p.length - 1], p.length - 1)).text(e(tt)); g.select(".nv-hoverArea").append("rect").on("mousemove", st).on("click", function () { f = !f }).on("mouseout", function () { r = []; et() }); w.select(".nv-hoverArea rect").attr("transform", function () { return "translate(" + -t.left + "," + -t.top + ")" }).attr("width", k + t.left + t.right).attr("height", d + t.top) }), n } var i = nv.models.sparkline(), t = { top: 15, right: 100, bottom: 10, left: 50 }, o = null, s = null, h, v, r = [], f = !1, c = d3.format(",r"), e = d3.format(",.2f"), y = !0, l = !0, u = !1, a = "No Data Available."; return n.sparkline = i, d3.rebind(n, i, "x", "y", "xScale", "yScale", "color"), n.options = nv.utils.optionsFunc.bind(n), n.margin = function (i) { return arguments.length ? (t.top = typeof i.top != "undefined" ? i.top : t.top, t.right = typeof i.right != "undefined" ? i.right : t.right, t.bottom = typeof i.bottom != "undefined" ? i.bottom : t.bottom, t.left = typeof i.left != "undefined" ? i.left : t.left, n) : t }, n.width = function (t) { return arguments.length ? (o = t, n) : o }, n.height = function (t) { return arguments.length ? (s = t, n) : s }, n.xTickFormat = function (t) { return arguments.length ? (c = t, n) : c }, n.yTickFormat = function (t) { return arguments.length ? (e = t, n) : e }, n.showValue = function (t) { return arguments.length ? (y = t, n) : y }, n.alignValue = function (t) { return arguments.length ? (l = t, n) : l }, n.rightAlignValue = function (t) { return arguments.length ? (u = t, n) : u }, n.noData = function (t) { return arguments.length ? (a = t, n) : a }, n };
//# sourceMappingURL=sparklinePlus.min.js.map