nv.models.indentedTree = function () { "use strict"; function n(t) { return t.each(function (t) { function rt(t, i, r) { if (d3.event.stopPropagation(), d3.event.shiftKey && !r) return d3.event.shiftKey = !1, t.values && t.values.forEach(function (n) { (n.values || n._values) && rt(n, 0, !0) }), !0; if (!ht(t)) return !0; t.values ? (t._values = t.values, t.values = null) : (t.values = t._values, t._values = null); n.update() } function y(n) { return n._values && n._values.length ? a : n.values && n.values.length ? v : "" } function ut(n) { return n._values && n._values.length } function ht(n) { var t = n.values || n._values; return t && t.length } var b = 1, ft = d3.select(this), k = d3.layout.tree().children(function (n) { return n.values }).size([r, c]), nt, tt, p, o, it; n.update = function () { ft.transition().duration(600).call(n) }; t[0] || (t[0] = { key: h }); var d = k.nodes(t[0]), g = d3.select(this).selectAll("div").data([[d]]), et = g.enter().append("div").attr("class", "nvd3 nv-wrap nv-indentedtree"), ot = et.append("table"), st = g.select("table").attr("width", "100%").attr("class", l); s && (nt = ot.append("thead"), tt = nt.append("tr"), u.forEach(function (n) { tt.append("th").attr("width", n.width ? n.width : "10%").style("text-align", n.type == "numeric" ? "right" : "left").append("span").text(n.label) })); p = st.selectAll("tbody").data(function (n) { return n }); p.enter().append("tbody"); b = d3.max(d, function (n) { return n.depth }); k.size([r, b * c]); o = p.selectAll("tr").data(function (n) { return n.filter(function (n) { return i && !n.children ? i(n) : !0 }) }, function (n) { return n.id || n.id || ++w }); o.exit().remove(); o.select("img.nv-treeicon").attr("src", y).classed("folded", ut); it = o.enter().append("tr"); u.forEach(function (n, t) { var r = it.append("td").style("padding-left", function (n) { return (t ? 0 : n.depth * c + 12 + (y(n) ? 0 : 16)) + "px" }, "important").style("text-align", n.type == "numeric" ? "right" : "left"); if (t == 0) r.append("img").classed("nv-treeicon", !0).classed("nv-folded", ut).attr("src", y).style("width", "14px").style("height", "14px").style("padding", "0 1px").style("display", function (n) { return y(n) ? "inline-block" : "none" }).on("click", rt); r.each(function (i) { !t && e(i) ? d3.select(this).append("a").attr("href", e).attr("class", d3.functor(n.classes)).append("span") : d3.select(this).append("span"); d3.select(this).select("span").attr("class", d3.functor(n.classes)).text(function (t) { return n.format ? n.format(t) : t[n.key] || "-" }) }); n.showCount && (r.append("span").attr("class", "nv-childrenCount"), o.selectAll("span.nv-childrenCount").text(function (n) { return n.values && n.values.length || n._values && n._values.length ? "(" + (n.values && n.values.filter(function (n) { return i ? i(n) : !0 }).length || n._values && n._values.filter(function (n) { return i ? i(n) : !0 }).length || 0) + ")" : "" })) }); o.order().on("click", function (n) { f.elementClick({ row: this, data: n, pos: [n.x, n.y] }) }).on("dblclick", function (n) { f.elementDblclick({ row: this, data: n, pos: [n.x, n.y] }) }).on("mouseover", function (n) { f.elementMouseover({ row: this, data: n, pos: [n.x, n.y] }) }).on("mouseout", function (n) { f.elementMouseout({ row: this, data: n, pos: [n.x, n.y] }) }) }), n } var t = { top: 0, right: 0, bottom: 0, left: 0 }, y = 960, r = 500, o = nv.utils.defaultColor(), p = Math.floor(Math.random() * 1e4), s = !0, i = !1, h = "No Data Available.", c = 20, u = [{ key: "key", label: "Name", type: "text" }], l = null, a = "images/grey-plus.png", v = "images/grey-minus.png", f = d3.dispatch("elementClick", "elementDblclick", "elementMouseover", "elementMouseout"), e = function (n) { return n.url }, w = 0; return n.options = nv.utils.optionsFunc.bind(n), n.margin = function (i) { return arguments.length ? (t.top = typeof i.top != "undefined" ? i.top : t.top, t.right = typeof i.right != "undefined" ? i.right : t.right, t.bottom = typeof i.bottom != "undefined" ? i.bottom : t.bottom, t.left = typeof i.left != "undefined" ? i.left : t.left, n) : t }, n.width = function (t) { return arguments.length ? (y = t, n) : y }, n.height = function (t) { return arguments.length ? (r = t, n) : r }, n.color = function (t) { return arguments.length ? (o = nv.utils.getColor(t), scatter.color(o), n) : o }, n.id = function (t) { return arguments.length ? (p = t, n) : p }, n.header = function (t) { return arguments.length ? (s = t, n) : s }, n.noData = function (t) { return arguments.length ? (h = t, n) : h }, n.filterZero = function (t) { return arguments.length ? (i = t, n) : i }, n.columns = function (t) { return arguments.length ? (u = t, n) : u }, n.tableClass = function (t) { return arguments.length ? (l = t, n) : l }, n.iconOpen = function (t) { return arguments.length ? (a = t, n) : a }, n.iconClose = function (t) { return arguments.length ? (v = t, n) : v }, n.getUrl = function (t) { return arguments.length ? (e = t, n) : e }, n };
//# sourceMappingURL=indentedTree.min.js.map