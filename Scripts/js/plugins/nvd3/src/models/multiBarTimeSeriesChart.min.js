nv.models.multiBarTimeSeriesChart = function () { "use strict"; function n(o) { return o.each(function (nt) { var rt = d3.select(this), lt = this, it = (v || parseInt(rt.style("width")) || 960) - t.left - t.right, ut = (h || parseInt(rt.style("height")) || 400) - t.top - t.bottom, ht, ot, ct, st; if (n.update = function () { o.transition().call(n) }, n.container = this, nt && nt.length && nt.filter(function (n) { return n.values.length }).length) rt.selectAll(".nv-noData").remove(); else return ht = rt.selectAll(".nv-noData").data([k]), ht.enter().append("text").attr("class", "nvd3 nv-noData").attr("dy", "-.7em").style("text-anchor", "middle"), ht.attr("x", t.left + it / 2).attr("y", t.top + ut / 2).text(function (n) { return n }), n; d = i.xScale(); b = i.yScale(); var et = rt.selectAll("g.nv-wrap.nv-multiBarWithLegend").data([nt]), ft = et.enter().append("g").attr("class", "nvd3 nv-wrap nv-multiBarWithLegend").append("g"), tt = et.select("g"); ft.append("g").attr("class", "nv-x nv-axis"); ft.append("g").attr("class", "nv-y nv-axis"); ft.append("g").attr("class", "nv-barsWrap"); ft.append("g").attr("class", "nv-legendWrap"); ft.append("g").attr("class", "nv-controlsWrap"); p && (r.width(it / 2), tt.select(".nv-legendWrap").datum(nt).call(r), t.top != r.height() && (t.top = r.height(), ut = (h || parseInt(rt.style("height")) || 400) - t.top - t.bottom), tt.select(".nv-legendWrap").attr("transform", "translate(" + it / 2 + "," + -t.top + ")")); y && (ot = [{ key: "Grouped", disabled: i.stacked() }, { key: "Stacked", disabled: !i.stacked() }], a.width(180).color(["#444", "#444", "#444"]), tt.select(".nv-controlsWrap").datum(ot).attr("transform", "translate(0," + -t.top + ")").call(a)); et.attr("transform", "translate(" + t.left + "," + t.top + ")"); i.width(it).height(ut).color(nt.map(function (n, t) { return n.color || c(n, t) }).filter(function (n, t) { return !nt[t].disabled })); ct = tt.select(".nv-barsWrap").datum(nt.filter(function (n) { return !n.disabled })); d3.transition(ct).call(i); u.scale(d).ticks(it / 100).tickSize(-ut, 0); tt.select(".nv-x.nv-axis").attr("transform", "translate(0," + b.range()[0] + ")"); d3.transition(tt.select(".nv-x.nv-axis")).call(u); st = tt.select(".nv-x.nv-axis > g").selectAll("g"); st.selectAll("line, text").style("opacity", 1); w && st.filter(function (n, t) { return t % Math.ceil(nt[0].values.length / (it / 100)) != 0 }).selectAll("text, line").style("opacity", 0); e && st.selectAll("text").attr("transform", function () { return "rotate(" + e + " 0,0)" }).attr("text-transform", e > 0 ? "start" : "end"); f.scale(b).ticks(ut / 36).tickSize(-it, 0); d3.transition(tt.select(".nv-y.nv-axis")).call(f); r.dispatch.on("legendClick", function (t) { t.disabled = !t.disabled; nt.filter(function (n) { return !n.disabled }).length || nt.map(function (n) { return n.disabled = !1, et.selectAll(".nv-series").classed("disabled", !1), n }); o.transition().call(n) }); a.dispatch.on("legendClick", function (t) { if (t.disabled) { ot = ot.map(function (n) { return n.disabled = !0, n }); t.disabled = !1; switch (t.key) { case "Grouped": i.stacked(!1); break; case "Stacked": i.stacked(!0) } o.transition().call(n) } }); s.on("tooltipShow", function (n) { l && g(n, lt.parentNode) }) }), n } var i = nv.models.multiBarTimeSeries(), u = nv.models.axis(), f = nv.models.axis(), r = nv.models.legend(), a = nv.models.legend(), t = { top: 30, right: 20, bottom: 50, left: 60 }, v = null, h = null, c = nv.utils.defaultColor(), y = !0, p = !0, w = !0, e = 0, l = !0, o = function (n, t, i) { return "<h3>" + n + "<\/h3><p>" + i + " on " + t + "<\/p>" }, d, b, k = "No Data Available.", s = d3.dispatch("tooltipShow", "tooltipHide"), g; i.stacked(!1); u.orient("bottom").tickPadding(7).highlightZero(!1).showMaxMin(!1); f.orient("left").tickFormat(d3.format(",.1f")); g = function (t, r) { var e = t.pos[0] + (r.offsetLeft || 0), s = t.pos[1] + (r.offsetTop || 0), h = u.tickFormat()(i.x()(t.point, t.pointIndex)), c = f.tickFormat()(i.y()(t.point, t.pointIndex)), l = o(t.series.key, h, c, t, n); nv.tooltip.show([e, s], l, t.value < 0 ? "n" : "s", null, r) }; i.dispatch.on("elementMouseover.tooltip", function (n) { n.pos = [n.pos[0] + t.left, n.pos[1] + t.top]; s.tooltipShow(n) }); i.dispatch.on("elementMouseout.tooltip", function (n) { s.tooltipHide(n) }); s.on("tooltipHide", function () { l && nv.tooltip.cleanup() }); return n.dispatch = s, n.multibar = i, n.legend = r, n.xAxis = u, n.yAxis = f, d3.rebind(n, i, "x", "y", "xDomain", "yDomain", "xRange", "yRange", "forceX", "forceY", "clipEdge", "id", "stacked", "delay"), n.options = nv.utils.optionsFunc.bind(n), n.margin = function (i) { return arguments.length ? (t.top = typeof i.top != "undefined" ? i.top : t.top, t.right = typeof i.right != "undefined" ? i.right : t.right, t.bottom = typeof i.bottom != "undefined" ? i.bottom : t.bottom, t.left = typeof i.left != "undefined" ? i.left : t.left, n) : t }, n.width = function (t) { return arguments.length ? (v = t, n) : v }, n.height = function (t) { return arguments.length ? (h = t, n) : h }, n.color = function (t) { return arguments.length ? (c = nv.utils.getColor(t), r.color(c), n) : c }, n.showControls = function (t) { return arguments.length ? (y = t, n) : y }, n.showLegend = function (t) { return arguments.length ? (p = t, n) : p }, n.reduceXTicks = function (t) { return arguments.length ? (w = t, n) : w }, n.rotateLabels = function (t) { return arguments.length ? (e = t, n) : e }, n.tooltip = function (t) { return arguments.length ? (o = t, n) : o }, n.tooltips = function (t) { return arguments.length ? (l = t, n) : l }, n.tooltipContent = function (t) { return arguments.length ? (o = t, n) : o }, n.noData = function (t) { return arguments.length ? (k = t, n) : k }, n };
//# sourceMappingURL=multiBarTimeSeriesChart.min.js.map