nv.models.linePlusBarChart = function () { "use strict"; function n(w) { return w.each(function (w) { var ft = d3.select(this), vt = this, d = (y || parseInt(ft.style("width")) || 960) - t.left - t.right, rt = (a || parseInt(ft.style("height")) || 400) - t.top - t.bottom, ot, ht, st, ut, lt, at; if (n.update = function () { ft.transition().call(n) }, u.disabled = w.map(function (n) { return !!n.disabled }), !o) { o = {}; for (ot in u) o[ot] = u[ot] instanceof Array ? u[ot].slice(0) : u[ot] } if (w && w.length && w.filter(function (n) { return n.values.length }).length) ft.selectAll(".nv-noData").remove(); else return ht = ft.selectAll(".nv-noData").data([k]), ht.enter().append("text").attr("class", "nvd3 nv-noData").attr("dy", "-.7em").style("text-anchor", "middle"), ht.attr("x", t.left + d / 2).attr("y", t.top + rt / 2).text(function (n) { return n }), n; st = w.filter(function (n) { return !n.disabled && n.bar }); ut = w.filter(function (n) { return !n.bar }); nt = ut.filter(function (n) { return !n.disabled }).length && ut.filter(function (n) { return !n.disabled })[0].values.length ? i.xScale() : r.xScale(); b = r.yScale(); tt = i.yScale(); var ct = d3.select(this).selectAll("g.nv-wrap.nv-linePlusBar").data([w]), et = ct.enter().append("g").attr("class", "nvd3 nv-wrap nv-linePlusBar").append("g"), g = ct.select("g"); et.append("g").attr("class", "nv-x nv-axis"); et.append("g").attr("class", "nv-y1 nv-axis"); et.append("g").attr("class", "nv-y2 nv-axis"); et.append("g").attr("class", "nv-barsWrap"); et.append("g").attr("class", "nv-linesWrap"); et.append("g").attr("class", "nv-legendWrap"); p && (e.width(d / 2), g.select(".nv-legendWrap").datum(w.map(function (n) { return n.originalKey = n.originalKey === undefined ? n.key : n.originalKey, n.key = n.originalKey + (n.bar ? " (left axis)" : " (right axis)"), n })).call(e), t.top != e.height() && (t.top = e.height(), rt = (a || parseInt(ft.style("height")) || 400) - t.top - t.bottom), g.select(".nv-legendWrap").attr("transform", "translate(" + d / 2 + "," + -t.top + ")")); ct.attr("transform", "translate(" + t.left + "," + t.top + ")"); i.width(d).height(rt).color(w.map(function (n, t) { return n.color || l(n, t) }).filter(function (n, t) { return !w[t].disabled && !w[t].bar })); r.width(d).height(rt).color(w.map(function (n, t) { return n.color || l(n, t) }).filter(function (n, t) { return !w[t].disabled && w[t].bar })); lt = g.select(".nv-barsWrap").datum(st.length ? st : [{ values: [] }]); at = g.select(".nv-linesWrap").datum(ut[0] && !ut[0].disabled ? ut : [{ values: [] }]); d3.transition(lt).call(r); d3.transition(at).call(i); s.scale(nt).ticks(d / 100).tickSize(-rt, 0); g.select(".nv-x.nv-axis").attr("transform", "translate(0," + b.range()[0] + ")"); d3.transition(g.select(".nv-x.nv-axis")).call(s); h.scale(b).ticks(rt / 36).tickSize(-d, 0); d3.transition(g.select(".nv-y1.nv-axis")).style("opacity", st.length ? 1 : 0).call(h); c.scale(tt).ticks(rt / 36).tickSize(st.length ? 0 : -d, 0); g.select(".nv-y2.nv-axis").style("opacity", ut.length ? 1 : 0).attr("transform", "translate(" + d + ",0)"); d3.transition(g.select(".nv-y2.nv-axis")).call(c); e.dispatch.on("stateChange", function (t) { u = t; f.stateChange(u); n.update() }); f.on("tooltipShow", function (n) { v && it(n, vt.parentNode) }); f.on("changeState", function (t) { typeof t.disabled != "undefined" && (w.forEach(function (n, i) { n.disabled = t.disabled[i] }), u.disabled = t.disabled); n.update() }) }), n } var i = nv.models.line(), r = nv.models.historicalBar(), s = nv.models.axis(), h = nv.models.axis(), c = nv.models.axis(), e = nv.models.legend(), t = { top: 30, right: 60, bottom: 50, left: 60 }, y = null, a = null, d = function (n) { return n.x }, g = function (n) { return n.y }, l = nv.utils.defaultColor(), p = !0, v = !0, w = function (n, t, i) { return "<h3>" + n + "<\/h3><p>" + i + " at " + t + "<\/p>" }, nt, b, tt, u = {}, o = null, k = "No Data Available.", f = d3.dispatch("tooltipShow", "tooltipHide", "stateChange", "changeState"), it; r.padData(!0); i.clipEdge(!1).padData(!0); s.orient("bottom").tickPadding(7).highlightZero(!1); h.orient("left"); c.orient("right"); it = function (t, r) { var u = t.pos[0] + (r.offsetLeft || 0), f = t.pos[1] + (r.offsetTop || 0), e = s.tickFormat()(i.x()(t.point, t.pointIndex)), o = (t.series.bar ? h : c).tickFormat()(i.y()(t.point, t.pointIndex)), l = w(t.series.key, e, o, t, n); nv.tooltip.show([u, f], l, t.value < 0 ? "n" : "s", null, r) }; i.dispatch.on("elementMouseover.tooltip", function (n) { n.pos = [n.pos[0] + t.left, n.pos[1] + t.top]; f.tooltipShow(n) }); i.dispatch.on("elementMouseout.tooltip", function (n) { f.tooltipHide(n) }); r.dispatch.on("elementMouseover.tooltip", function (n) { n.pos = [n.pos[0] + t.left, n.pos[1] + t.top]; f.tooltipShow(n) }); r.dispatch.on("elementMouseout.tooltip", function (n) { f.tooltipHide(n) }); f.on("tooltipHide", function () { v && nv.tooltip.cleanup() }); return n.dispatch = f, n.legend = e, n.lines = i, n.bars = r, n.xAxis = s, n.y1Axis = h, n.y2Axis = c, d3.rebind(n, i, "defined", "size", "clipVoronoi", "interpolate"), n.options = nv.utils.optionsFunc.bind(n), n.x = function (t) { return arguments.length ? (d = t, i.x(t), r.x(t), n) : d }, n.y = function (t) { return arguments.length ? (g = t, i.y(t), r.y(t), n) : g }, n.margin = function (i) { return arguments.length ? (t.top = typeof i.top != "undefined" ? i.top : t.top, t.right = typeof i.right != "undefined" ? i.right : t.right, t.bottom = typeof i.bottom != "undefined" ? i.bottom : t.bottom, t.left = typeof i.left != "undefined" ? i.left : t.left, n) : t }, n.width = function (t) { return arguments.length ? (y = t, n) : y }, n.height = function (t) { return arguments.length ? (a = t, n) : a }, n.color = function (t) { return arguments.length ? (l = nv.utils.getColor(t), e.color(l), n) : l }, n.showLegend = function (t) { return arguments.length ? (p = t, n) : p }, n.tooltips = function (t) { return arguments.length ? (v = t, n) : v }, n.tooltipContent = function (t) { return arguments.length ? (w = t, n) : w }, n.state = function (t) { return arguments.length ? (u = t, n) : u }, n.defaultState = function (t) { return arguments.length ? (o = t, n) : o }, n.noData = function (t) { return arguments.length ? (k = t, n) : k }, n };
//# sourceMappingURL=linePlusBarChart.min.js.map