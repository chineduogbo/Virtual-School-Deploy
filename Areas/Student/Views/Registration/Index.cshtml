@using Abundance_Nk.Web.Models
@model Abundance_Nk.Web.Areas.Student.ViewModels.RegistrationIndexViewModel

@{
    ViewBag.Title = "Index";
}

<script src="~/Scripts/jquery-1.11.1.min.js"></script>
<script src="~/Scripts/jquery-migrate-1.2.1.min.js"></script>
<script src="~/Scripts/prettify.js"></script>
<script src="~/Scripts/custom.js"></script>

<script src="~/Scripts/jquery.min.js"></script>
<script src="~/Scripts/responsive-tabs.js"></script>

<script type="text/javascript">
    $(document).ready(function() {

        BindCheckBoxes();

        UpdateUIState();

        $("#btnRegisterCourse").click(function() {
            try {

                var data = $('#frmCourseRegistration').serialize();

                $.ajax({
                    type: "POST",
                    url: "@Url.Action("Form", "CourseRegistration")",
                    dataType: "json",
                    data: $("#frmCourseRegistration").serialize(),
                    beforeSend: function() {
                        $("#processing").show();
                    },
                    complete: function() {
                        $("#processing").hide();
                    },

                    success: SuccessFunc,
                    error: ErrorFunc,
                });

                function SuccessFunc(data, status) {
                    //$("#data").html(data);
                    //BindCheckBoxes();

                    if (data.message.indexOf("Error Occurred") <= -1) {
                        $('#btnRegisterCourse').prop('disabled', true);
                        $("#selectAllFirstSemester").prop('disabled', true);
                        $("#selectAllSecondSemester").prop('disabled', true);
                        $(".ckb1").prop('disabled', true);
                        $(".ckb2").prop('disabled', true);
                    }

                    alert(data.message);
                }

                function ErrorFunc() {
                    alert("Operation failed!");
                }
            } catch (e) {
                alert(e);
            }
        });

        function InvalidUserInput() {
            try {
                var firstSemesterMinimumUnit = $('#FirstSemesterMinimumUnit').val();
                var firstSemesterMaximumUnit = $('#FirstSemesterMaximumUnit').val();
                var secondSemesterMinimumUnit = $('#SecondSemesterMinimumUnit').val();
                var secondSemesterMaximumUnit = $('#SecondSemesterMaximumUnit').val();
                var firstSemesterCarryOverTotalUnit = $('#TotalFirstSemesterCarryOverCourseUnit').val();
                var secondSemesterCarryOverTotalUnit = $('#TotalSecondSemesterCarryOverCourseUnit').val();

                var firstSemesterSelectedUnit = CalculateSelectedCourseUnit($(".ckb1"));
                var secondSemesterSelectedUnit = CalculateSelectedCourseUnit($(".ckb2"));

                firstSemesterSelectedUnit += parseInt(firstSemesterCarryOverTotalUnit);
                secondSemesterSelectedUnit += parseInt(secondSemesterCarryOverTotalUnit);

                if (firstSemesterSelectedUnit < firstSemesterMinimumUnit) {
                    //alert("Total selected Course Unit of " + firstSemesterSelectedUnit + " cannot be less than First Semester Min Unit of " + firstSemecterMinimumUnit + "! Please modify to continue.");
                    return true;
                } else if (firstSemesterMaximumUnit < firstSemesterSelectedUnit) {
                    //alert("Total selected Course Unit of " + firstSemesterSelectedUnit + " cannot be less than First Semester Max Unit of " + firstSemecterMaximumUnit + "! Please modify to continue.");
                    return true;
                } else if (secondSemesterSelectedUnit < secondSemesterMinimumUnit) {
                    //alert("Total selected Course Unit of " + secondSemesterSelectedUnit + " cannot be less than Second Semester Min Unit of " + secondSemecterMinimumUnit + "! Please modify to continue.");
                    return true;
                } else if (secondSemesterMaximumUnit < secondSemesterSelectedUnit) {
                    //alert("Total selected Course Unit of " + secondSemesterSelectedUnit + " cannot be less than Second Semester Max Unit of " + secondSemecterMaximumUnit + "! Please modify to continue.");
                    return true;
                }

                return false;
            } catch (e) {
                throw e;
            }
        }

        function BindCheckBoxes() {

            try {
                BindSelectAll($("#selectAllFirstSemester"), $(".ckb1"), $('#spFirstSemesterTotalCourseUnit'));
                BindSelectAll($("#selectAllSecondSemester"), $(".ckb2"), $('#spSecondSemesterTotalCourseUnit'));
                BindSelectOne($("#selectAllFirstSemester"), $(".ckb1"), $('#spFirstSemesterTotalCourseUnit'));
                BindSelectOne($("#selectAllSecondSemester"), $(".ckb2"), $('#spSecondSemesterTotalCourseUnit'));

                UpdateSelectAllCheckBox($("#selectAllFirstSemester"), $(".ckb1"));
                UpdateSelectAllCheckBox($("#selectAllSecondSemester"), $(".ckb2"));
            } catch (e) {
                alert(e);
            }
        }

        function BindSelectAll(chkBox, chkBoxClass, courseUnitLabel) {
            chkBox.click(function(event) {

                try {
                    if (this.checked) {
                        chkBoxClass.each(function() {
                            this.checked = true;
                        });
                    } else {
                        chkBoxClass.each(function() {
                            this.checked = false;
                        });
                    }

                    var totalUnit = CalculateSelectedCourseUnit(chkBoxClass);
                    courseUnitLabel.html(totalUnit);

                    UpdateButtonState();
                } catch (e) {
                    alert(e);
                }
            });
        }

        function UpdateButtonState() {

            try {
                if (InvalidUserInput()) {
                    $('#btnRegisterCourse').prop('disabled', true);
                } else {
                    $('#btnRegisterCourse').prop('disabled', false);
                }

            } catch (e) {
                throw e;
            }
        }

        function BindSelectOne(chkBox, chkBoxClass, courseUnitLabel) {
            chkBoxClass.click(function(event) {

                try {

                    var totalSelected = chkBoxClass.filter(":checked").length;
                    var totalCheckBoxCount = chkBoxClass.length;

                    if (!this.checked) {
                        chkBox.removeAttr('checked');
                    } else {
                        if (totalSelected == totalCheckBoxCount) {
                            chkBox.prop('checked', 'checked');
                        }
                    }

                    var totalUnit = CalculateSelectedCourseUnit(chkBoxClass);
                    courseUnitLabel.html(totalUnit);

                    UpdateButtonState();
                } catch (e) {
                    alert(e);
                }
            });
        }

        function UpdateSelectAllCheckBox(chkBox, chkBoxClass) {
            try {
                var totalSelected = chkBoxClass.filter(":checked").length;
                var totalCheckBoxCount = chkBoxClass.length;

                if (totalSelected == totalCheckBoxCount) {
                    chkBox.prop('checked', 'checked');
                }
            } catch (e) {
                alert(e);
            }
        }

        function CalculateSelectedCourseUnit(checkBox) {
            try {
                var totalUnit = 0;
                var values = new Array();

                $.each(checkBox.filter(":checked").closest("td").siblings('.unit'),
                    function() {
                        values.push($(this).text());

                    });

                if (values != null && values.length > 0) {
                    for (var i = 0; i < values.length; i++) {
                        totalUnit += parseInt(values[i]);
                    }
                }

                return totalUnit;
            } catch (e) {
                alert(e);
            }
        }

        function UpdateUIState() {
            try {
                var courseAlreadyRegistered = $('#CourseAlreadyRegistered').val();
                if (courseAlreadyRegistered.toLowerCase() == 'true') {
                    $('#btnRegisterCourse').prop('disabled', false);

                    var approved = $('#RegisteredCourse_Approved').val();
                    if (approved.toLowerCase() == 'true') {
                        $('#buttons').hide('fast');
                        $(".ckb1").prop('disabled', true);
                        $(".ckb2").prop('disabled', true);
                    } else {
                        $('#buttons').show();
                        $(".ckb1").prop('disabled', false);
                        $(".ckb2").prop('disabled', false);
                    }

                    $('#divCourseFormPrintOut').show();
                } else {
                    $('#buttons').show();
                    $('#btnRegisterCourse').prop('disabled', true);
                    $(".ckb1").prop('disabled', false);
                    $(".ckb2").prop('disabled', false);

                    $('#divCourseFormPrintOut').hide('fast');
                }

                var firstSemesterMaximumUnit = $('#FirstSemesterMaximumUnit').val();
                var secondSemesterMaximumUnit = $('#SecondSemesterMaximumUnit').val();
                var firstSemesterCarryOverTotalUnit = $('#TotalFirstSemesterCarryOverCourseUnit').val();
                var secondSemesterCarryOverTotalUnit = $('#TotalSecondSemesterCarryOverCourseUnit').val();

                if ((parseInt(firstSemesterCarryOverTotalUnit) <= parseInt(firstSemesterMaximumUnit)) && (parseInt(secondSemesterCarryOverTotalUnit) <= parseInt(secondSemesterMaximumUnit))) {
                    $("#selectAllCarryOverCourses").prop('checked', 'checked');
                    $("#selectAllCarryOverCourses").prop('disabled', true);

                    $(".ckb3").prop('disabled', true);
                }
            } catch (e) {
                throw e;
            }
        }

    });
</script>
}

<div class="row custom-text-black">
    <div class="col-md-3">
        <div class="logopanel">
            <h1><span style="color: #35925B">Session Registration</span></h1>
        </div>

        <div class="panel panel-default">
            <div class="panel-body">
                <ul class="leftmenu ">
                    <li>
                        <a href="#"><b>Instructions</b></a>
                    </li>
                </ul>

                <ol>
                    <li class="margin-bottom-7">The list of all payment made is displayed on the payment list</li>
                    <li class="margin-bottom-7">To print payment receipt or invoice, click on item (first column) on payment list, a pop menu will appear with two links (invoice and receipt). Click on any one of your choice to print it</li>
                    <li class="margin-bottom-7">Click on the <b>Fill Student Form</b> button to fill your bio data form or click on <b>Fill Course Registration Form</b> button to fill and print your Course Form</li>
                </ol>
            </div>
        </div>
    </div>

    <div class="col-md-9">
        @using (Html.BeginForm("Form", "CourseRegistration", new {Area = "Student"}, FormMethod.Post, new {id = "frmCourseRegistration"}))
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true)

            <div class="shadow">
                <div class="row">
                    <div class="col-md-12">
                        <div class="form-group">
                            <div class="col-md-12" style="font-size: 15pt; text-transform: uppercase">
                                @Html.HiddenFor(model => model.Student.Id)
                                @Html.HiddenFor(model => model.StudentLevel.Level.Id)
                                @Html.DisplayFor(model => model.Student.FullName) (@if (Model.StudentLevel.Programme.Name.Contains("PG"))
                                {
                                    if (Model.StudentLevel.Level.Id == 1)
                                    {
                                        <b>
                                            First And Second Semester
                                        </b>
                                    }
                                    else if (Model.StudentLevel.Level.Id == 2)
                                    {
                                        <b>
                                            Third Semester
                                        </b>
                                    }
                                    else
                                    { <b>
                                            Subsequent Semester
                                        </b>
                                    }
                                }
                                else
                                {
                                    <b>  @Html.DisplayFor(model => model.StudentLevel.Level.Name)</b>
                                }
                                ) DETAILS
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group margin-bottom-0">
                            <div class="col-md-4">
                                @Html.LabelFor(model => model.Student.MatricNumber, new {@class = "control-label "})
                            </div>
                            <div class="col-md-8 ">
                                @Html.HiddenFor(model => model.Student.MatricNumber)
                                @Html.DisplayFor(model => model.Student.MatricNumber)
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group margin-bottom-0">
                            <div class="col-md-5">
                                @Html.LabelFor(model => model.StudentLevel.Department.Name, new {@class = "control-label "})
                            </div>
                            <div class="col-md-7 ">
                                @Html.HiddenFor(model => model.StudentLevel.Department.Id)
                                @Html.DisplayFor(model => model.StudentLevel.Department.Name)
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group margin-bottom-0">
                            <div class="col-md-4">
                                @Html.LabelFor(model => model.StudentLevel.Programme.Name, new {@class = "control-label "})
                            </div>
                            <div class="col-md-8 ">
                                @Html.HiddenFor(model => model.StudentLevel.Programme.Id)
                                @Html.DisplayFor(model => model.StudentLevel.Programme.Name)
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group margin-bottom-0">
                            <div class="col-md-5">
                                @Html.LabelFor(model => model.StudentLevel.Department.Faculty.Name, new {@class = "control-label "})
                            </div>
                            <div class="col-md-7 ">
                                @Html.DisplayFor(model => model.StudentLevel.Department.Faculty.Name)
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6">
                    </div>

                    <div class="col-md-6">
                        <div class="form-group margin-bottom-0">
                        </div>
                    </div>
                </div>
            </div>

            <div class="panel panel-default">
                <div class="panel-body">
                    @*<div id="divFirstSemesterCourses">*@
                    @if (Model != null && Model.PaymentHistory != null && Model.PaymentHistory.Payments != null && Model.PaymentHistory.Payments.Count > 0)
                    {
                        <div class="row">
                            <div class="col-md-12">
                                <b>Payments</b>
                                <div class="pull-right record-count-label">
                                    <span class="caption">No of Payment</span><span class="badge">@Model.PaymentHistory.Payments.Count</span>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-12 ">

                                <table class="table grid-table table-condensed grid-wrap table-head-alt mb30">
                                    <thead>
                                        <tr class="well grid-wrap" style="height: 35px; vertical-align: middle">

                                            <th>
                                                Item
                                            </th>
                                            <th>
                                                Bank
                                            </th>
                                            <th>
                                                Invoice No
                                            </th>
                                            
                                            <th>
                                                Confirmation Order No
                                            </th>
                                            <th style="text-align: right">
                                                Amount (₦)
                                            </th>
                                        </tr>
                                    </thead>

                                    @for (int i = 0; i < Model.PaymentHistory.Payments.Count; i++)
                                    {
                                        <tr>

                                            <td>
                                                <ul class="nav navbar-nav2 ">
                                                    <li class="dropdown">
                                                        <a style="padding: 1px;" class="btn btn-primary dropdown-toggle" data-toggle="dropdown" href="#">@Html.DisplayFor(modelItem => Model.PaymentHistory.Payments[i].FeeTypeName)</a>
                                                        <ul class="dropdown-menu" role="menu" aria-labelledby="dLabel">
                                                            <li class="divider"></li>

                                                            <li>@Html.ActionLink("Reprint Invoice", "Invoice", "Credential", new {Area = "Common", pmid = Utility.Encrypt(Model.PaymentHistory.Payments[i].PaymentId.ToString())}, new {target = "_blank", style = "line-height:5px; font-size:10pt; margin-bottom:5px"})</li>
                                                            <li>@Html.ActionLink("Print Receipt", "Receipt", "Credential", new {Area = "Common", pmid = Model.PaymentHistory.Payments[i].PaymentId}, new {target = "_blank", style = "line-height:5px; font-size:10pt; margin-bottom:5px"})</li>

                                                            <li class="divider"></li>
                                                        </ul>
                                                    </li>
                                                </ul>
                                            </td>
                                            <td>
                                                @Html.DisplayFor(modelItem => Model.PaymentHistory.Payments[i].BankName)
                                            </td>
                                            <td>
                                                @Html.DisplayFor(modelItem => Model.PaymentHistory.Payments[i].InvoiceNumber)
                                            </td>
                                          
                                            <td>
                                                @Html.DisplayFor(modelItem => Model.PaymentHistory.Payments[i].ConfirmationOrderNumber)
                                            </td>
                                            <td style="text-align: right">
                                                @Html.DisplayFor(modelItem => Model.PaymentHistory.Payments[i].Amount)
                                            </td>
                                        </tr>
                                    }
                                </table>

                                @*</div>*@
                            </div>
                        </div>

                        <br />

                        <div class="row" id="buttons">
                            <div class="col-md-12">
                                <div>
                                    <div class="form-inline ">

                                        <div class="form-group">
                                            @Html.ActionLink("Fill Student Form", "Form", "Registration", new {Area = "Student", sid = Utility.Encrypt(Model.Student.Id.ToString()), pid = Utility.Encrypt(Model.StudentLevel.Programme.Id.ToString())}, new {@class = "btn btn-primary btn-lg ", target = "_blank", id = "alStudentInformationForm"})
                                            @Html.ActionLink("Fill Course Registration Form", "CourseRegistration", "Registration", new {Area = "Student", sid = Utility.Encrypt(Model.Student.Id.ToString())}, new {@class = "btn btn-primary btn-lg ", target = "_blank", id = "alCourseRegistration"})
                                        </div>

                                        <div class="form-group">
                                            <div id="processing" style="display: none">
                                                <img src="@Url.Content("~/Content/Images/bx_loader.gif")" />
                                                <span>Processing ...</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div>
                            @if (TempData["Message"] != null)
                            {
                                @Html.Partial("_Message", TempData["Message"])
                            }
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>