@model Abundance_Nk.Web.Areas.PGStudent.ViewModels.PGSemesterViewModel

@{
    ViewBag.Title = "Index";
}

<script src="~/Scripts/jquery-1.11.1.min.js"></script>
<script src="~/Scripts/jquery-migrate-1.2.1.min.js"></script>
<script src="~/Scripts/prettify.js"></script>
<script src="~/Scripts/custom.js"></script>

<script src="~/Scripts/jquery.min.js"></script>
<script src="~/Scripts/responsive-tabs.js"></script>

<script type="text/javascript">
    $(document).ready(function () {

        BindCheckBoxes();

        UpdateUIState();

        //$("frmCourseRegistration").submit(function (e) {
        //    //if ($("frmCourseRegistration").valid()) {
        //        $.post($(this).attr("action"), $(this).serialize());
        //    //}
        //    e.preventDefault();
        //});

        $("#btnRegisterCourse").click(function () {
            try {
                //checked1Ids = $(".ckb1").filter(":checked").map(function () { return this.id; });
                //checked2Ids = $(".ckb2").filter(":checked").map(function () { return this.id; });

                //if (InvalidUserInput()) {
                //    return;
                //}

                //var studentId = $('#Student_Id').val();
                //var programmeId = $('#AppliedCourse_Programme_Id').val();
                //var departmentId = $('#AppliedCourse_Department_Id').val();
                //var sessionId = $('#CurrentSessionSemester_SessionSemester_Session_Id').val();
                //var levelId = $('#StudentLevel_Level_Id').val();

                var data = $('#frmCourseRegistration').serialize();

                $.ajax({
                    type: "POST",
                    url: "@Url.Action("Form", "CourseRegistration")",
                    dataType: "json",
                    data: $("#frmCourseRegistration").serialize(),
                    beforeSend: function () {
                        $("#processing").show();
                    },
                    complete: function () {
                        $("#processing").hide();
                    },

                    success: SuccessFunc,
                    error: ErrorFunc,
                });

                function SuccessFunc(data, status) {
                    //$("#data").html(data);
                    //BindCheckBoxes();

                    if (data.message.indexOf("Error Occurred") <= -1) {
                        $('#btnRegisterCourse').prop('disabled', true);
                        $("#selectAllFirstSemester").prop('disabled', true);
                        $("#selectAllSecondSemester").prop('disabled', true);
                        $(".ckb1").prop('disabled', true);
                        $(".ckb2").prop('disabled', true);
                    }

                    alert(data.message);
                }

                function ErrorFunc() {
                    alert("Operation failed!");
                }
            } catch (e) {
                alert(e);
            }
        });

        function InvalidUserInput() {
            try {
                var firstSemesterMinimumUnit = $('#FirstSemesterMinimumUnit').val();
                var firstSemesterMaximumUnit = $('#FirstSemesterMaximumUnit').val();
                var secondSemesterMinimumUnit = $('#SecondSemesterMinimumUnit').val();
                var secondSemesterMaximumUnit = $('#SecondSemesterMaximumUnit').val();
                var firstSemesterCarryOverTotalUnit = $('#TotalFirstSemesterCarryOverCourseUnit').val();
                var secondSemesterCarryOverTotalUnit = $('#TotalSecondSemesterCarryOverCourseUnit').val();

                var firstSemesterSelectedUnit = CalculateSelectedCourseUnit($(".ckb1"));
                var secondSemesterSelectedUnit = CalculateSelectedCourseUnit($(".ckb2"));

                firstSemesterSelectedUnit += parseInt(firstSemesterCarryOverTotalUnit);
                secondSemesterSelectedUnit += parseInt(secondSemesterCarryOverTotalUnit);

                if (firstSemesterSelectedUnit < firstSemesterMinimumUnit) {
                    //alert("Total selected Course Unit of " + firstSemesterSelectedUnit + " cannot be less than First Semester Min Unit of " + firstSemecterMinimumUnit + "! Please modify to continue.");
                    return true;
                } else if (firstSemesterMaximumUnit < firstSemesterSelectedUnit) {
                    //alert("Total selected Course Unit of " + firstSemesterSelectedUnit + " cannot be less than First Semester Max Unit of " + firstSemecterMaximumUnit + "! Please modify to continue.");
                    return true;
                } else if (secondSemesterSelectedUnit < secondSemesterMinimumUnit) {
                    //alert("Total selected Course Unit of " + secondSemesterSelectedUnit + " cannot be less than Second Semester Min Unit of " + secondSemecterMinimumUnit + "! Please modify to continue.");
                    return true;
                } else if (secondSemesterMaximumUnit < secondSemesterSelectedUnit) {
                    //alert("Total selected Course Unit of " + secondSemesterSelectedUnit + " cannot be less than Second Semester Max Unit of " + secondSemecterMaximumUnit + "! Please modify to continue.");
                    return true;
                }

                return false;
            } catch (e) {
                throw e;
            }
        }

        function BindCheckBoxes() {

            try {
                BindSelectAll($("#selectAllFirstSemester"), $(".ckb1"), $('#spFirstSemesterTotalCourseUnit'));
                BindSelectAll($("#selectAllSecondSemester"), $(".ckb2"), $('#spSecondSemesterTotalCourseUnit'));
                BindSelectOne($("#selectAllFirstSemester"), $(".ckb1"), $('#spFirstSemesterTotalCourseUnit'));
                BindSelectOne($("#selectAllSecondSemester"), $(".ckb2"), $('#spSecondSemesterTotalCourseUnit'));

                UpdateSelectAllCheckBox($("#selectAllFirstSemester"), $(".ckb1"));
                UpdateSelectAllCheckBox($("#selectAllSecondSemester"), $(".ckb2"));
            } catch (e) {
                alert(e);
            }
        }

        function BindSelectAll(chkBox, chkBoxClass, courseUnitLabel) {
            chkBox.click(function (event) {

                try {
                    if (this.checked) {
                        chkBoxClass.each(function () {
                            this.checked = true;
                        });
                    } else {
                        chkBoxClass.each(function () {
                            this.checked = false;
                        });
                    }

                    var totalUnit = CalculateSelectedCourseUnit(chkBoxClass);
                    courseUnitLabel.html(totalUnit);

                    UpdateButtonState();
                } catch (e) {
                    alert(e);
                }
            });
        }

        function UpdateButtonState() {

            try {
                if (InvalidUserInput()) {
                    $('#btnRegisterCourse').prop('disabled', true);
                } else {
                    $('#btnRegisterCourse').prop('disabled', false);
                }

                //checked1Ids = $(".ckb1").filter(":checked").map(function () { return this.id; });
                //checked2Ids = $(".ckb2").filter(":checked").map(function () { return this.id; });

                //var idsCount = 0;
                //if (checked1Ids != null) {
                //    idsCount = idsCount + checked1Ids.toArray().length;
                //}
                //if (checked2Ids != null) {
                //    idsCount = idsCount + checked2Ids.toArray().length;
                //}

                //if (idsCount <= 0) {
                //    $('#btnRegisterCourse').prop('disabled', true);
                //}
                //else {
                //    $('#btnRegisterCourse').prop('disabled', false);
                //}
            } catch (e) {
                throw e;
            }
        }

        function BindSelectOne(chkBox, chkBoxClass, courseUnitLabel) {
            chkBoxClass.click(function (event) {

                try {
                    //$.each($("input[name='case[]']:checked").closest("td").siblings("td"),
                    //       function () {
                    //           values.push($(this).text());
                    //       });

                    var totalSelected = chkBoxClass.filter(":checked").length;
                    var totalCheckBoxCount = chkBoxClass.length;

                    if (!this.checked) {
                        chkBox.removeAttr('checked');
                        //var count = $("[type='checkbox']:checked").length;
                    } else {
                        if (totalSelected == totalCheckBoxCount) {
                            chkBox.prop('checked', 'checked');
                        }
                    }

                    var totalUnit = CalculateSelectedCourseUnit(chkBoxClass);
                    courseUnitLabel.html(totalUnit);

                    UpdateButtonState();
                } catch (e) {
                    alert(e);
                }
            });
        }

        function UpdateSelectAllCheckBox(chkBox, chkBoxClass) {
            try {
                var totalSelected = chkBoxClass.filter(":checked").length;
                var totalCheckBoxCount = chkBoxClass.length;

                if (totalSelected == totalCheckBoxCount) {
                    chkBox.prop('checked', 'checked');
                }
            } catch (e) {
                alert(e);
            }
        }

        function CalculateSelectedCourseUnit(checkBox) {
            try {
                var totalUnit = 0;
                var values = new Array();

                $.each(checkBox.filter(":checked").closest("td").siblings('.unit'),
                    function () {
                        values.push($(this).text());

                    });

                if (values != null && values.length > 0) {
                    for (var i = 0; i < values.length; i++) {
                        totalUnit += parseInt(values[i]);
                    }
                }

                return totalUnit;
            } catch (e) {
                alert(e);
            }
        }

        //function CalculateSelectedCourseUnit(checkBox) {

        //    try
        //    {
        //        var totalUnit = 0;

        //        //var units = checkBox.map(function () { return $(this).val(); });
        //        var units = checkBox.filter(":checked").map(function () { return $(this).val(); });
        //        if (units.toArray() != null && units.toArray().length > 0) {
        //            for (var i = 0; i < units.toArray().length; i++) {
        //                totalUnit += units[i] << 0;
        //            }
        //        }

        //        return totalUnit;
        //    }
        //    catch (e) {
        //        throw e;
        //    }
        //}

        function UpdateUIState() {
            try {
                var courseAlreadyRegistered = $('#CourseAlreadyRegistered').val();
                if (courseAlreadyRegistered.toLowerCase() == 'true') {
                    $('#btnRegisterCourse').prop('disabled', false);

                    var approved = $('#RegisteredCourse_Approved').val();
                    if (approved.toLowerCase() == 'true') {
                        $('#buttons').hide('fast');
                        $(".ckb1").prop('disabled', true);
                        $(".ckb2").prop('disabled', true);
                    } else {
                        $('#buttons').show();
                        $(".ckb1").prop('disabled', false);
                        $(".ckb2").prop('disabled', false);
                    }

                    $('#divCourseFormPrintOut').show();
                } else {
                    $('#buttons').show();
                    $('#btnRegisterCourse').prop('disabled', true);
                    $(".ckb1").prop('disabled', false);
                    $(".ckb2").prop('disabled', false);

                    $('#divCourseFormPrintOut').hide('fast');
                }

                var firstSemesterMaximumUnit = $('#FirstSemesterMaximumUnit').val();
                var secondSemesterMaximumUnit = $('#SecondSemesterMaximumUnit').val();
                var firstSemesterCarryOverTotalUnit = $('#TotalFirstSemesterCarryOverCourseUnit').val();
                var secondSemesterCarryOverTotalUnit = $('#TotalSecondSemesterCarryOverCourseUnit').val();

                if ((parseInt(firstSemesterCarryOverTotalUnit) <= parseInt(firstSemesterMaximumUnit)) && (parseInt(secondSemesterCarryOverTotalUnit) <= parseInt(secondSemesterMaximumUnit))) {
                    $("#selectAllCarryOverCourses").prop('checked', 'checked');
                    $("#selectAllCarryOverCourses").prop('disabled', true);

                    ////$(".ckb3").prop('checked', true);
                    //$(".ckb3").prop('checked', 'checked');
                    $(".ckb3").prop('disabled', true);
                }
            } catch (e) {
                throw e;
            }
        }

    });
</script>

<style>
    .control-label {
        text-transform: uppercase;
    }
</style>

<div class="container-fluid">
    <div class="card card-shadow">
        <div class="row">
            <div class="col-md-12">
                @if (TempData["Message"] != null)
                {
                    @Html.Partial("_Message", TempData["Message"])
                }
            </div>
        </div>

        <div class="row">
            <div class="col-md-12">
                <h1><span style="color: #35925B">Session Registration</span></h1>
            </div>
            <div class="col-md-3">


                <div class="panel panel-default">
                    <div class="panel-body">

                        <a href="#"><b>Instructions</b></a>
                        <hr />
                        <p>
                            &bull; The list of all payment made is displayed on the payment list<br />
                            &bull; To print payment receipt or invoice, mouse over item (first column) on payment list,
                            a pop menu will appear with two links (invoice and receipt). Click on any one of your choice to print it<br />
                            &bull; Click on the <b>Fill Student Form</b> button to fill your bio data form or click on <b>Fill Course Registration Form</b> button to fill and print your Course Form</li>

                        </p>
                    </div>
                </div>
            </div>

            <div class="col-md-9">
                <div class="panel panel-default">




                    <div style="background:#f2f2f2; padding-top: 15px;">

                        <div class="col-md-12" style="font-size: 15pt; text-transform: uppercase">
                            @Html.HiddenFor(model => model.Student.Id)
                            @Html.HiddenFor(model => model.StudentLevel.Level.Id)
                            @Html.DisplayFor(model => model.Student.FullName) (<b>@Html.DisplayFor(model => model.StudentLevel.Level.Name)</b>) DETAILS
                        </div>



                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group margin-bottom-0">
                                    <div class="col-md-4">
                                        @Html.LabelFor(model => model.Student.MatricNumber, new { @class = "control-label " })
                                    </div>
                                    <div class="col-md-8 ">
                                        @Html.HiddenFor(model => model.Student.MatricNumber)
                                        @Html.DisplayFor(model => model.Student.MatricNumber)
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6">
                                <div class="form-group margin-bottom-0">
                                    <div class="col-md-5">
                                        @Html.LabelFor(model => model.StudentLevel.Department.Name, new { @class = "control-label " })
                                    </div>
                                    <div class="col-md-7 ">
                                        @Html.HiddenFor(model => model.StudentLevel.Department.Id)
                                        @Html.DisplayFor(model => model.StudentLevel.Department.Name)
                                    </div>
                                </div>
                            </div>



                            <div class="col-md-6">
                                <div class="form-group margin-bottom-0">
                                    <div class="col-md-4">
                                        @Html.LabelFor(model => model.StudentLevel.Programme.Name, new { @class = "control-label " })
                                    </div>
                                    <div class="col-md-8 ">
                                        @Html.HiddenFor(model => model.StudentLevel.Programme.Id)
                                        @Html.DisplayFor(model => model.StudentLevel.Programme.Name)
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6">
                                <div class="form-group margin-bottom-0">
                                    <div class="col-md-5">
                                        @Html.LabelFor(model => model.StudentLevel.Department.Faculty.Name, new { @class = "control-label " })
                                    </div>
                                    <div class="col-md-7 ">
                                        @Html.DisplayFor(model => model.StudentLevel.Department.Faculty.Name)
                                    </div>
                                </div>
                            </div>

                        </div>
                    </div>

                    <div class="panel-body">
                        <div class="row">
                            <div class="col-md-6">
                            </div>

                            <div class="col-md-6">
                                <div class="form-group margin-bottom-0">
                                </div>
                            </div>
                        </div>

                        @using (Html.BeginForm("Form", "CourseRegistration", new { Area = "PGStudent" }, FormMethod.Get))
                        {
                            @Html.HiddenFor(model => model.sid)


                            <div class="row">

                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.session.Id, "Session", new { @class = "control-label " })
                                        @Html.DropDownListFor(model => model.session.Id, (IEnumerable<SelectListItem>)ViewBag.sessionId, new { @class = "form-control", @required = "required" })
                                        @Html.ValidationMessageFor(model => model.session.Id)
                                    </div>
                                </div>

                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.semester.Id, "Semester", new { @class = "control-label " })
                                        @Html.DropDownListFor(model => model.semester.Id, (IEnumerable<SelectListItem>)ViewBag.semesterId, new { @class = "form-control", @required = "required" })
                                        @Html.ValidationMessageFor(model => model.semester.Id)
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group">

                                    </div>
                                </div>

                                <div class="col-md-6">
                                    <div class="form-group">
                                    </div>
                                </div>
                            </div>


                            <br />

                            <div class="row" id="buttons">
                                <div class="col-md-12">
                                    <div>
                                        <div class="form-inline ">
                                            <div class="col-md-8 p-0">
                                                <input type="submit" value="Register" class="btn btn-default" />
                                            </div>

                                            <div class="form-group">
                                                <div id="processing" style="display: none">
                                                    <img src="@Url.Content("~/Content/Images/bx_loader.gif")" />
                                                    <span>Processing ...</span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                        }
                    </div>
                </div>

            </div>
        </div>

    </div>
</div>