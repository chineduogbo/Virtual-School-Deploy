@using Abundance_Nk.Web.Models
@model Abundance_Nk.Web.Areas.Applicant.ViewModels.PostJambViewModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<script src="~/Scripts/jquery-1.11.1.min.js"></script>
<link href="~/Scripts/DropZone/dropzone.css" rel="stylesheet" />
<script src="~/Scripts/DropZone/dropzone.js"></script>
<style>
    .d-inline-block {
        display: inline-block;
    }

    .justify-content-center {
        justify-content: center
    }

    .justify-content-between {
        justify-content: space-between
    }

    .d-flex {
        display: flex
    }

    .flex-wrap {
        flex-wrap: wrap;
    }

    .text-center {
        text-align: center !important
    }

    .mt-4 {
        margin-top: 1rem
    }

    .mt-0 {
        margin-top: 0 !important
    }

    .border-top {
        border-top: 1px solid #eee
    }

    .border-bottom {
        border-bottom: 1px solid #eee
    }

    .border-bottom-bold {
        border-bottom: 1px solid #000;
    }

    .mr-20px {
        margin-right: 20px !important;
    }

    .mb-30px {
        margin-bottom: 30px !important;
    }

    .mb-20px {
        margin-bottom: 20px !important;
    }

    .mt-30px {
        margin-top: 30px !important;
    }

    .mt-20px {
        margin-top: 20px !important;
    }

    .font-weight-bold {
        font-weight: bolder;
    }

    .my-auto {
        margin-top: auto;
        margin-bottom: auto;
    }

    .text-italic {
        font-style: italic;
    }

    .text-underline {
        text-decoration: underline;
    }

    .list-mb {
        margin-bottom: 15px;
    }

    .px-10px {
        padding-left: 10px;
        padding-right: 10px;
    }

    .ml-20px {
        margin-left: 20px;
    }

    @@media only screen and (min-device-width: 576px) {
        .container {
            max-width: 540px;
        }
    }

    @@media only screen and (min-device-width: 768px) {
        .container {
            max-width: 720px;
        }
    }

    @@media only screen and (min-device-width: 992px) {
        .container {
            max-width: 960px;
        }
    }

    @@media only screen and (min-device-width: 1200px) {
        .container {
            max-width: 1140px;
        }
    }

    .container {
        width: 100%;
        padding-right: 15px;
        padding-left: 15px;
        margin-right: auto;
        margin-left: auto;
    }

    .grid-left {
        grid-area: left;
    }

    .grid-right {
        grid-area: right;
    }

    .grid-container {
        display: grid;
        grid-template-areas: "left left right right";
        grid-gap: 10px;
        padding: 10px;
    }

    .mr-30px {
        margin-right: 200px;
    }

    .mt-50px {
        margin-top: 50px
    }
</style>
<div>

    <script type="text/javascript">

        var personId;
        var formNumber;
        var personImageUrl;
        var hasPassport;
        $(document).ready(function () {


            //hasPassport = $("#HasJambPassport").val();
            //$('#loading').hide();

            //if (formNumber != null) {
            //    $('#submitBtn').show();
            //}
            //if (hasPassport>0) {
            //    $('#submitBtn').show();
            //}


            @*navListItems.click(function (e) {
                e.preventDefault();
                var $target = $($(this).attr('href')),
                    $item = $(this).closest('li'),
                    $clickId = $target[0].id;
                var programmeId = $("#@Html.IdFor(m => m.AppliedCourse.Programme.Id)").val();

                if ($clickId == "step-2") {

                    var d = new Date();
                    var sexId = $("#Person_Sex_Id").val();
                    var dob = $("#dateofbirth").val();


                    var stateId = $("#Person_State_Id").val();
                    var lgaId = $("#Person_LocalGovernment_Id").val();
                    var homeTown = $("#Person_HomeTown").val();
                    var mobilePhone = $("#Person_MobilePhone").val();
                    var email = $("#Person_Email").val();
                    var religionId = $("#Person_Religion_Id").val();
                    var homeAddress = $("#Person_HomeAddress").val();
                    var abilityId = $("#Applicant_Ability_Id").val();
                    var otherAbility = $("#Applicant_OtherAbility").val();
                    var extraCurricullarActivities = $("#Applicant_ExtraCurricullarActivities").val();
                    personId = $("#Person_Id").val();

                    if (sexId && dob && stateId && lgaId && homeTown && mobilePhone && religionId && homeAddress && abilityId && extraCurricullarActivities
                        ) {

                        if (!$item.hasClass('disabled')) {
                            navListItems.closest('li').removeClass('active');
                            $item.addClass('active');
                            allWells.hide();
                            $target.show();

                        }
                    } else if ($clickId == "step-1") {

                        if (!$item.hasClass('disabled')) {
                            navListItems.closest('li').removeClass('active');
                            $item.addClass('active');
                            allWells.hide();
                            $target.show();
                        }
                        else {

                            alert("Please fill all the fields!");
                        }
                    }

                } else if ($clickId == "step-3") {





                }
                else if ($clickId == "step-1") {



                }
                else {

                    alert("Please fill all the fields!");
                }
            });*@

            @*$('ul.setup-panel li.active a').trigger('click');

            // Disabling clicks //

            $('#activate-step-1').on('click', function (e) {
                $('ul.setup-panel li:eq(2)').removeClass('setup-panel');
                $('ul.setup-panel li:eq(1)').addClass('setup-panel');
                $('ul.setup-panel li a[href="#step-2"]').trigger('click');

            });

            $('#activate-step-2').on('click', function (e) {
               // var programme = $("#@Html.IdFor(m => m.AppliedCourse.Programme.Id)").val();

                    $('ul.setup-panel li:eq(1)').removeClass('disabled');
                    $('ul.setup-panel li a[href="#step-2"]').trigger('click');


            });

            $('#activate-step-3').on('click', function (e) {
                $('ul.setup-panel li:eq(2)').removeClass('disabled');
                $('ul.setup-panel li a[href="#step-3"]').trigger('click');

            });



            $('#previous-step-3').on('click', function (e) {

                var programme = $("#@Html.IdFor(m => m.AppliedCourse.Programme.Id)").val();

                    $('ul.setup-panel li:eq(2)').removeClass('disabled');
                    $('ul.setup-panel li a[href="#step-2"]').trigger('click');


            });*@




            var src = $('#Person_ImageFileUrl').attr('src');
            if (src == undefined) {
                $('#Person_ImageFileUrl').attr('src', '/Content/Images/default_avatar.png');
            }

            $("#Person_State_Id").change(function () {
                $("#Person_LocalGovernment_Id").empty();
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GetLocalGovernmentsByState")', //we are calling json method
                    dataType: 'json',
                    data: { id: $("#Person_State_Id").val() },
                    success: function (lgas) {
                        $("#Person_LocalGovernment_Id").append('<option value="' + 0 + '">-- Select --</option>');

                        $.each(lgas, function (i, lga) {
                            $("#Person_LocalGovernment_Id").append('<option value="' + lga.Value + '">' + lga.Text + '</option>');
                        });
                    },
                    error: function (ex) {
                        alert('Failed to retrieve lgas.' + ex);
                    }
                });

                return false;
            });

            @*initSimpleFileUploadForCredential();
            $("#cr-start-upload").on('click', function () {
                if (jqXHRData) {
                    jqXHRData.submit();
                }
                return false;
            });

            $("#cu-credential-simple-upload").on('change', function () {
                $("#crx-file-path").val(this.files[0].name);
            });

            function initSimpleFileUploadForCredential() {
                'use strict';

                $('#cu-credential-simple-upload').fileupload({
                    url: '@Url.Content("~/Applicant/Form/UploadCredentialFile")',
                    dataType: 'json',

                    add: function (e, data) {
                        jqXHRData = data;
                    },
                    send: function (e) {
                        $('#fileUploadProgress2').show();
                    },
                    done: function (event, data) {
                        if (data.result.isUploaded) {
                            //alert("success");
                        } else {
                            $("#crx-file-path").val("");
                            alert(data.result.message);
                        }

                        $('#scannedCredential').attr('src', data.result.imageUrl);
                        $('#fileUploadProgress2').hide();
                    },
                    fail: function (event, data) {
                        if (data.files[0].error) {
                            alert(data.files[0].error);
                        }
                    }
                });
            }

            checkPhoneNumbers();

            $("#Sponsor_MobilePhone").on("change", function () {
                checkPhoneNumbers();
            });

            $("#Person_MobilePhone").on("change", function () {
                checkPhoneNumbers();
            });*@



       $('#fieldId').change(function () {


            var Field = $('#fieldId :selected').val();

            $("#subjectcombination").empty();

            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetSubjectCombination")', // we are calling json method
                dataType: 'json',
                data: { FieldId: Field, },
                success: function (departments) {
                    if (departments.length > 0) {
                        $("#subjectcombination").append('<option value="' + 0 + '"> -- Select -- </option>');

                        $.each(departments, function (i, department) {
                            $("#subjectcombination").append('<option value="' + department.Value + '">' + department.Text + '</option>');
                        });

                    }
                },
                error: function (ex) {
                    alert('Failed to retrieve Combinations.' + ex);
                }
            });
       });

        });

        (function ($) {

            // Browser supports HTML5 multiple file?
            var multipleSupport = typeof $('<input/>')[0].multiple !== 'undefined',
                isIE = /msie/i.test(navigator.userAgent);

            $.fn.customFile = function () {

                return this.each(function () {

                    var $file = $(this).addClass('custom-file-upload-hidden'), // the original file input
                        $wrap = $('<div class="file-upload-wrapper">'),
                        $input = $('<input type="text" class="file-upload-input" />'),
                        // Button that will be used in non-IE browsers
                        $button = $('<button type="button" class="file-upload-button">Select a File</button>'),
                        // Hack for IE
                        $label = $('<label class="file-upload-button" for="' + $file[0].id + '">Select a File</label>');

                    // Hide by shifting to the left so we
                    // can still trigger events
                    $file.css({
                        position: 'absolute',
                        left: '-9999px'
                    });

                    $wrap.insertAfter($file)
                        .append($file, $input, (isIE ? $label : $button));

                    // Prevent focus
                    $file.attr('tabIndex', -1);
                    $button.attr('tabIndex', -1);

                    $button.click(function () {
                        $file.focus().click(); // Open dialog
                    });

                    $file.change(function () {

                        var files = [], fileArr, filename;

                        // If multiple is supported then extract
                        // all filenames from the file array
                        if (multipleSupport) {
                            fileArr = $file[0].files;
                            for (var i = 0, len = fileArr.length; i < len; i++) {
                                files.push(fileArr[i].name);
                            }
                            filename = files.join(', ');

                            // If not supported then just take the value
                            // and remove the path to just show the filename
                        } else {
                            filename = $file.val().split('\\').pop();
                        }

                        $input.val(filename) // Set the value
                            .attr('title', filename) // Show filename in title tootlip
                            .focus(); // Regain focus

                    });

                    $input.on({
                        blur: function () { $file.trigger('blur'); },
                        keydown: function (e) {
                            if (e.which === 13) { // Enter
                                if (!isIE) { $file.trigger('click'); }
                            } else if (e.which === 8 || e.which === 46) { // Backspace & Del
                                // On some browsers the value is read-only
                                // with this trick we remove the old input and add
                                // a clean clone with all the original events attached
                                $file.replaceWith($file = $file.clone(true));
                                $file.trigger('change');
                                $input.val('');
                            } else if (e.which === 9) { // TAB
                                return;
                            } else { // All other keys
                                return false;
                            }
                        }
                    });

                });

            };

            // Old browser fallback
            if (!multipleSupport) {
                $(document).on('change', 'input.customfile', function () {

                    var $this = $(this),
                        // Create a unique ID so we
                        // can attach the label to the input
                        uniqId = 'customfile_' + (new Date()).getTime(),
                        $wrap = $this.parent(),

                        // Filter empty input
                        $inputs = $wrap.siblings().find('.file-upload-input')
                            .filter(function () { return !this.value }),

                        $file = $('<input type="file" id="' + uniqId + '" name="' + $this.attr('name') + '"/>');

                    setTimeout(function () {
                        // Add a new input
                        if ($this.val()) {
                            if (!$inputs.length) {
                                $wrap.after($file);
                                $file.customFile();
                            }
                            // Remove and reorganize inputs
                        } else {
                            $inputs.parent().remove();
                            $wrap.appendTo($wrap.parent());
                            $wrap.find('input').focus();
                        }
                    }, 1);

                });
            }

        }(jQuery));
        $('input[type=file]').customFile();

        function populateFirstSittingResultDetail() {
            var firstSittingOLevelResultDetailArray = [];
            var array = $('#firstSittingTable tr:gt(0)').map(function () {
                return {
                    SubjectId: $(this.cells[0]).find("select").val(),
                    SubjectName: "",
                    GradeId: $(this.cells[1]).find("select").val(),
                    GradeName: ""
                };
            });

            for (var i = 0; i < array.length; i++) {
                var myArray = { "SubjectId": array[i].SubjectId, "SubjectName": array[i].SubjectName, "GradeId": array[i].GradeId, "GradeName": array[i].GradeName };
                firstSittingOLevelResultDetailArray.push(myArray);
            }

            return firstSittingOLevelResultDetailArray;
        }

        function checkPhoneNumbers() {
            if ($("#Sponsor_MobilePhone").val() != undefined || $("#Sponsor_MobilePhone").val() != "" || $("#Person_MobilePhone").val() != undefined || $("#Person_MobilePhone").val() != "") {
                if ($("#Person_MobilePhone").val() == $("#Sponsor_MobilePhone").val()) {
                    $("#submit").attr("disabled", "disabled");
                    alert("Your phone number and the next of kin phone number cannot be the same.");
                } else {
                    $("#submit").attr("disabled", false);
                }
            }
        }
        function populateSecondSittingResultDetail() {
            var secondSittingOLevelResultDetailArray = [];
            var array2 = $('#secondSittingTable tr:gt(0)').map(function () {
                return {
                    SubjectId: $(this.cells[0]).find("select").val(),
                    SubjectName: "",
                    GradeId: $(this.cells[1]).find("select").val(),
                    GradeName: ""
                };
            });

            for (var i = 0; i < array2.length; i++) {
                var myArray = { "SubjectId": array2[i].SubjectId, "SubjectName": array2[i].SubjectName, "GradeId": array2[i].GradeId, "GradeName": array2[i].GradeName };
                secondSittingOLevelResultDetailArray.push(myArray);
            }

            return secondSittingOLevelResultDetailArray;
        }
        function showLoading() {
            $('#loading').show();
        }
    </script>
    @if (TempData["Message"] != null)
    {
        @Html.Partial("_Message", TempData["Message"])
    }
</div>


<head>


    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700;800&amp;display=swap" rel="stylesheet">

    @*<link href="~/Content/css/light-style.css" rel="stylesheet">*@

</head>

<div class="wrapper">


    <div class="main">



        <div class="container-fluid p-0">


            <div class="row">

                <div class="col-md-12">
                    <div class="card">


                        <div class="card-body">


                            <div class="container">
                                <div class="">
                                    
                                    @using (Html.BeginForm("JupebFormPreview", "Form", FormMethod.Post, new { id = "frmPostJAMB", enctype = "multipart/form-data" }))
                                    {
                                        @Html.AntiForgeryToken()
                                        @Html.ValidationSummary(true)
                                    <div class="tab-content bg-light ">
                                        <div class="card">
                                            <div class="col-md-12">
                                                <div class="row justify-content-center">
                                                    <h4 class=" col-md-12 text-center">Bio-Data</h4>
                                                </div>

                                                @if (Model.ApplicationForm != null && Model.ApplicationForm.Id > 0)
                                                {
                                                    @Html.HiddenFor(model => model.ApplicationForm.Id)
                                                    @Html.HiddenFor(model => model.ApplicationForm.Number)
                                                    @Html.HiddenFor(model => model.ApplicationForm.ExamNumber)
                                                    @Html.HiddenFor(model => model.ApplicationForm.Rejected)
                                                    @Html.HiddenFor(model => model.ApplicationForm.RejectReason)
                                                }

                                                @Html.HiddenFor(model => model.Session.Id)
                                                @Html.HiddenFor(model => model.Session.Name)

                                                @Html.HiddenFor(model => model.ApplicationFormSetting.Id)
                                                @Html.HiddenFor(model => model.ApplicationFormSetting.PaymentMode.Id)
                                                @Html.HiddenFor(model => model.ApplicationFormSetting.PaymentType.Id)
                                                @Html.HiddenFor(model => model.ApplicationFormSetting.PersonType.Id)
                                                @Html.HiddenFor(model => model.ApplicationFormSetting.Session.Id)
                                                @Html.HiddenFor(model => model.ApplicationFormSetting.ExamDate)
                                                @Html.HiddenFor(model => model.ApplicationFormSetting.ExamVenue)
                                                @Html.HiddenFor(model => model.ApplicationFormSetting.ExamTime)

                                                @Html.HiddenFor(model => model.ApplicationProgrammeFee.FeeType.Id)
                                                @Html.HiddenFor(model => model.ApplicationProgrammeFee.Id)

                                                @Html.HiddenFor(model => model.Programme.Id, new { Id = "programmeId" })
                                                @Html.HiddenFor(model => model.Programme.Name)
                                                @Html.HiddenFor(model => model.Programme.ShortName)

                                                @Html.HiddenFor(model => model.AppliedCourse.Programme.Id)
                                                @Html.HiddenFor(model => model.AppliedCourse.Programme.Name)
                                                @Html.HiddenFor(model => model.AppliedCourse.Department.Id)
                                                @Html.HiddenFor(model => model.AppliedCourse.Department.Name)
                                                @Html.HiddenFor(model => model.AppliedCourse.Department.Code)
                                                @Html.HiddenFor(model => model.Person.Id)
                                                @Html.HiddenFor(model => model.Payment.Id)
                                                @Html.HiddenFor(model => model.remitaPyament.payment.Id)

                                                @Html.HiddenFor(model => model.Person.DateEntered)
                                                @Html.HiddenFor(model => model.Person.FullName)
                                                @Html.HiddenFor(model => model.PassportUrl, new { Id = "passportImageId" })

                                                @Html.HiddenFor(model => model.ApplicationAlreadyExist)
                                                @Html.HiddenFor(model => model.HasJambPassport)

                                                <div class="row ">

                                                    <div class="col-md-6 form-group">
                                                        @Html.LabelFor(model => model.Person.LastName)
                                                        @Html.TextBoxFor(model => model.Person.LastName, new { @class = "form-control text-uppercase", @disabled = true, @readonly = "readonly", @id = "lastname" })
                                                        @Html.ValidationMessageFor(model => model.Person.LastName)
                                                    </div>
                                                    <div class="col-md-6 form-group">
                                                        @Html.LabelFor(model => model.Person.FirstName)
                                                        @Html.TextBoxFor(model => model.Person.FirstName, new { @class = "form-control text-uppercase", @disabled = true, @readonly = "readonly", @id = "firstname" })
                                                        @Html.ValidationMessageFor(model => model.Person.FirstName)
                                                    </div>

                                                    <div class="col-md-6 form-group">
                                                        @Html.LabelFor(model => model.Person.OtherName, new { @class = "control-label " })
                                                        @Html.TextBoxFor(model => model.Person.OtherName, new { @class = "form-control text-uppercase", @disabled = true, @readonly = "readonly", @id = "othername" })
                                                        @Html.ValidationMessageFor(model => model.Person.OtherName)
                                                    </div>

                                                    <div class="col-md-6 form-group">
                                                        @Html.LabelFor(model => model.Person.Sex.Id, new { @class = "control-label " })
                                                        @Html.DropDownListFor(f => f.Person.Sex.Id, (IEnumerable<SelectListItem>)ViewBag.SexId, new { @class = "form-control", @id = "sex", @disabled = true, @readonly = "readonly" })
                                                        @Html.ValidationMessageFor(model => model.Person.Sex.Id)
                                                    </div>


                                                    <div class="col-md-6 form-group">


                                                        @Html.LabelFor(model => model.Person.DateOfBirth, new { @class = "control-label " })


                                                        @Html.TextBoxFor(model => model.Person.DateOfBirth, new { @class = "form-control text-uppercase", @id = "dateofbirth",
                                                       @disabled = true, @readonly = "readonly",
                                                       @Value = Model.Person.DateOfBirth.Value.ToString("dd-MMM-yyyy")
                                                   })


                                                    </div>


                                                    <div class="col-md-6 form-group">
                                                        @Html.LabelFor(model => model.Person.State.Id, new { @class = "control-label " })
                                                        @Html.DropDownListFor(f => f.Person.State.Id, (IEnumerable<SelectListItem>)ViewBag.StateId, new { @class = "form-control", required = "required", @disabled = true, @readonly = "readonly" })
                                                        @Html.ValidationMessageFor(model => model.Person.State.Id)
                                                    </div>

                                                    <div class="col-md-6 form-group">
                                                        @Html.LabelFor(model => model.Person.LocalGovernment.Id, new { @class = "control-label " })
                                                        @Html.DropDownListFor(f => f.Person.LocalGovernment.Id, (IEnumerable<SelectListItem>)ViewBag.LgaIdpreview, new { @class = "form-control", @disabled = true, @readonly = "readonly" })
                                                        @Html.ValidationMessageFor(model => model.Person.LocalGovernment.Id)
                                                    </div>



                                                    <div class="col-md-6 form-group">
                                                        @Html.LabelFor(model => model.Person.HomeTown, new { @class = "control-label " })
                                                        @Html.TextBoxFor(model => model.Person.HomeTown, new { @class = "form-control text-uppercase", max = "50", @id = "hometown", @disabled = true, @readonly = "readonly" })
                                                        @Html.ValidationMessageFor(model => model.Person.HomeTown)
                                                    </div>

                                                    <div class="col-md-12 form-group">
                                                        @Html.LabelFor(model => model.Person.HomeAddress, new { @class = "control-label " })
                                                        @Html.TextBoxFor(model => model.Person.HomeAddress, new { @class = "form-control text-uppercase", max = "250", @id = "homeaddress", @disabled = true, @readonly = "readonly" })
                                                    </div>

                                                    <div class="col-md-6 form-group">
                                                        @Html.LabelFor(model => model.Person.MobilePhone, new { @class = "control-label " })
                                                        @Html.TextBoxFor(model => model.Person.MobilePhone, new { @class = "form-control", @disabled = true, @readonly = "readonly", @id = "phonenumber", max = "15", min = "11", type = "number" })
                                                        @Html.ValidationMessageFor(model => model.Person.MobilePhone)
                                                    </div>

                                                    <div class="col-md-6 form-group">
                                                        @Html.LabelFor(model => model.Person.Email, new { @class = "control-label " })
                                                        @Html.TextBoxFor(model => model.Person.Email, new { @class = "form-control text-uppercase", @disabled = true, @readonly = "readonly", max = "50", @id = "personemail" })
                                                    </div>

                                                    <div class="col-md-6 form-group">
                                                        @Html.LabelFor(model => model.Person.Religion.Id, new { @class = "control-label " })
                                                        @Html.DropDownListFor(model => model.Person.Religion.Id, (IEnumerable<SelectListItem>)ViewBag.Religiondrop, new { @class = "form-control", @id = "ReligionId", @disabled = true, @readonly = "readonly" })
                                                        
                                                    </div>
                                                    <div class="col-md-6 form-group">
                                                        <label>Passport </label>
                                                        <div class="row">
                                                           
                                                                <img src="@Model.Person.ImageFileUrl.Substring(1)" class="col-md-3" width="60" height="100" />
                                                            
                                                        </div>



                                                    </div>
                                                    <div class="col-md-6 form-group">
                                                        @Html.LabelFor(model => model.Applicant.Ability.Id, new { @class = "control-label " })
                                                        @Html.DropDownListFor(model => model.Applicant.Ability.Id, (IEnumerable<SelectListItem>)ViewBag.AbilityId, new { @class = "form-control", @id = "abilityid", @disabled = true, @readonly = "readonly" })
                                                    </div>
                                                    <div class="col-md-6 form-group">
                                                        @Html.LabelFor(model => model.Applicant.OtherAbility)
                                                        @Html.TextBoxFor(model => model.Applicant.OtherAbility, new { @class = "form-control text-uppercase", @disabled = true, @readonly = "readonly" })
                                                    </div>
                                                    <div class="col-md-6 form-group">
                                                        @Html.LabelFor(model => model.Applicant.ExtraCurricullarActivities)
                                                        @Html.TextBoxFor(model => model.Applicant.ExtraCurricullarActivities, new { @class = "form-control text-uppercase", @id = "extracurrilcularid", @disabled = true, @readonly = "readonly" })
                                                    </div>
                                                </div>

                                               
                                            </div>
                                        </div>
                                        <div class="card">
                                            <div class="col-md-12">
                                                <div class="row justify-content-center">
                                                    <h4 class=" col-lg-12 text-center">Olevel Details</h4>

                                                    <div class="row">
                                                        <div class="col-md-6 card pt-2">
                                                            <h5>First Sitting</h5>
                                                            <hr class="no-top-padding" />
                                                            @Html.HiddenFor(model => model.FirstSittingOLevelResult.Id)
                                                            <div>
                                                                <div class="form-group">
                                                                    @Html.LabelFor(model => model.FirstSittingOLevelResult.Type.Id, "Type", new { @class = "control-label col-md-3" })
                                                                    <div class="col-md-9">
                                                                        @Html.DropDownListFor(model => model.FirstSittingOLevelResult.Type.Id, (IEnumerable<SelectListItem>)ViewBag.FirstSittingOLevelTypeId, new { @class = "form-control olevel", @id = "oleveltype", @disabled = true, @readonly = "readonly" })
                                                                        @Html.ValidationMessageFor(model => model.FirstSittingOLevelResult.Type.Id)
                                                                    </div>
                                                                </div>

                                                                <div class="form-group">
                                                                    @Html.LabelFor(model => model.FirstSittingOLevelResult.ExamNumber, new { @class = "control-label col-md-3" })
                                                                    <div class="col-md-9">
                                                                        @Html.TextBoxFor(model => model.FirstSittingOLevelResult.ExamNumber, new { @class = "form-control", @id = "examnumber", @disabled = true, @readonly = "readonly" })
                                                                        @Html.ValidationMessageFor(model => model.FirstSittingOLevelResult.ExamNumber)
                                                                    </div>
                                                                </div>

                                                                <div class="form-group ">
                                                                    @Html.LabelFor(model => model.FirstSittingOLevelResult.ExamYear, new { @class = "control-label col-md-3" })
                                                                    <div class="col-md-9">
                                                                        @Html.DropDownListFor(model => model.FirstSittingOLevelResult.ExamYear, (IEnumerable<SelectListItem>)ViewBag.FirstSittingExamYearId, new { @class = "form-control olevel", @id = "examyear", @disabled = true, @readonly = "readonly" })
                                                                        @Html.ValidationMessageFor(model => model.FirstSittingOLevelResult.ExamYear)
                                                                    </div>
                                                                </div>
                                                            </div>

                                                            <table id="firstSittingTable" class="table table-condensed table-responsive" style="background-color: whitesmoke">
                                                                <thead>
                                                                    <tr>
                                                                        <th>
                                                                            Subject
                                                                        </th>
                                                                        <th>
                                                                            Grade
                                                                        </th>
                                                                        <th></th>
                                                                    </tr>
                                                                </thead>
                                                                <tbody>
                                                                    @for (int i = 0; i < @Model.FirstSittingOLevelResultDetails.Count; i++)
                                                                    {
                                                                        <tr>
                                                                            <td>
                                                                                @Html.HiddenFor(model => model.FirstSittingOLevelResultDetails[i].Id)
                                                                                @Html.HiddenFor(model => model.FirstSittingOLevelResultDetails[i].Subject.Name)
                                                                                @Html.DropDownListFor(model => model.FirstSittingOLevelResultDetails[i].Subject.Id, (IEnumerable<SelectListItem>)ViewData["FirstSittingOLevelSubjectId" + i], new { @class = "form-control olevel", @disabled = true, @readonly = "readonly" })
                                                                            </td>
                                                                            <td>

                                                                                @Html.HiddenFor(model => model.FirstSittingOLevelResultDetails[i].Grade.Name)
                                                                                @Html.DropDownListFor(model => model.FirstSittingOLevelResultDetails[i].Grade.Id, (IEnumerable<SelectListItem>)ViewData["FirstSittingOLevelGradeId" + i], new { @class = "form-control olevel", @disabled = true, @readonly = "readonly" })
                                                                            </td>
                                                                        </tr>
                                                                    }
                                                                </tbody>
                                                            </table>
                                                        </div>
                                                        <!--col-md-6 end form 1-->
                                                        <!-- beginning of form 2-->
                                                        @if (Model.SecondSittingOLevelResult != null )
                                                        {
                                                        <div class="col-md-6 card pt-2">
                                                            <h5>Second Sitting</h5>
                                                            <hr class="no-top-padding" />
                                                            @Html.HiddenFor(model => model.SecondSittingOLevelResult.Id)
                                                            <div>
                                                                <div class="form-group">

                                                                    @Html.LabelFor(model => model.SecondSittingOLevelResult.Type.Id, "Type", new { @class = "control-label col-md-3" })
                                                                    <div class="col-md-9">
                                                                        @Html.DropDownListFor(model => model.SecondSittingOLevelResult.Type.Id, (IEnumerable<SelectListItem>)ViewBag.SecondSittingOLevelTypeId, new { @class = "form-control olevel", @disabled = true, @readonly = "readonly" })
                                                                    </div>
                                                                </div>

                                                                <div class="form-group">
                                                                    @Html.LabelFor(model => model.SecondSittingOLevelResult.ExamNumber, new { @class = "control-label col-md-3" })
                                                                    <div class="col-md-9">
                                                                        @Html.TextBoxFor(model => model.SecondSittingOLevelResult.ExamNumber, new { @class = "form-control", @disabled = true, @readonly = "readonly" })
                                                                    </div>
                                                                </div>

                                                                <div class="form-group ">
                                                                    @Html.LabelFor(model => model.SecondSittingOLevelResult.ExamYear, new { @class = "control-label col-md-3" })
                                                                    <div class="col-md-9">
                                                                        @Html.DropDownListFor(model => model.SecondSittingOLevelResult.ExamYear, (IEnumerable<SelectListItem>)ViewBag.SecondSittingExamYearId, new { @class = "form-control olevel", @disabled = true, @readonly = "readonly" })
                                                                    </div>
                                                                </div>
                                                            </div>
                                                            <table id="secondSittingTable" class="table table-condensed table-responsive" style="background-color: whitesmoke">
                                                                <thead>
                                                                    <tr>
                                                                        <th>
                                                                            Subject
                                                                        </th>
                                                                        <th>
                                                                            Grade
                                                                        </th>
                                                                        <th></th>
                                                                    </tr>
                                                                </thead>
                                                                <tbody>
                                                                    @for (int i = 0; i < @Model.SecondSittingOLevelResultDetails.Count; i++)
                                                                    {
                                                                        <tr>
                                                                            <td>
                                                                                @Html.HiddenFor(model => model.SecondSittingOLevelResultDetails[i].Id)
                                                                                @Html.HiddenFor(model => model.SecondSittingOLevelResultDetails[i].Subject.Name)
                                                                                @Html.DropDownListFor(model => model.SecondSittingOLevelResultDetails[i].Subject.Id, (IEnumerable<SelectListItem>)ViewData["SecondSittingOLevelSubjectId" + i], new { @class = "form-control olevel", @disabled = true, @readonly = "readonly" })
                                                                            </td>
                                                                            <td>
                                                                                @Html.HiddenFor(model => model.SecondSittingOLevelResultDetails[i].Grade.Name)
                                                                                @Html.DropDownListFor(model => model.SecondSittingOLevelResultDetails[i].Grade.Id, (IEnumerable<SelectListItem>)ViewData["SecondSittingOLevelGradeId" + i], new { @class = "form-control olevel", @disabled = true, @readonly = "readonly" })
                                                                            </td>
                                                                        </tr>
                                                                    }
                                                                </tbody>
                                                            </table>
                                                        </div>
                                                        }
                                                    </div>
                                                </div>


                                               
                                            </div>
                                        </div>

                                        <div class="card">
                                            <div class="col-md-12">
                                                <div class="row justify-content-center">
                                                    <h4 class=" col-lg-12 text-center">Other Information </h4>
                                                </div>
                                                <div class="row">
                                                    <div class="col-md-6 form-group">
                                                        @Html.LabelFor(model => model.Sponsor.Name)
                                                        @Html.TextBoxFor(model => model.Sponsor.Name, new { @class = "form-control text-uppercase", max = "50", @id = "sponsorname", @disabled = true, @readonly = "readonly" })
                                                        @Html.ValidationMessageFor(model => model.Sponsor.Name)
                                                    </div>

                                                    <div class="col-md-6 form-group">
                                                        @Html.LabelFor(model => model.Sponsor.Relationship.Id, new { @class = "control-label " })
                                                        @Html.DropDownListFor(model => model.Sponsor.Relationship.Id, (IEnumerable<SelectListItem>)ViewBag.RelationshipId,
                                                       new { @class = "form-control" ,@id ="relationship", @disabled = true, @readonly = "readonly" })
                                                        @Html.ValidationMessageFor(model => model.Sponsor.Relationship.Id)
                                                    </div>

                                                    <div class="col-md-6 form-group">
                                                        @Html.LabelFor(model => model.Sponsor.MobilePhone, new { @class = "control-label " })
                                                        @Html.TextBoxFor(model => model.Sponsor.MobilePhone, new { @class = "form-control", @id = "sponsormobilephone", @disabled = true, @readonly = "readonly" })
                                                        @Html.ValidationMessageFor(model => model.Sponsor.MobilePhone)
                                                    </div>

                                                    <div class="col-md-6 form-group">
                                                        @Html.LabelFor(model => model.Sponsor.ContactAddress, new { @class = "control-label " })
                                                        @Html.TextBoxFor(model => model.Sponsor.ContactAddress, new { @class = "form-control text-uppercase", @id = "sponsorcontactadrress", max = "350", @disabled = true, @readonly = "readonly" })
                                                        @Html.ValidationMessageFor(model => model.Sponsor.ContactAddress)
                                                    </div>



                                                    <div class="col-md-12">
                                                        <h4>Subject Combination</h4>
                                                    </div>
                                                    <div class="col-md-6 form-group">
                                                        @Html.LabelFor(model => model.JupebDepartmentChoice.FirstChoiceDepartment.Id, "First Choice Department")
                                                        @Html.DropDownListFor(model => model.AppliedCourse.Department.Id, (IEnumerable<SelectListItem>)ViewBag.DepartmentId,
                                                       new { @class = "form-control", @disabled = true, @readonly = "readonly" ,@id = "firstchoicedepartment"})
                                                        @Html.ValidationMessageFor(model => model.Person.LastName)
                                                    </div>
                                                    <div class="col-md-6 form-group">
                                                        @Html.LabelFor(model => model.JupebDepartmentChoice.SecondChoiceDepartment.Id, "Second Choice Department")
                                                        @Html.DropDownListFor(model => model.JupebDepartmentChoice.SecondChoiceDepartment.Id, (IEnumerable<SelectListItem>)ViewBag.DepartmentId,
                                                       new { @class = "form-control",@id = "secondchoicedepartment", @disabled = true, @readonly = "readonly" })
                                                        @Html.ValidationMessageFor(model => model.Person.LastName)
                                                    </div>
                                                    <div class="col-md-6 form-group">
                                                        @Html.LabelFor(model => model.JupebOptions.Id, "Field")
                                                        @Html.DropDownListFor(model => model.JupebOptions.Id, (IEnumerable<SelectListItem>)ViewBag.fields,
                                                       new { @class = "form-control", @id = "fieldId", @disabled = true, @readonly = "readonly" })
                                                        @Html.ValidationMessageFor(model => model.JupebOptions.Id)
                                                    </div>
                                                    <div class="col-md-6 form-group">
                                                        @Html.LabelFor(model => model.JupebSubjectCombination.Id, "Subject Combination")
                                                        @Html.DropDownListFor(model => model.JupebSubjectCombination.Id, (IEnumerable<SelectListItem>)ViewBag.Subcombination,
                                                       new { @class = "form-control", @id = "subjectcombination", @disabled = true, @readonly = "readonly" })
                                                        @Html.ValidationMessageFor(model => model.JupebSubjectCombination.Id)
                                                    </div>
                                                    <div class="col-md-12">
                                                        <h4>Previous Education</h4>
                                                    </div>




                                                    <div class="col-md-12">
                                                        <div class="form-group">
                                                            @Html.LabelFor(model => model.PreviousSchoolRecord1.SchoolName, new { @class = "control-label " })
                                                            @Html.TextBoxFor(model => model.PreviousSchoolRecord1.SchoolName, new { @class = "form-control", @readonly = "readonly" ,@disabled = true})
                                                            @Html.ValidationMessageFor(model => model.PreviousSchoolRecord1.SchoolName)
                                                        </div>
                                                    </div>


                                                    <div class="col-md-3 form-group">

                                                        <div class="" style="color: black">
                                                            @Html.LabelFor(model => model.PreviousSchoolRecord1.StartDate, "Start Year", new { @class = "control-label " })
                                                        </div>
                                                        <div>
                                                            @Model.PreviousSchoolRecord1.StartYear.Id
                                                        </div>


                                                    </div>
                                                    <div class="col-md-3">
                                                        <div class="form-group">

                                                            <div class="" style="color: black">
                                                                @Html.LabelFor(model => model.PreviousSchoolRecord1.EndDate, "End Year", new { @class = "control-label " })
                                                            </div>
                                                            <div>
                                                                @Model.PreviousSchoolRecord1.EndYear.Id
                                                            </div>
                                                        </div>

                                                    </div>

                                                    <div class="col-md-6 form-group">
                                                        @Html.LabelFor(model => model.PreviousSchoolRecord1.Qualification.Id, new { @class = "control-label " })
                                                        @Html.DropDownListFor(model => model.PreviousSchoolRecord1.Qualification.Id, (IEnumerable<SelectListItem>)ViewBag.QualificationId, new { @class = "form-control", @disabled = true, @readonly = "readonly" })
                                                        @Html.ValidationMessageFor(model => model.PreviousSchoolRecord1.Qualification.Id)

                                                    </div>


                                                    <div class="col-md-12">
                                                        <div class="form-group">
                                                            @Html.LabelFor(model => model.PreviousSchoolRecord2.SchoolName, new { @class = "control-label " })
                                                            @Html.TextBoxFor(model => model.PreviousSchoolRecord2.SchoolName, new { @class = "form-control", @disabled = true, @readonly = "readonly" })
                                                            @Html.ValidationMessageFor(model => model.PreviousSchoolRecord2.SchoolName)
                                                        </div>
                                                    </div>


                                                    <div class="col-md-3 form-group">

                                                        <div class="" style="color: black">
                                                            @Html.LabelFor(model => model.PreviousSchoolRecord2.StartDate, "Start Year", new { @class = "control-label " })
                                                        </div>
                                                        <div>
                                                           @Model.PreviousSchoolRecord2.StartYear.Id
                                                        </div>


                                                    </div>
                                                    <div class="col-md-3">
                                                        <div class="form-group">

                                                            <div class="form-inline" style="color: black">
                                                                @Html.LabelFor(model => model.PreviousSchoolRecord2.EndDate, "End Year", new { @class = "control-label " })
                                                            </div>
                                                            <div>
                                                                @Model.PreviousSchoolRecord2.EndYear.Id
                                                            </div>
                                                        </div>

                                                    </div>

                                                    <div class="col-md-6 form-group">
                                                        @Html.LabelFor(model => model.PreviousSchoolRecord2.Qualification.Id, new { @class = "control-label " })
                                                        @Html.DropDownListFor(model => model.PreviousSchoolRecord2.Qualification.Id, (IEnumerable<SelectListItem>)ViewBag.QualificationId, new { @class = "form-control", @disabled = true, @readonly = "readonly" })
                                                        @Html.ValidationMessageFor(model => model.PreviousSchoolRecord2.Qualification.Id)

                                                    </div>






                                                </div>


                                                <hr />



                                                <div class="row justify-content-between col-md-12">
                                                    @Html.ActionLink("Back to Form", "JupebApplicationForm", null, new { @class = "btn btn-primary" })

                                                    <button class="nav-link nav-tab-link btn btn-custom" type="submit">Submit</button>
                                                </div>


                                            </div>

                                        </div>

                                      
                                    </div>



                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

            </div>
        </div>


    </div>
</div>



