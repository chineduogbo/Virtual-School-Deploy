@model Abundance_Nk.Web.Areas.Admin.ViewModels.TranscriptRequestViewModel
@using Abundance_Nk.Business
@{
    ViewBag.Title = "Transcript Request";
}


<script src="~/Scripts/DataTables-1.10.15/media/js/jquery.js"></script>
<script src="~/Content/js/bootstrap.min.js"></script>
<link href="~/Scripts/DataTables-1.10.15/media/css/jquery.dataTables.css" rel="stylesheet" />
<script src="~/Scripts/DataTables-1.10.15/media/js/jquery.dataTables.js"></script>
<link href="~/Scripts/DataTables-1.10.15/extensions/Buttons/css/buttons.dataTables.css" rel="stylesheet" />
<script src="~/Scripts/DataTables-1.10.15/extensions/Buttons/js/dataTables.buttons.js"></script>
<script src="~/Scripts/DataTables-1.10.15/extensions/Buttons/js/buttons.colVis.js"></script>
<script src="~/Scripts/DataTables-1.10.15/extensions/Responsive/js/dataTables.responsive.js"></script>
<script src="~/Scripts/DataTables-1.10.15/buttons.flash.min.js"></script>
<script src="~/Scripts/DataTables-1.10.15/buttons.html5.min.js"></script>
<script src="~/Scripts/DataTables-1.10.15/buttons.print.min.js"></script>
<script src="~/Scripts/DataTables-1.10.15/jszip.min.js"></script>
<script src="~/Scripts/DataTables-1.10.15/pdfmake.min.js"></script>
<script src="~/Scripts/DataTables-1.10.15/vfs_fonts.js"></script>
<script src="~/Scripts/sweetalert.min.js"></script>
<link href="~/Content/sweetalert.css" rel="stylesheet" />



<script type="text/javascript">
    var incidentIds = [];
    $(function () {
        //this master checkbox
        $("#checkMaster").click(function (event) {  //on click
            if (this.checked) { // check select status
                $(":checkbox").each(function () { //loop through each checkbox
                    this.checked = true;  //select all checkboxes with class "checkbox1"
                });
            } else {
                $(":checkbox").each(function () { //loop through each checkbox
                    this.checked = false; //deselect all checkboxes with class "checkbox1"
                });
            }
        });



        //this is where the to checkboxes are bond
        $(":checkbox").change(function () {


            var values = this.id.split('*');
            getMaxCheckedId = values[0]; //getting the autogenerated Id



            if (getMaxCheckedId > 0) {
                var i;
                for (i = 0; i <= getMaxCheckedId; i++) {
                    var getUpperId = "#" + i;// getting the tr id

                    $(getUpperId).find('[type=checkbox]').prop('checked', true);
                }



            }



        })

        // close the selected Tickets By Their Ids
        $('#logClose').on('click', function () {
            $("#showLoad").show();
            checkedIds = $(":checkbox").filter(":checked").map(function () { return this.id; });
            if (checkedIds.length > 0) {
                $.ajax({
                    type: "POST",
                    url: "@Url.Action("CloseLog")",
                    traditional: true,
                    data: { logIds: checkedIds.toArray() },
                    success: function (result) {
                        if (result.IsError === false) {
                            swal("Info", result.Message, "success");
                            $("#showLoad").hide();
                            location.reload(true);
                        }
                        // error: errorFunc
                    },
                    error: function (ex) {
                        alert('Failed to Close Ticket.' + ex);
                    }
                })
            }
            else {
                $("#showLoad").hide();
                swal("Info", "You have not selected an applicant", "error");
            }
        })



        $.extend($.fn.dataTable.defaults, {
            responsive: false
        });

        $("#myTable").DataTable({
            dom: 'Bfrtip',
            ordering: true,
            buttons: [
                {
                    extend: 'copy',
                    exportOptions: {
                        columns: ':visible',
                        modifier: {
                            orientation: 'landscape'
                        }
                    },
                    orientation: 'landscape'


                },
                {
                    extend: 'csv',
                    exportOptions: {
                        columns: ':visible',
                        modifier: {
                            orientation: 'landscape'
                        }
                    },
                    orientation: 'landscape'

                },
                {
                    extend: 'excel',
                    exportOptions: {
                        columns: ':visible',
                        modifier: {
                            orientation: 'landscape'
                        }
                    },
                    orientation: 'landscape'


                },
                {
                    extend: 'pdf',
                    exportOptions: {
                        columns: ':visible',
                        header: true,
                        modifier:{
                            orientation: 'landscape'
                        }



                    },
                    orientation: 'landscape'


                },
                {
                    extend: 'print',
                    exportOptions: {
                        columns: ':visible',
                        modifier: {
                            orientation: 'landscape'
                        }
                    },
                    orientation: 'landscape'


                }, , 'colvis'
            ]
        });

        $("#submit").click(function () {
            $('#submit').attr('disable', 'disable');
        });
    });
    function logRecord(e,y) {
        requestId = e;
        departmentId = y;
    }
</script>

@if (TempData["Message"] != null)
            {
    @Html.Partial("_Message", (Abundance_Nk.Model.Model.Message)TempData["Message"])
}


<br />
<div class="panel panel-default">
    <div class="panel-heading" style="font:larger">
        VIEW LOG
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <div class="panel panel-default">
            <div class="panel-body">
                @using (Html.BeginForm("ViewTranscriptIncidentLog", "TranscriptProcessor", new { area = "Admin" }, FormMethod.Post))
                {
                    <div class="row">
                        <div class="col-md-12">
                            <div style="overflow: hidden;">
                                <div class="form-group">
                                    <div class="row">

                                        <div class="col-md-4">
                                            From: @Html.TextBoxFor(model => model.From, "", new { @class = "form-control col-md-3", @type = "date", @id = "datefrom" })
                                        </div>
                                        <div class="col-md-4">
                                            To: @Html.TextBoxFor(model => model.To, new { @class = "form-control col-md-3", @type = "date", @id = "dateto" })
                                        </div>
                                        <div class="col-md-4">
                                            View Closed Ticket: @Html.CheckBoxFor(model => model.Active, new { @class = "" })
                                        </div>
                                      

                                    </div>
                                    <br />

                                    <div class="row">
                                        <div class="col-md-12">
                                            <div class="col-md-3">
                                                <input type="submit" id="submit" value="Search" class="btn btn-success mr5" />
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                        </div>
                    </div>
                }
            </div>
        </div>
    </div>

</div>



@if (Model == null || Model.TranscriptIncidentLogs == null) { return; }

@if (Model != null && Model.TranscriptIncidentLogs != null && Model.ShowClosedTicket == false)
{
    <div class="col-sm-12" style="padding: 20px;">

        <div class="alert alert-success fade in nomargin">
            <h3 style="text-align: center">OPEN TICKETS</h3>
        </div>

        <table class="table table-responsive table-bordered table-striped table-hover" id="myTable">
            <thead>
                <tr>
                    <th>
                        SN
                    </th>
                    <th>
                        STUDENT NAME
                    </th>
                    <th>
                        MATRIC NO.
                    </th>
                    <th>
                        DEPARTMENT
                    </th>
                    <th>
                        DESTINATION ADDRESS
                    </th>

                    <th>
                        PAYMENT DATE
                    </th>

                    <th>
                        STATUS
                    </th>
                    <th>
                        LOG DATE
                    </th>
                    @*<th>@Html.CheckBox("MasterBox", false, new { @class = "checkMaster", @id = "checkMaster" })</th>*@
                    <th></th>

                </tr>
            </thead>
            <tbody>
                @{ int startId = 1;}
                @for (int i = 0; i < Model.TranscriptIncidentLogs.Count; i++)
                {
                    var cId = startId++;
                    int sn = i + 1;
                    var pid = Model.TranscriptIncidentLogs[i].TranscriptRequest.payment.Id;
                    var status = Model.TranscriptIncidentLogs[i].TranscriptRequest.transcriptStatus.TranscriptStatusId == 5 ? "Dispatched" : "Processing";
                    PaymentEtranzactLogic paymentEtranzactLogic = new PaymentEtranzactLogic();
                    PaymentInterswitchLogic paymentInterswitchLogic = new PaymentInterswitchLogic();
                    var paymentEtranzact = paymentEtranzactLogic.GetModelsBy(x => x.Payment_Id == pid).FirstOrDefault();
                    var paymentInterswitch = paymentInterswitchLogic.GetModelsBy(x => x.Payment_Id == pid).FirstOrDefault();
                    var paymentDate = paymentEtranzact != null ? paymentEtranzact.TransactionDate : paymentInterswitch.TransactionDate;
                    <tr id=@cId>
                        <td class="col-lg-1 col-md-1 col-sm-1">
                            @sn
                        </td>
                        <td class="col-lg-3 col-md-3 col-sm-3">
                            @Model.TranscriptIncidentLogs[i].TranscriptRequest.student.FullName
                        </td>
                        <td class="col-lg-3 col-md-3 col-sm-3">
                            @Model.TranscriptIncidentLogs[i].TranscriptRequest.student.MatricNumber
                        </td>
                        <td class="col-lg-3 col-md-3 col-sm-3">
                            @Model.TranscriptIncidentLogs[i].Department.Name.ToUpper();
                        </td>
                        <td class="col-lg-3 col-md-3 col-sm-3">
                            @Model.TranscriptIncidentLogs[i].TranscriptRequest.DestinationAddress
                        </td>
                        <td class="col-lg-3 col-md-3 col-sm-3">
                            @paymentDate
                        </td>

                        <td class="col-lg-3 col-md-3 col-sm-3">
                            @status
                        </td>
                        <td class="col-lg-3 col-md-3 col-sm-3">
                            @Model.TranscriptIncidentLogs[i].Date_Opened
                        </td>
                        <td>
                        @Html.CheckBox(Model.TranscriptIncidentLogs[i].TicketId, false, new { @class = "checkedAppNo", @id = cId + "*" + Model.TranscriptIncidentLogs[i].Id })
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        @if (Model.TranscriptIncidentLogs.Count > 0)
        {
            <button class="admitButton btn-primary" id="logClose">
                CLOSE SELECTED<img src="~/Content/Images/bx_loader.gif" alt="Loading........" style="display:none;" id="showLoad" />
            </button>
        }

    </div>

                    }


@if (Model != null && Model.TranscriptIncidentLogs != null && Model.ShowClosedTicket==true)
{
    <div class="col-sm-12" style="padding: 20px;">

        <div class="alert alert-success fade in nomargin">
            <h3 style="text-align: center">CLOSED TICKETS</h3>
        </div>

        <table class="table table-responsive table-bordered table-striped table-hover" id="myTable">
            <thead>
                <tr>
                    <th>
                        SN
                    </th>
                    <th>
                        STUDENT NAME
                    </th>
                    <th>
                        MATRIC NO.
                    </th>
                    <th>
                        DEPARTMENT
                    </th>
                    <th>
                        DESTINATION ADDRESS
                    </th>

                    <th>
                        PAYMENT DATE
                    </th>

                    <th>
                        STATUS
                    </th>
                    <th>
                        LOG DATE
                    </th>
                    <th>CLOSE DATE</th>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < Model.TranscriptIncidentLogs.Count; i++)
                {
                    int sn = i + 1;
                    var pid = Model.TranscriptIncidentLogs[i].TranscriptRequest.payment.Id;
                    var status = Model.TranscriptIncidentLogs[i].TranscriptRequest.transcriptStatus.TranscriptStatusId == 5 ? "Dispatched" : "Processing";
                    PaymentEtranzactLogic paymentEtranzactLogic = new PaymentEtranzactLogic();
                    PaymentInterswitchLogic paymentInterswitchLogic = new PaymentInterswitchLogic();
                    var paymentEtranzact = paymentEtranzactLogic.GetModelsBy(x => x.Payment_Id == pid).FirstOrDefault();
                    var paymentInterswitch = paymentInterswitchLogic.GetModelsBy(x => x.Payment_Id == pid).FirstOrDefault();
                    var paymentDate = paymentEtranzact != null ? paymentEtranzact.TransactionDate : paymentInterswitch.TransactionDate;
                    <tr>
                        <td class="col-lg-1 col-md-1 col-sm-1">
                            @sn
                        </td>
                        <td class="col-lg-3 col-md-3 col-sm-3">
                            @Model.TranscriptIncidentLogs[i].TranscriptRequest.student.FullName
                        </td>
                        <td class="col-lg-3 col-md-3 col-sm-3">
                            @Model.TranscriptIncidentLogs[i].TranscriptRequest.student.MatricNumber
                        </td>
                        <td class="col-lg-3 col-md-3 col-sm-3">
                            @Model.TranscriptIncidentLogs[i].Department.Name.ToUpper();
                        </td>
                        <td class="col-lg-3 col-md-3 col-sm-3">
                            @Model.TranscriptIncidentLogs[i].TranscriptRequest.DestinationAddress
                        </td>
                        <td class="col-lg-3 col-md-3 col-sm-3">
                            @paymentDate
                        </td>

                        <td class="col-lg-3 col-md-3 col-sm-3">
                            @status
                        </td>
                        <td class="col-lg-3 col-md-3 col-sm-3">
                            @Model.TranscriptIncidentLogs[i].Date_Opened
                        </td>
                        <td>
                            @Model.TranscriptIncidentLogs[i].Date_Closed
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
                    }