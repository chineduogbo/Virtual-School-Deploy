@model Abundance_Nk.Web.Areas.Admin.ViewModels.TranscriptRequestViewModel
@using Abundance_Nk.Business
@{
    ViewBag.Title = "Transcript Request";
}


<script src="~/Scripts/DataTables-1.10.15/media/js/jquery.js"></script>

<link href="~/Scripts/DataTables-1.10.15/media/css/jquery.dataTables.css" rel="stylesheet" />
<script src="~/Scripts/DataTables-1.10.15/media/js/jquery.dataTables.js"></script>
<link href="~/Scripts/DataTables-1.10.15/extensions/Buttons/css/buttons.dataTables.css" rel="stylesheet" />
<script src="~/Scripts/DataTables-1.10.15/extensions/Buttons/js/dataTables.buttons.js"></script>
<script src="~/Scripts/DataTables-1.10.15/extensions/Buttons/js/buttons.colVis.js"></script>
<script src="~/Scripts/DataTables-1.10.15/extensions/Responsive/js/dataTables.responsive.js"></script>
<script src="~/Scripts/DataTables-1.10.15/buttons.flash.min.js"></script>
<script src="~/Scripts/DataTables-1.10.15/buttons.html5.min.js"></script>
<script src="~/Scripts/DataTables-1.10.15/buttons.print.min.js"></script>
<script src="~/Scripts/DataTables-1.10.15/jszip.min.js"></script>
<script src="~/Scripts/DataTables-1.10.15/pdfmake.min.js"></script>
<script src="~/Scripts/DataTables-1.10.15/vfs_fonts.js"></script>



<script type="text/javascript">
    $(function () {


        $.extend($.fn.dataTable.defaults, {
            responsive: false
        });

        $("#myTable").DataTable({
            dom: 'Bfrtip',
            ordering: true,
            buttons: [
                {
                    extend: 'copy',
                    exportOptions: {
                        columns: ':visible',
                        modifier: {
                            orientation: 'landscape'
                        }
                    },
                    orientation: 'landscape'


                },
                {
                    extend: 'csv',
                    exportOptions: {
                        columns: ':visible',
                        modifier: {
                            orientation: 'landscape'
                        }
                    },
                    orientation: 'landscape'

                },
                {
                    extend: 'excel',
                    exportOptions: {
                        columns: ':visible',
                        modifier: {
                            orientation: 'landscape'
                        }
                    },
                    orientation: 'landscape'


                },
                {
                    extend: 'pdf',
                    exportOptions: {
                        columns: ':visible',
                        header: true,
                        modifier: {
                            orientation: 'landscape'
                        }



                    },
                    orientation: 'landscape'


                },
                {
                    extend: 'print',
                    exportOptions: {
                        columns: ':visible',
                        modifier: {
                            orientation: 'landscape'
                        }
                    },
                    orientation: 'landscape'


                }, , 'colvis'
            ]
        });

        $("#submit").click(function () {
            $('#submit').attr('disable', 'disable');
        });
    });
</script>

@if (TempData["Message"] != null)
            {
    @Html.Partial("_Message", (Abundance_Nk.Model.Model.Message)TempData["Message"])
}
<br />

@*@using (Html.BeginForm("ViewTranscriptRequest", "TranscriptProcessor", new { area = "admin" }, FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        <div class="col-md-12" style="padding: 20px;">
            <div class="row">
                <div class="col-md-6">

                    <div class="form-group">
                        @Html.LabelFor(model => model.TranscriptStatus.TranscriptStatusId, "Status", new { @class = "control-label" })
                        @Html.DropDownListFor(model => model.TranscriptStatus.TranscriptStatusId, (IEnumerable<SelectListItem>)ViewBag.Transcript, new { @class = "form-control", @required = "required" })
                        @Html.ValidationMessageFor(model => model.TranscriptStatus.TranscriptStatusId, null, new { @class = "text-danger" })
                    </div>
                </div>

                <div class="col-md-6">
                    <br />
                        <input type="submit" class="btn-primary" value="Submit" />
                </div>
            </div>
        </div>
    }*@
<div class="col-sm-12" style="padding: 20px;">

    <div class="alert alert-success fade in nomargin">
        <h3 style="text-align: center">ALL PAID TRANSCRIPT REQUEST</h3>
    </div>



    @if (Model != null && Model.GroupTranscriptByYears.Count > 0)
            {
        @*<div class="table-responsive">*@
        <h3>Yearly Count - @ViewBag.Title</h3>
        <table class="table table-bordered table-hover table-striped" id="myTable">
            <thead>
                <tr>
                    <th>
                        SN
                    </th>
                    <th>
                        Year
                    </th>
                    <th>
                        Count
                    </th>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < Model.GroupTranscriptByYears.Count; i++)
                {
                    int sn = i + 1;
                    <tr>
                        <td class="col-lg-1 col-md-1 col-sm-1">
                            @sn
                        </td>
                        <td class="col-lg-3 col-md-3 col-sm-3">
                            @Html.ActionLink(@Model.GroupTranscriptByYears[i].Year.ToString(), "TranscriptCountByMonth", new { year = @Model.GroupTranscriptByYears[i].Year, area = "admin", controller = "TranscriptProcessor" })
                        </td>
                        <td class="col-lg-3 col-md-3 col-sm-3">
                            @Model.GroupTranscriptByYears[i].TranscriptCount
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        @*</div>*@
    }
    @if (Model != null && Model.GroupTranscriptByMonths.Count > 0)
            {
        @*<div class="table-responsive">*@
        <h3>@Model.GroupTranscriptByMonths.FirstOrDefault().Year - @ViewBag.Title - Count</h3>
        <table class="table table-responsive table-bordered table-striped table-hover" id="myTable">
            <thead>
                <tr>
                    <th>
                        SN
                    </th>
                    @*<th>
                            Year
                        </th>*@
                    <th>
                        Month
                    </th>
                    <th>
                        Count
                    </th>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < Model.GroupTranscriptByMonths.Count; i++)
                {
                    int sn = i + 1;
                    <tr>
                        <td class="col-lg-1 col-md-1 col-sm-1">
                            @sn
                        </td>
                        @*<td class="col-lg-2 col-md-2 col-sm-2">
                                @Model.GroupTranscriptByMonths[i].Year.ToString()
                            </td>*@
                        <td class="col-lg-3 col-md-3 col-sm-3">
                            @Html.ActionLink(@Model.GroupTranscriptByMonths[i].Month, "TranscriptRequestByMonth", new { month = @Model.GroupTranscriptByMonths[i].intMonth, year = @Model.GroupTranscriptByMonths[i].Year, area = "admin", controller = "TranscriptProcessor" })
                        </td>
                        <td class="col-lg-3 col-md-3 col-sm-3">
                            @Model.GroupTranscriptByMonths[i].TranscriptCount
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        @*</div>*@
    }
    @if (Model != null && Model.TranscriptRequests.Count > 0)
            {
        @*<div class="table-responsive">*@
        <h3>@Model.TranscriptRequests.FirstOrDefault().DateRequested.Year - @ViewBag.Title</h3>
        <table class="table table-responsive table-bordered table-striped table-hover" id="myTable">
            <thead>
                <tr>
                    <th>
                        SN
                    </th>
                    <th>
                        Student Name
                    </th>
                    <th>
                        Matric Number
                    </th>
                    <th>
                        Phone Number
                    </th>
                    <th>
                        Email
                    </th>
                    <th>
                        Destination Address
                    </th>
                    <th>
                        State
                    </th>
                    <th>
                        Country
                    </th>
                    <th>
                        Date Requested
                    </th>
                    <th>
                        Processing Fee
                    </th>
                    <th>
                        Courier Service
                    </th>
                    <th>
                        Status
                    </th>
                    <th>
                    </th>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < Model.TranscriptRequests.Count; i++)
                {
                    int sn = i + 1;
                    var pid = Model.TranscriptRequests[i].payment.Id;
                    var status = Model.TranscriptRequests[i].transcriptStatus.TranscriptStatusId == 5 ? "Dispatched" : "Processing";
                    PaymentEtranzactLogic paymentEtranzactLogic = new PaymentEtranzactLogic();
                    PaymentInterswitchLogic paymentInterswitchLogic = new PaymentInterswitchLogic();
                    var paymentEtranzact = paymentEtranzactLogic.GetModelsBy(x => x.Payment_Id == pid).FirstOrDefault();
                    var paymentInterswitch = paymentInterswitchLogic.GetModelsBy(x => x.Payment_Id == pid).FirstOrDefault();
                    var amountPaid = paymentEtranzact != null ? paymentEtranzact.TransactionAmount : paymentInterswitch.Amount;
                    var courierService = Model.TranscriptRequests[i].DeliveryServiceZone != null ? Model.TranscriptRequests[i].DeliveryServiceZone.DeliveryService.Name.ToUpper() : null;
                    <tr>
                        <td class="col-lg-1 col-md-1 col-sm-1">
                            @sn
                        </td>
                        <td class="col-lg-3 col-md-3 col-sm-3">
                            @Model.TranscriptRequests[i].student.Name
                        </td>
                        <td class="col-lg-3 col-md-3 col-sm-3">
                            @Model.TranscriptRequests[i].student.MatricNumber
                        </td>
                        <td class="col-lg-3 col-md-3 col-sm-3">
                            @Model.TranscriptRequests[i].student.MobilePhone
                        </td>
                        <td class="col-lg-3 col-md-3 col-sm-3">
                            @Model.TranscriptRequests[i].student.Email
                        </td>
                        @*<td class="col-lg-3 col-md-3 col-sm-3">
                                @Model.TranscriptRequests[i]..department.Name
                            </td>
                            <td class="col-lg-3 col-md-3 col-sm-3">
                                @Model.TranscriptRequests[i].student.de.ProgrammeType.Name
                            </td>*@
                        <td class="col-lg-3 col-md-3 col-sm-3">
                            @Model.TranscriptRequests[i].DestinationAddress
                        </td>
                        <td class="col-lg-3 col-md-3 col-sm-3">
                            @Model.TranscriptRequests[i].DestinationState.Name
                        </td>
                        <td class="col-lg-3 col-md-3 col-sm-3">
                            @Model.TranscriptRequests[i].DestinationCountry.CountryName
                        </td>
                        <td class="col-lg-3 col-md-3 col-sm-3">
                            @Model.TranscriptRequests[i].DateRequested
                        </td>
                        <td>
                            ₦ @string.Format("{0:0,0.00}", amountPaid)
                        </td>
                        <td>
                            @courierService
                        </td>
                        <td class="col-lg-3 col-md-3 col-sm-3">
                            @status
                        </td>
                        <td>
                            <span class="glyphicon glyphicon-add" aria-hidden="true"></span> @Html.ActionLink("Dispatch", "DispatchTranscript", new { trId = @Model.TranscriptRequests[i].Id, area = "admin", controller = "TranscriptProcessor" }, new { @class = "btn btn-success", target = "_blank" })
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        @*</div>*@
    }

</div>

